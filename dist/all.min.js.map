{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///all.min.js","webpack:///webpack/bootstrap d4f6e256792782e58438","webpack:///./src/_cn-flex-form.module.js","webpack:///./src/cn-flex-form-config.service.js","webpack:///./src/cn-flex-form-types.service.js","webpack:///./src/cn-flex-form.routes.js","webpack:///./src/schema-form-extensions.js","webpack:///./src/cn-flex-form.service.js","webpack:///external \"lodash\"","webpack:///external \"objectpath\"","webpack:///./src/cn-flex-form-modal-loader.service.js","webpack:///./src/cn-flex-form-modal-loader.js","webpack:///./src/cn-flex-form.directive.js","webpack:///./~/process/browser.js","webpack:///./src/cn-flex-form-header.directive.js","webpack:///./src/cn-flex-form-validate.directive.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_cnFlexFormConfig","_cnFlexFormConfig2","_cnFlexFormTypes","_cnFlexFormTypes2","_cnFlexForm","_schemaFormExtensions","_cnFlexForm2","_cnFlexForm3","_cnFlexFormModalLoader","_cnFlexFormModalLoader2","_cnFlexFormModalLoader3","_cnFlexForm4","_cnFlexForm5","_cnFlexFormHeader","_cnFlexFormHeader2","_cnFlexFormValidate","_cnFlexFormValidate2","console","log","angular","provider","cnFlexFormRoutesProvider","config","cnFlexFormRoutes","schemaFormConfig","run","addTemplates","FlexFormModal","controller","FlexFormModalLoader","directive","name","cnFlexFormConfigProvider","addIgnoreParam","param","ignoreParams","push","cnFlexFormConfig","$stateParams","getStateParams","_","chain","omit","v","isUndefined","isNull","$inject","$get","cnFlexFormTypesProvider","registerFieldType","fieldType","fieldTypeRegister","unshift","cnFlexFormTypes","getFieldType","field","i","l","length","condition","type","schema","includes","titleMap","titleMapResolve","titleMapQuery","format","$stateProvider","addStates","_ref","permissions","shared","controllerAs","state","_extends","url","templateUrl","assign","target","arguments","source","key","prototype","hasOwnProperty","cnFlexFormServiceProvider","tv4","addFormat","data","isString","test","extensions","each","extension","registerField","$templateCache","put","sharedAutocompleteTpl","_defineProperty","enumerable","configurable","writable","schemaFormDecoratorsProvider","handler","fieldTypeHandlers","addMapping","createDirective","CNFlexFormService","Api","$parse","sfPath","$interpolate","$rootScope","$timeout","cnUtil","getService","fn","find","services","CNFlexFormConstructor","_len","args","Array","_key","model","_args$","curService","service","compile","newService","CNFlexForm","debug","window","arrayCopies","arrayListeners","dataCache","defaults","errors","events","formCache","scopeCache","listeners","resolveRegister","updates","skipDefault","params","isCompiled","setupConfig","forms","form","processField","bind","initModelWatch","initArrayCopyWatch","broadcastErrors","setValue","compiled","formCtrl","updateSchema","getSchema","getSchemaForm","setupSchemaRefresh","processSchema","getSchemaType","isArray","first","processDefault","curDefault","getKey","isDefined","parseExpression","modelValue","get","isTrulyEmpty","has","equals","set","copy","validationMessage","processFieldset","fieldset","items","forEach","pos","htmlClass","collapsible","toggleCollapse","collapsed","render","processFieldType","secondPass","isFunction","_ogKeys","without","keys","addToFormCache","description","readonly","showClearAll","processFieldProps","reject","$broadcast","error","buildError","isEmpty","ngModelOptions","allowInvalid","fieldPropHandlers","prop","reduce","total","next","depth","ObjectPath","parse","properties","shift","getDefault","getFromFormCache","getWatchables","exp","watchables","nested","matchNestedExpression","replaceStr","replace","concat","processResolve","resolve","dataProp","fieldProp","replaceArrayIndex","arrayIndex","handleResolve","watchable","_ref2","match","_ref3","_slicedToArray","base","registerResolve","registerHandler","skipPropHandlers","eithers","split","x","all","undefined","indexOf","genericKey","stripIndexes","cachedField","cursor","loadMore","refreshSchema","_ref4","fieldKey","register","processConditional","conditionals","val","prev","parseCondition","scope","getFromScopeCache","map","path","processFieldWatch","watch","resolution","cur","adjustment","date","trim","math","operator","+","-","*","/","adjuster","trigger","curCondition","updatePath","fromPath","update","from","moment","add","toDate","result","floor","ceil","round","initialize","startsWith","_condition$match","_condition$match2","list","predicateParams","predicateBody","generatePredicate","body","_len2","_key2","acc","runHandler","isObject","arrMatch","registerArrayHandlers","defaultValue","handlers","arrKey","onArray","reorder","lastKey","deregisterHandlers","arrVal","listenerKey","deregisterArrayHandlers","item","watching","modelWatch","$watch","onModelWatch","initSchemaParams","firstUpdate","cleanModel","prevParams","listener","isInitArray","$on","event","cacheKey","uniqueId","isNumber","index","getArrayCopy","addArrayCopy","$emit","addToScopeCache","unindexedKey","copies","getArrayCopiesFor","splice","link","getArrayCopies","pluck","getArrayScopes","keyStart","filter","warn","addToDataCache","getFromDataCache","matchIntStrIndex","_ref5","_ref6","toReplace","replaced","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","resolveNestedExpressions","_ref13","_ref14","parsed","keyVal","_ref15","_ref16","isStr","parseFloat","resolved","start","getAssignable","progress","fullPath","slice","options","assignable","silent","silenceListeners","skipDefaults","getArrayIndex","ks","indexedKey","setArrayIndex","processArray","array","sortOptions","e","ui","processSection","section","processComponent","component","cols","processCurrency","currencyFormat","currency-dollars","currency-microcents","currency","processPercentage","processReusable","view","processMediaUpload","processCsvUpload","processRadios","processRadiobuttons","radios","fullWidth","btnClass","divide","processDate","maxView","iconClass","modelFormatter","multiply","hours","minutes","modelParser","d","parseInt","startOf","viewFormatter","dateFormat","viewParser","getSelectValProp","select","valueProperty","getAllowedSelectValue","getTitleMap","valProp","mapVal","processSelect","onInit","setter","newVal","q","titleQuery","minLookup","onAdd","displayFormat","itemFormatter","processTemplate","detailedList","selectionStyle","maxItems","valid","$setDirty","processToggle","toggle","processHelp","help","processDisplay","display","getDisplay","tpl","parseScope","processor","processTable","table","row","columns","extend","processSelectDisplay","selectDisplay","selectField","setupArraySelectDisplay","setupSelectDisplay","selectKey","splitKey","indexedSelectKey","selectValue","formCopies","elem","splitIndexedKey","selectModel","itemValue","count","keyMap","once","resetCount","refresh","debounce","diff","then","processUpdatedSchema","refreshData","reset","registers","reprocessSchema","cached","reprocessField","current","isChild","redraw","subKey","message","arrayIndexKey","exec","re","RegExp","asArray","keyCopy","clone","indexOfIndex","cleanup","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","iterator","done","err","TypeError","cn-radios","cn-radiobuttons","cn-autocomplete","cn-datetimepicker","cn-display","cn-currency","cn-percentage","cn-mediaupload","cn-csvupload","cn-reusable","cn-toggle","cn-table","tabarray","getPromises","promiseMap","promise","getPromise","$q","promises","defer","cnFlexFormModalLoaderServiceProvider","def","parent","modalMap","modal","modalId","cnFlexFormModalLoaderService","resolveMapping","destroyStrategy","getMapping","$state","activate","open","vm","_ref$options","onDismiss","onAfterDismiss","finally","goBack","catch","restParams","dismissEvent","dismissModal","transition","go","dismiss","$uibModal","process","cnFlexForm","restrict","template","formIndex","formName","delayForm","cleanupEvent","FlexForm","bindToController","cnFlexFormService","$scope","$location","search","showForm","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","len","Item","noop","nextTick","apply","title","browser","env","argv","version","versions","on","addListener","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","cnFlexFormHeader","submit","loadOffscreen","FlexFormHeader","actionConfig","returnState","returnStyle","returnText","closeButton","actions","updateData","isDisabled","btnConfig","ffValidate","attrs","ngModel","required","$viewValue","$setValidity"],"mappings":"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","file":"all.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cn-flex-form\", [\"lodash\", \"objectpath\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cn-flex-form\"] = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse\n\t\troot[\"cn-flex-form\"] = factory(root[\"lodash\"], root[\"objectpath\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cn-flex-form\", [\"lodash\", \"objectpath\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cn-flex-form\"] = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse\n\t\troot[\"cn-flex-form\"] = factory(root[\"lodash\"], root[\"objectpath\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _cnFlexFormConfig = __webpack_require__(1);\n\t\n\tvar _cnFlexFormConfig2 = _interopRequireDefault(_cnFlexFormConfig);\n\t\n\tvar _cnFlexFormTypes = __webpack_require__(2);\n\t\n\tvar _cnFlexFormTypes2 = _interopRequireDefault(_cnFlexFormTypes);\n\t\n\tvar _cnFlexForm = __webpack_require__(3);\n\t\n\tvar _schemaFormExtensions = __webpack_require__(4);\n\t\n\tvar _cnFlexForm2 = __webpack_require__(5);\n\t\n\tvar _cnFlexForm3 = _interopRequireDefault(_cnFlexForm2);\n\t\n\tvar _cnFlexFormModalLoader = __webpack_require__(8);\n\t\n\tvar _cnFlexFormModalLoader2 = _interopRequireDefault(_cnFlexFormModalLoader);\n\t\n\tvar _cnFlexFormModalLoader3 = __webpack_require__(9);\n\t\n\tvar _cnFlexForm4 = __webpack_require__(10);\n\t\n\tvar _cnFlexForm5 = _interopRequireDefault(_cnFlexForm4);\n\t\n\tvar _cnFlexFormHeader = __webpack_require__(12);\n\t\n\tvar _cnFlexFormHeader2 = _interopRequireDefault(_cnFlexFormHeader);\n\t\n\tvar _cnFlexFormValidate = __webpack_require__(13);\n\t\n\tvar _cnFlexFormValidate2 = _interopRequireDefault(_cnFlexFormValidate);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tconsole.log(_cnFlexForm3.default);\n\t\n\texports.default = angular.module('cn.flex-form', ['ui.router', 'schemaForm', 'ui.bootstrap.datetimepicker', 'cnTagsInput',\n\t//'ngJsonExplorer',\n\t'cn.util']).provider('cnFlexFormConfig', _cnFlexFormConfig2.default).provider('cnFlexFormTypes', _cnFlexFormTypes2.default).provider('cnFlexFormRoutes', _cnFlexForm.cnFlexFormRoutesProvider).config(_cnFlexForm.cnFlexFormRoutes).config(_schemaFormExtensions.schemaFormConfig).run(_schemaFormExtensions.addTemplates).provider('cnFlexFormService', _cnFlexForm3.default).provider('cnFlexFormModalLoaderService', _cnFlexFormModalLoader2.default).factory('FlexFormModal', _cnFlexFormModalLoader3.FlexFormModal).controller('FlexFormModalLoader', _cnFlexFormModalLoader3.FlexFormModalLoader).directive('cnFlexForm', _cnFlexForm5.default).directive('cnFlexFormHeader', _cnFlexFormHeader2.default).directive('ffValidate', _cnFlexFormValidate2.default).name;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexFormConfigProvider() {\n\t\n\t  cnFlexFormConfig.$inject = [\"$stateParams\"];\n\t  var ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\t\n\t  return {\n\t    addIgnoreParam: addIgnoreParam,\n\t    $get: cnFlexFormConfig\n\t  };\n\t\n\t  ////////\n\t\n\t  function addIgnoreParam(param) {\n\t    ignoreParams.push(param);\n\t  }\n\t\n\t  function cnFlexFormConfig($stateParams) {\n\t    'ngInject';\n\t\n\t    return {\n\t      getStateParams: getStateParams,\n\t      ignoreParams: ignoreParams\n\t    };\n\t\n\t    ////////\n\t\n\t    function getStateParams() {\n\t      return _.chain($stateParams).omit(ignoreParams).omit(function (v) {\n\t        return _.isUndefined(v) || _.isNull(v);\n\t      }).value();\n\t    }\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\t\n\texports.default = cnFlexFormConfigProvider;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexFormTypesProvider() {\n\t\n\t  var fieldTypeRegister = [{\n\t    condition: function condition(field) {\n\t      return field.type === 'hidden';\n\t    },\n\t    type: 'hidden'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('radios');\n\t    },\n\t    type: 'cn-radios'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('radiobuttons');\n\t    },\n\t    type: 'cn-radiobuttons'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery;\n\t    },\n\t    type: 'cn-autocomplete'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'cn-datetimepicker' || field.type === 'datetime-local' || field.type === 'time-minutes';\n\t    },\n\t    type: 'cn-datetimepicker'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'help';\n\t    },\n\t    type: 'help'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('display');\n\t    },\n\t    type: 'cn-display'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.schema && field.schema.format && field.schema.format.includes('currency');\n\t    },\n\t    type: 'cn-currency'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.schema && field.schema.format === 'percentage';\n\t    },\n\t    type: 'cn-percentage'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'toggle' || field.type === 'boolean';\n\t    },\n\t    type: 'cn-toggle'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'mediaupload';\n\t    },\n\t    type: 'cn-mediaupload'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'csvupload';\n\t    },\n\t    type: 'cn-csvupload'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'reusable';\n\t    },\n\t    type: 'cn-reusable'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'table';\n\t    },\n\t    type: 'cn-table'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'array';\n\t    },\n\t    type: 'array'\n\t  }];\n\t\n\t  return {\n\t    registerFieldType: registerFieldType,\n\t    $get: cnFlexFormTypes\n\t  };\n\t\n\t  ////////\n\t\n\t  function registerFieldType(fieldType) {\n\t    fieldTypeRegister.unshift(fieldType);\n\t  }\n\t\n\t  function cnFlexFormTypes() {\n\t    return {\n\t      fieldTypeRegister: fieldTypeRegister,\n\t      getFieldType: getFieldType\n\t    };\n\t\n\t    /////////\n\t\n\t    function getFieldType(field) {\n\t      for (var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n\t        if (fieldTypeRegister[i].condition(field)) {\n\t          return fieldTypeRegister[i].type;\n\t        }\n\t      }\n\t      return field.type || field.schema && field.schema.type;\n\t    }\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\t\n\texports.default = cnFlexFormTypesProvider;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tcnFlexFormRoutesProvider.$inject = [\"$stateProvider\"];\n\tcnFlexFormRoutes.$inject = [\"$stateProvider\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction cnFlexFormRoutesProvider($stateProvider) {\n\t  'ngInject';\n\t\n\t  return {\n\t    addStates: addStates,\n\t    $get: $get\n\t  };\n\t\n\t  ////////////\n\t\n\t  function $get() {\n\t    // nothing to do here, but required\n\t  }\n\t\n\t  function addStates(_ref) {\n\t    var permissions = _ref.permissions,\n\t        name = _ref.name;\n\t\n\t    var shared = {\n\t      controller: 'FlexFormModalLoader',\n\t      controllerAs: 'vm',\n\t      permissions: permissions\n\t    };\n\t    $stateProvider.state(name + '.page.modal', _extends({\n\t      url: '/~:modal/:modalId'\n\t    }, shared)).state(name + '.page.modalParams', _extends({\n\t      url: '/~:modal/:modalId/:restParams'\n\t    }, shared));\n\t  }\n\t}\n\t\n\tfunction cnFlexFormRoutes($stateProvider) {\n\t  'ngInject';\n\t\n\t  $stateProvider.state('flex-form-sandbox', {\n\t    url: '/flex-form/sandbox',\n\t    controller: 'FlexFormSandbox',\n\t    controllerAs: 'vm',\n\t    templateUrl: 'app/components/cn-flex-form/sandbox.html'\n\t  });\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormRoutes', cnFlexFormRoutesProvider)\n\t//.config(cnFlexFormRoutes);\n\t\n\texports.cnFlexFormRoutes = cnFlexFormRoutes;\n\texports.cnFlexFormRoutesProvider = cnFlexFormRoutesProvider;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tschemaFormConfig.$inject = [\"cnFlexFormServiceProvider\"];\n\taddTemplates.$inject = [\"$templateCache\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t//angular.module('cn.flex-form')\n\t//.config(schemaFormConfig)\n\t//.run(addTemplates);\n\t\n\tfunction schemaFormConfig(cnFlexFormServiceProvider) {\n\t  'ngInject';\n\t\n\t  tv4.addFormat({\n\t    'url': function url(data) {\n\t      return _.isString(data) && !/^(https?:\\/\\/.{2}|$)/.test(data) && 'invalid url';\n\t    }\n\t  });\n\t\n\t  var extensions = ['cn-fieldset', 'cn-toggle', 'cn-datetimepicker', 'cn-autocomplete', 'cn-autocomplete-detailed', 'cn-currency', 'cn-radios', 'cn-radiobuttons', 'cn-percentage', 'cn-display', 'cn-mediaupload', 'cn-csvupload', 'cn-reusable', 'cn-table'];\n\t\n\t  _.each(extensions, function (extension) {\n\t    cnFlexFormServiceProvider.registerField({\n\t      type: extension,\n\t      templateUrl: 'app/components/cn-flex-form/forms/' + extension + '.html'\n\t    });\n\t  });\n\t}\n\t\n\tfunction addTemplates($templateCache) {\n\t  'ngInject';\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-toggle.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n        <div class=\"clearfix\">\\n          <cn-toggle-switch\\n            class=\"pull-left\"\\n            ng-show=\"form.key\"\\n            ng-model-options=\"form.ngModelOptions\"\\n            ng-model=\"$$value$$\"\\n            sf-changed=\"form\"\\n            schema-validate=\"form\"\\n            on-value=\"form.onValue\"\\n            off-value=\"form.offValue\"\\n            read-only=\"form.readonly\"\\n            undefined-class=\"form.undefinedClass\"/>\\n          <span ng-show=\"form.onText && form.offText\">\\n            {{$$value$$ === form.onValue ? form.onText : form.offText}}\\n          </span>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-datetimepicker.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               for=\"{{form.key.join(\\'.\\')}}\"\\n               ng-show=\"showTitle()\">{{form.title}}</label>\\n        <cn-datetimepicker\\n          ng-show=\"form.key\"\\n          ng-model=\"$$value$$\"\\n          ng-model-options=\"form.ngModelOptions\"\\n          is-disabled=\"form.readonly\"\\n          sf-changed=\"form\"\\n          schema-validate=\"form\"\\n          input-id=\"{{form.key.join(\\'.\\')}}\"\\n          min-date=\"form.minDate\"\\n          max-date=\"form.maxDate\"\\n          max-view=\"{{form.maxView}}\"\\n          cn-date-required=\"form.required\"\\n          placeholder=\"{{form.placeholder}}\"\\n          model-type=\"{{form.schema.type}}\"\\n          model-formatter=\"form.modelFormatter\"\\n          model-parser=\"form.modelParser\"\\n          view-formatter=\"form.viewFormatter\"\\n          view-parser=\"form.viewParser\"\\n          format-string={{form.dateFormat}}\\n          icon-class={{form.iconClass}}>\\n        </cn-datetimepicker>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  var sharedAutocompleteTpl = '\\n        <tags-input\\n          ng-show=\"form.key\"\\n          ng-model=\"$$value$$\"\\n          ng-model-options=\"form.ngModelOptions\"\\n          ng-disabled=\"form.readonly\"\\n          sf-changed=\"form\"\\n          schema-validate=\"form\"\\n          input-id=\"{{form.key.join(\\'.\\')}}\"\\n          display-property=\"{{form.displayProperty || \\'name\\'}}\"\\n          value-property=\"{{form.valueProperty}}\"\\n          placeholder=\"{{form.placeholder || \\' \\'}}\"\\n          clear-on-blur=\"true\"\\n          add-on-comma=\"false\"\\n          add-from-autocomplete-only=\"{{!form.allowNew}}\"\\n          on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\\n          on-init=\"form.onInit($tag, form, $event, $setter)\"\\n          model-type=\"{{form.getSchemaType()}}\"\\n          array-value-type=\"{{form.schema.items.type}}\"\\n          hide-tags=\"{{form.detailedList}}\"\\n          tags-style=\"{{form.selectionStyle}}\"\\n          required=\"{{form.required}}\"\\n          min-length=\"{{form.minLength}}\"\\n          allowed-tags-pattern=\".*\"\\n          dropdown-icon=\"true\"\\n          item-formatter=\"form.itemFormatter\"\\n          min-tags=\"{{form.schema.minItems}}\"\\n          max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== \\'array\\' ? 1 : 0}}\"\\n          allow-bulk=\"{{form.bulkAdd}}\"\\n          bulk-delimiter=\"{{form.bulkDelimiter}}\"\\n          bulk-placeholder=\"{{form.bulkPlaceholder}}\"\\n          show-clear-all=\"{{form.showClearAll}}\"\\n          show-button=\"true\">\\n          <auto-complete\\n            source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\\n            skip-filtering=\"{{form.titleQuery ? true : false}}\"\\n            min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\\n          </auto-complete>\\n        </tags-input>';\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               for=\"{{form.key.join(\\'.\\')}}-input\"\\n               ng-show=\"showTitle()\">{{form.title}}</label>\\n        ' + sharedAutocompleteTpl + '\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete-detailed.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               for=\"{{form.key.join(\\'.\\')}}-input\"\\n               ng-show=\"showTitle()\">{{form.title}}</label>\\n        <ol sf-array=\"form\"\\n            class=\"list-group cn-autocomplete-list\"\\n            ng-show=\"modelArray.length\"\\n            ng-model=\"modelArray\">\\n          <li class=\"list-group-item {{form.fieldHtmlClass}}\"\\n              ng-repeat=\"item in modelArray\">\\n            <button ng-hide=\"form.readonly || form.remove === null\"\\n                    ng-click=\"deleteFromArray($index)\"\\n                    type=\"button\" class=\"close pull-right\">\\n              <span aria-hidden=\"true\">&times;</span>\\n            </button>\\n            <sf-decorator form=\"copyWithIndex($index)\"/>\\n          </li>\\n        </ol>\\n        ' + sharedAutocompleteTpl + '\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-currency.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\n        <div class=\"{{form.fieldClass}} input-group\">\\n          <label class=\"input-group-addon\"\\n                 ng-disabled=\"form.readonly\"\\n                 for=\"{{form.key.join(\\'.\\')}}\">$</label>\\n          <input class=\"form-control\"\\n                 cn-currency-format=\"{{form.currencyFormat}}\"\\n                 cn-currency-placeholder=\"{{form.placeholder}}\"\\n                 ng-show=\"form.key\"\\n                 ng-model-options=\"form.ngModelOptions\"\\n                 ng-disabled=\"form.readonly\"\\n                 sf-changed=\"form\"\\n                 schema-validate=\"form\"\\n                 type=\"text\"\\n                 step=\"any\"\\n                 min=\"{{form.min}}\"\\n                 max=\"{{form.max}}\"\\n                 id=\"{{form.key.join(\\'.\\')}}\"\\n                 name=\"{{form.key.join(\\'.\\')}}\"\\n                 ng-model=\"$$value$$\">\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-radios.html', '<div class=\"form-group {{form.htmlClass}}\"\\n            ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n         <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n         <div class=\"btn-group clearfix\">\\n           <label class=\"radio radio-block\"\\n                  ng-repeat=\"item in form.titleMap\">\\n             <input type=\"radio\"\\n                    sf-changed=\"form\"\\n                    ng-disabled=\"form.readonly\"\\n                    ng-model=\"$$value$$\"\\n                    ng-model-options=\"form.ngModelOptions\"\\n                    schema-validate=\"form\"\\n                    ff-validate=\"form\"\\n                    ng-value=\"item.value\"\\n                    name=\"{{form.key.join(\\'.\\')}}\">\\n             <span class=\"radio-block-icon\" ng-if=\"item.iconClass\">\\n               <i class=\"fa fa-{{item.iconClass}} fa-lg\"></i>\\n             </span>\\n             <span ng-bind-html=\"item.name\"></span>\\n           </label>\\n         </div>\\n         <span class=\"help-block\" sf-message=\"form.description\"></span>\\n       </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-radiobuttons.html', '\\n      <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n        <div class=\"btn-group clearfix\">\\n          <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? \\'active\\' : \\'\\'}}\"\\n                 ng-repeat=\"item in form.titleMap\">\\n            <input type=\"radio\"\\n                   class=\"{{form.fieldHtmlClass}} hide\"\\n                   sf-changed=\"form\"\\n                   ng-disabled=\"form.readonly\"\\n                   ng-model=\"$$value$$\"\\n                   ng-model-options=\"form.ngModelOptions\"\\n                   schema-validate=\"form\"\\n                   ff-validate=\"form\"\\n                   ng-value=\"item.value\"\\n                   name=\"{{form.key.join(\\'.\\')}}\">\\n            <i class=\"fa fa-{{item.value}} fa-lg\"></i>\\n            <span ng-bind-html=\"item.name\"></span>\\n          </label>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-percentage.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n        <div class=\"{{form.fieldClass}} input-group\">\\n          <input class=\"form-control\"\\n                 cn-percentage-format\\n                 ng-show=\"form.key\"\\n                 ng-model-options=\"form.ngModelOptions\"\\n                 ng-disabled=\"form.readonly\"\\n                 sf-changed=\"form\"\\n                 schema-validate=\"form\"\\n                 type=\"number\"\\n                 step=\"any\"\\n                 min=\"{{form.min}}\"\\n                 max=\"{{form.max}}\"\\n                 id=\"{{form.key && form.key[0]}}\"\\n                 name=\"{{form.key && form.key[0]}}\"\\n                 ng-model=\"$$value$$\">\\n           <div class=\"input-group-addon\"\\n                  ng-disabled=\"form.readonly\"\\n                  for=\"{{form.key && form.key[0]}}\">%</div>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-display.html', '\\n      <div class=\"form-group cn-display{{form.htmlClass}}\">\\n        <input ng-show=\"form.key\"\\n               class=\"form-control\"\\n               id=\"{{form.key.join(\\'.\\')}}\"\\n               name=\"{{form.key.join(\\'.\\')}}\"\\n               ng-disabled=\"true\"\\n               value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-fieldset.html', '\\n      <fieldset \\n        ng-disabled=\"form.readonly\"\\n        class=\"schema-form-fieldset {{form.htmlClass}}\"\\n        ng-class=\"{\\'borderless\\': form.pos === 0}\">\\n        <legend ng-click=\"form.toggleCollapse(form)\"\\n                ng-class=\"{\\'sr-only\\': !showTitle(), collapsible: form.collapsible}\"\\n                ng-mouseenter=\"form.render = true\">\\n          <i ng-show=\"form.collapsible\"\\n             class=\"fa fa-caret-{{form.collapsed ? \\'right\\' : \\'down\\'}}\"></i>\\n          {{ form.title }}\\n        </legend>\\n        <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\\n        <div uib-collapse=\"form.collapsed\">\\n          <div ng-if=\"form.render\">\\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\n          </div>\\n        </div>\\n      </fieldset>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-mediaupload.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n        <media-upload ng-model=\"$$value$$\"\\n                      cn-file-type=\"form.fileType\"\\n                      cn-upload-path=\"form.uploadPath\"\\n                      cn-data=\"form.data\"\\n                      cn-preview-path=\"form.previewPath\"\\n                      cn-model-value-key=\"form.modelValueKey\"\\n                      ng-model-options=\"form.ngModelOptions\"\\n                      sf-changed=\"form\"\\n                      schema-validate=\"form\"\\n                      ff-form=\"form\"\\n                      class=\"clearfix\">\\n        </media-upload>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n     </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-csvupload.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n        <csv-upload ng-model=\"$$value$$\"\\n                      cn-upload-path=\"form.uploadPath\"\\n                      ng-model-options=\"form.ngModelOptions\"\\n                      sf-changed=\"form\"\\n                      schema-validate=\"form\"\\n                      ff-form=\"form\"\\n                      class=\"clearfix\">\\n        </csv-upload>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n     </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-reusable.html', '\\n      <div class=\"form-group cn-reusable {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\n        <cn-select-or\\n          ng-show=\"form.key\"\\n          select-from=\"form.library\"\\n          ng-model=\"$$value$$\"\\n          ng-model-options=\"form.ngModelOptions\"\\n          sf-changed=\"form\"\\n          schema-validate=\"form\"\\n          ff-form=\"form\"\\n          directiveId=\"form.directiveId\"\\n          item-template=\"form.itemTemplate\"\\n          toggle-text=\"form.toggleText\"\\n          disabled=\"form.readonly\"\\n          view=\"form.view\">\\n          <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\n        </cn-select-or>\\n        <p ng-if=\"form.loadMore && form.view === \\'list\\'\">\\n          <a ng-click=\"form.loadMore()\"\\n             class=\"btn btn-default btn-block\">Load More</a>\\n        </p>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-table.html', '\\n      <div class=\"form-group cn-ff-table {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <h6>{{form.title}}</h6>\\n        <div class=\"row\">\\n          <div ng-repeat=\"col in form.columns\" class=\"{{col.columnWidth}}\">\\n            <p class=\"column-header\">{{col.columnHeader}}</p>\\n          </div>\\n        </div>\\n        <div class=\"row\" ng-repeat=\"row in form.items\">\\n          <div ng-repeat=\"col in row.items\" class=\"{{col.columnWidth}}\">\\n            <sf-decorator form=\"col\"></sf-decorator>\\n          </div>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t}\n\t\n\texports.schemaFormConfig = schemaFormConfig;\n\texports.addTemplates = addTemplates;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tcnFlexFormServiceProvider.$inject = [\"schemaFormDecoratorsProvider\", \"cnFlexFormTypesProvider\"];\n\tCNFlexFormService.$inject = [\"Api\", \"$parse\", \"cnFlexFormConfig\", \"cnFlexFormTypes\", \"sfPath\", \"$interpolate\", \"$rootScope\", \"$timeout\", \"cnUtil\", \"$stateParams\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\t// Need these modules for test bundle\n\tvar _ = typeof window !== 'undefined' && window._ || __webpack_require__(6);\n\tvar ObjectPath = typeof window !== 'undefined' && window.ObjectPath || __webpack_require__(7);\n\t\n\tvar fieldTypeHandlers = {\n\t  'fieldset': 'processFieldset',\n\t  'cn-radios': 'processRadios',\n\t  'cn-radiobuttons': 'processRadiobuttons',\n\t  'cn-autocomplete': 'processSelect',\n\t  'cn-datetimepicker': 'processDate',\n\t  'help': 'processHelp',\n\t  'cn-display': 'processDisplay',\n\t  'cn-currency': 'processCurrency',\n\t  'cn-percentage': 'processPercentage',\n\t  'cn-mediaupload': 'processMediaUpload',\n\t  'cn-csvupload': 'processCsvUpload',\n\t  'cn-reusable': 'processReusable',\n\t  'cn-toggle': 'processToggle',\n\t  'cn-table': 'processTable',\n\t  'component': 'processComponent',\n\t  'section': 'processSection',\n\t  'tabarray': 'processSection',\n\t  'array': 'processArray'\n\t};\n\t\n\tvar fieldPropHandlers = [{\n\t  prop: 'resolve',\n\t  handler: function handler(field, service) {\n\t    return service.processResolve(field);\n\t  }\n\t}, {\n\t  prop: 'selectDisplay',\n\t  handler: function handler(field, service) {\n\t    return service.processSelectDisplay(field);\n\t  }\n\t}, {\n\t  prop: 'watch',\n\t  handler: function handler(field, service) {\n\t    return field.watch && service.processFieldWatch(field);\n\t  }\n\t}, {\n\t  prop: 'type',\n\t  handler: function handler(field, service, secondPass) {\n\t    return service.processFieldType(field, secondPass);\n\t  }\n\t}, {\n\t  prop: 'conditionals',\n\t  handler: function handler(field, service) {\n\t    return service.processConditional(field);\n\t  }\n\t}, {\n\t  prop: 'default',\n\t  handler: function handler(field, service) {\n\t    return service.processDefault(field);\n\t  }\n\t}, {\n\t  prop: 'schema',\n\t  handler: function handler(field, service) {\n\t    return _.isUndefined(field.default) && !_.isUndefined(field.schema.default) && service.processDefault(field);\n\t  }\n\t}, {\n\t  prop: 'updateSchema',\n\t  handler: function handler(field, service) {\n\t    return service.registerHandler(field, null, field.updateSchema);\n\t  }\n\t}];\n\t\n\tfunction cnFlexFormServiceProvider(schemaFormDecoratorsProvider, cnFlexFormTypesProvider) {\n\t  'ngInject';\n\t\n\t  return {\n\t    registerField: registerField,\n\t    $get: CNFlexFormService\n\t  };\n\t\n\t  //////////\n\t\n\t  function registerField(fieldType) {\n\t    if (fieldType.condition) {\n\t      cnFlexFormTypesProvider.registerFieldType({\n\t        condition: fieldType.condition,\n\t        type: fieldType.type\n\t      });\n\t    }\n\t\n\t    if (fieldType.handler) {\n\t      fieldTypeHandlers[fieldType.type] = fieldType.handler;\n\t    }\n\t\n\t    if (fieldType.templateUrl) {\n\t      schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', fieldType.type, fieldType.templateUrl);\n\t      schemaFormDecoratorsProvider.createDirective(fieldType.type, fieldType.templateUrl);\n\t    }\n\t  }\n\t}\n\t\n\tfunction CNFlexFormService(Api, $parse, cnFlexFormConfig, cnFlexFormTypes, sfPath, $interpolate, $rootScope, $timeout, cnUtil, $stateParams) {\n\t  'ngInject';\n\t\n\t  var services = [];\n\t  var prototype = {\n\t    compile: compile,\n\t    addArrayCopy: addArrayCopy,\n\t    addToDataCache: addToDataCache,\n\t    addToFormCache: addToFormCache,\n\t    addToScopeCache: addToScopeCache,\n\t    broadcastErrors: broadcastErrors,\n\t    buildError: buildError,\n\t    cleanup: cleanup,\n\t    deregisterHandlers: deregisterHandlers,\n\t    deregisterArrayHandlers: deregisterArrayHandlers,\n\t    getArrayCopy: getArrayCopy,\n\t    getArrayCopies: getArrayCopies,\n\t    getArrayCopiesFor: getArrayCopiesFor,\n\t    getArrayScopes: getArrayScopes,\n\t    getDefault: getDefault,\n\t    getFromDataCache: getFromDataCache,\n\t    getFromFormCache: getFromFormCache,\n\t    getFromScopeCache: getFromScopeCache,\n\t    getKey: getKey,\n\t    getSchema: getSchema,\n\t    getWatchables: getWatchables,\n\t    handleResolve: handleResolve,\n\t    initArrayCopyWatch: initArrayCopyWatch,\n\t    initModelWatch: initModelWatch,\n\t    initSchemaParams: initSchemaParams,\n\t    isCompiled: isCompiled,\n\t    onModelWatch: onModelWatch,\n\t    parseCondition: parseCondition,\n\t    parseExpression: parseExpression,\n\t    processArray: processArray,\n\t    processDefault: processDefault,\n\t    processDisplay: processDisplay,\n\t    processField: processField,\n\t    processFieldset: processFieldset,\n\t    processFieldProps: processFieldProps,\n\t    processFieldType: processFieldType,\n\t    processFieldWatch: processFieldWatch,\n\t    processComponent: processComponent,\n\t    processConditional: processConditional,\n\t    processCurrency: processCurrency,\n\t    processPercentage: processPercentage,\n\t    processDate: processDate,\n\t    processHelp: processHelp,\n\t    processRadios: processRadios,\n\t    processRadiobuttons: processRadiobuttons,\n\t    processReusable: processReusable,\n\t    processSchema: processSchema,\n\t    processSelectDisplay: processSelectDisplay,\n\t    processResolve: processResolve,\n\t    processSection: processSection,\n\t    processSelect: processSelect,\n\t    processTable: processTable,\n\t    processTemplate: processTemplate,\n\t    processToggle: processToggle,\n\t    processUpdatedSchema: processUpdatedSchema,\n\t    processMediaUpload: processMediaUpload,\n\t    processCsvUpload: processCsvUpload,\n\t    registerArrayHandlers: registerArrayHandlers,\n\t    registerHandler: registerHandler,\n\t    registerResolve: registerResolve,\n\t    replaceArrayIndex: replaceArrayIndex,\n\t    reprocessField: reprocessField,\n\t    resolveNestedExpressions: resolveNestedExpressions,\n\t    setArrayIndex: setArrayIndex,\n\t    setupConfig: setupConfig,\n\t    setupArraySelectDisplay: setupArraySelectDisplay,\n\t    setupSelectDisplay: setupSelectDisplay,\n\t    setupSchemaRefresh: setupSchemaRefresh,\n\t    silenceListeners: silenceListeners,\n\t    skipDefaults: skipDefaults\n\t  };\n\t\n\t  function getService(fn) {\n\t    return _.find(services, fn);\n\t  }\n\t\n\t  function CNFlexFormConstructor() {\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    if (args.length > 1) {\n\t      var schema = args[0],\n\t          model = args[1],\n\t          config = args[2];\n\t    } else {\n\t      var _args$ = args[0],\n\t          schema = _args$.schema,\n\t          model = _args$.model,\n\t          config = _args$.config;\n\t    }\n\t\n\t    var curService = getService(function (service) {\n\t      return service.model === model;\n\t    });\n\t    if (curService) {\n\t      if (schema) {\n\t        curService.compile(schema, model, config);\n\t      }\n\t      return curService;\n\t    }\n\t\n\t    var newService = new CNFlexForm(schema, model, config);\n\t    services.push(newService);\n\t    return newService;\n\t  }\n\t\n\t  function CNFlexForm(schema, model, config) {\n\t\n\t    if ($stateParams.debug) {\n\t      window.services = services;\n\t    }\n\t\n\t    this.arrayCopies = {};\n\t    this.arrayListeners = {};\n\t    this.dataCache = {};\n\t    this.defaults = {};\n\t    this.errors = [];\n\t    this.events = [];\n\t    this.formCache = {};\n\t    this.scopeCache = {};\n\t    this.listeners = {};\n\t    this.resolveRegister = {};\n\t    this.model = model;\n\t    this.updates = 0;\n\t    this.skipDefault = {};\n\t\n\t    this.params = cnFlexFormConfig.getStateParams();\n\t\n\t    this._ = _;\n\t\n\t    this.compile(schema, model, config);\n\t  }\n\t\n\t  _.extend(CNFlexForm.prototype, prototype);\n\t  _.extend(CNFlexFormConstructor, prototype, { getService: getService });\n\t\n\t  return CNFlexFormConstructor;\n\t\n\t  //////////////\n\t\n\t  function compile(schema, model, config) {\n\t    var service = this;\n\t\n\t    service.schema = schema;\n\t    service.model = model;\n\t\n\t    if (!service.isCompiled()) {\n\t      service.setupConfig(config);\n\t\n\t      if (schema.forms) {\n\t        _.each(schema.forms, function (form) {\n\t          _.each(form.form, service.processField.bind(service));\n\t        });\n\t      } else {\n\t        _.each(schema.form, service.processField.bind(service));\n\t      }\n\t\n\t      service.initModelWatch();\n\t      service.initArrayCopyWatch();\n\t      service.isCompiled(true);\n\t    }\n\t\n\t    service.broadcastErrors();\n\t  }\n\t\n\t  function isCompiled(setValue) {\n\t    var service = this;\n\t    if (setValue) {\n\t      service.schema.compiled = setValue;\n\t    }\n\t    return service.schema && service.schema.compiled;\n\t  }\n\t\n\t  function setupConfig(config) {\n\t    var service = this;\n\t    if (config) {\n\t      if (config.formCtrl) service.formCtrl = config.formCtrl;\n\t      if (config.updateSchema) service.updateSchema = config.updateSchema;\n\t      if (config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n\t    }\n\t  }\n\t\n\t  function processSchema(field) {\n\t    var service = this;\n\t    var schema = field.schema;\n\t\n\t\n\t    field.getSchemaType = function () {\n\t      return _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n\t    };\n\t    if (!field.type) field.type = field.getSchemaType && field.getSchemaType();\n\t  }\n\t\n\t  function processDefault(field) {\n\t    var service = this;\n\t    var schema = field.schema;\n\t\n\t    var curDefault = field.default || schema.default;\n\t    var key = service.getKey(field.key);\n\t\n\t    if (service.skipDefault[key]) {\n\t      delete service.skipDefault[key];\n\t      return;\n\t    }\n\t    // if default is returned for new form, treat it as a previous param in order to not trigger unnecessary updateSchema\n\t    if (!service.updates && field.updateSchema && angular.isDefined(curDefault) && !service.schema.params[key]) {\n\t      service.schema.params[key] = curDefault;\n\t    }\n\t\n\t    // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n\t    //if(service.updates || field.default) {\n\t    if (!_.isUndefined(curDefault)) {\n\t      if (key.includes && key.includes('[]')) return;\n\t      var model = service.parseExpression(field.key, service.model);\n\t      var modelValue = model.get();\n\t      // if there's an existing default and it's the same as the current value\n\t      // update the current value to the new default\n\t      if ((_.isTrulyEmpty(modelValue) || _.has(service.defaults, key) && angular.equals(modelValue, service.defaults[key])) && !angular.equals(modelValue, curDefault)) {\n\t        model.set(curDefault);\n\t      }\n\t    }\n\t    service.defaults[key] = angular.copy(curDefault);\n\t\n\t    if (schema.format === 'url' && !field.validationMessage) {\n\t      if (!field.type) field.type = 'url';\n\t      field.validationMessage = 'Must be a valid url (https://...)';\n\t    }\n\t  }\n\t\n\t  function processFieldset(fieldset) {\n\t    var service = this;\n\t\n\t    fieldset.type = 'cn-fieldset';\n\t    fieldset.items.forEach(service.processField.bind(service));\n\t\n\t    if (_.has(fieldset, 'pos') && fieldset.pos === 0) {\n\t      fieldset.htmlClass = (fieldset.htmlClass || '') + ' borderless';\n\t    }\n\t    if (fieldset.collapsible) {\n\t      fieldset.toggleCollapse = function (fieldset) {\n\t        if (fieldset.collapsible) {\n\t          fieldset.collapsed = !fieldset.collapsed;\n\t        }\n\t      };\n\t\n\t      fieldset.render = !fieldset.collapsed;\n\t    } else {\n\t      fieldset.render = true;\n\t    }\n\t  }\n\t\n\t  function processFieldType(field, secondPass) {\n\t    var service = this;\n\t    var fieldType = cnFlexFormTypes.getFieldType(field);\n\t    var handler = fieldTypeHandlers[fieldType];\n\t    if (_.isString(handler)) {\n\t      service[handler](field, secondPass);\n\t    } else if (_.isFunction(handler)) {\n\t      handler.call(service, field, secondPass);\n\t    }\n\t  }\n\t\n\t  function processField(field, pos) {\n\t    var service = this;\n\t\n\t    if (angular.isDefined(pos)) {\n\t      field.pos = pos;\n\t    }\n\t\n\t    if (!field._ogKeys) {\n\t      field._ogKeys = _.without(_.keys(field), 'key', 'htmlClass');\n\t    }\n\t\n\t    var key = service.getKey(field.key);\n\t\n\t    if (key) {\n\t      service.addToFormCache(field, key);\n\t      var schema = service.getSchema(key);\n\t\n\t      if (schema) {\n\t        field.schema = schema;\n\t        if (schema.description) field.description = schema.description;\n\t        if (field.readonly && !schema.readonly) field.readonly = false;\n\t        if (schema.type === 'array' && !('showClearAll' in field)) field.showClearAll = true;\n\t      }\n\t\n\t      service.processSchema(field);\n\t    }\n\t\n\t    service.processFieldProps(field);\n\t\n\t    if (key) {\n\t      if (_.find(service.errors, { key: key })) {\n\t        service.errors = _.reject(service.errors, { key: key });\n\t        $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n\t        $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n\t      }\n\t\n\t      if (field.error) {\n\t        service.errors.push(service.buildError(field));\n\t        if (_.isEmpty(field.ngModelOptions)) {\n\t          field.ngModelOptions = {\n\t            allowInvalid: true\n\t          };\n\t        } else {\n\t          field.ngModelOptions.allowInvalid = true;\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function processFieldProps(field, secondPass) {\n\t    var service = this;\n\t    fieldPropHandlers.forEach(function (_ref) {\n\t      var prop = _ref.prop,\n\t          handler = _ref.handler;\n\t      return _.has(field, prop) && handler(field, service, secondPass);\n\t    });\n\t  }\n\t\n\t  function getKey(key) {\n\t    if (_.isArray(key)) {\n\t      key = _.reduce(key, function (total, next) {\n\t        return (/^(-?\\d*)$/.test(next) ? total + '[' + next + ']' : total + '.' + next\n\t        );\n\t      });\n\t    }\n\t    return key;\n\t  }\n\t\n\t  function getSchema(key, depth) {\n\t    var service = this;\n\t    if (!key) return;\n\t\n\t    key = ObjectPath.parse(service.getKey(key));\n\t    depth = depth || service.schema.schema.properties;\n\t\n\t    var first = void 0,\n\t        next = void 0;\n\t\n\t    while (key.length > 1) {\n\t      first = key[0];\n\t      next = key[1];\n\t      if (/^-?\\d*$/.test(next)) {\n\t        if (key.length === 2) {\n\t          depth = depth = depth[key.shift()];\n\t        } else {\n\t          depth = depth[key.shift()].items.properties;\n\t          key.shift();\n\t        }\n\t      } else {\n\t        depth = depth[key.shift()].properties;\n\t      }\n\t    }\n\t\n\t    // if array item\n\t    first = key[0] || 'items';\n\t\n\t    return depth[first];\n\t  }\n\t\n\t  function getDefault(field) {\n\t    var service = this;\n\t    field = field.key ? field : service.getFromFormCache(field);\n\t    return field && (angular.isDefined(field.default) ? field.default : field.schema && field.schema.default);\n\t  }\n\t\n\t  function getWatchables(exp) {\n\t    var watchables = [];\n\t    var nested = matchNestedExpression(exp);\n\t    var replaceStr = '';\n\t\n\t    while (nested) {\n\t      if (/^-?\\d+$/.test(nested[1]) || /^(\"|').*(\"|')$/.test(nested[1])) {\n\t        replaceStr = nested[0];\n\t        exp = exp.replace(nested[0], 'ff_replace_ff');\n\t      } else {\n\t        watchables.push(nested[1].replace(/ff_replace_ff/g, replaceStr));\n\t        replaceStr = '';\n\t        exp = exp.replace(nested[0], '');\n\t      }\n\t      nested = matchNestedExpression(exp);\n\t    }\n\t\n\t    return [].concat(watchables, [exp.replace(/ff_replace_ff/g, replaceStr)]);\n\t  }\n\t\n\t  function processResolve(field) {\n\t    var service = this;\n\t    var key = service.getKey(field.key);\n\t\n\t    _.each(field.resolve, function (dataProp, fieldProp) {\n\t      dataProp = replaceArrayIndex(dataProp, key || field.arrayIndex);\n\t      if (dataProp.includes('[arrayIndex]')) return;\n\t\n\t      service.handleResolve(field, fieldProp, dataProp, true);\n\t\n\t      getWatchables(dataProp).forEach(function (watchable) {\n\t        var _ref2 = watchable.match(/(schema\\.data\\.|model\\.)(\\S+)/) || [],\n\t            _ref3 = _slicedToArray(_ref2, 3),\n\t            base = _ref3[1],\n\t            exp = _ref3[2];\n\t\n\t        if (base) {\n\t          if (base === 'schema.data.') {\n\t            service.registerResolve(field, fieldProp, exp, dataProp);\n\t          } else if (base === 'model.') {\n\t            service.registerHandler(exp, function () {\n\t              service.handleResolve(field, fieldProp, dataProp);\n\t            });\n\t          }\n\t        }\n\t      });\n\t    });\n\t\n\t    return field;\n\t  }\n\t\n\t  function handleResolve(field, fieldProp, exp, skipPropHandlers) {\n\t    var service = this;\n\t    var data = void 0;\n\t    // does declarative/functional outweigh performance?\n\t    if (exp.includes(' || ')) {\n\t      var eithers = exp.split(' || ');\n\t      for (var i = 0, l = eithers.length; i < l; i++) {\n\t        var x = service.parseExpression(eithers[i]).get();\n\t        if (angular.isDefined(x)) {\n\t          data = x;\n\t          break;\n\t        }\n\t      }\n\t    } else if (exp.includes(' && ')) {\n\t      var all = exp.split(' && ');\n\t      for (var _i = 0, _l = all.length; _i < _l; _i++) {\n\t        var _x = service.parseExpression(all[_i]).get();\n\t        if (angular.isDefined(_x)) data = _x;else {\n\t          data = undefined;\n\t          break;\n\t        }\n\t      }\n\t    } else {\n\t      data = service.parseExpression(exp).get();\n\t    }\n\t\n\t    // if we're resolving from model but defaults haven't been applied yet, resolve from default itself\n\t    if (!data && exp.indexOf('model.') === 0) {\n\t      var key = exp.replace('model.', '');\n\t      var genericKey = stripIndexes(key);\n\t      var cachedField = service.getFromFormCache(key) || service.getFromFormCache(genericKey);\n\t\n\t      data = function () {\n\t        if (cachedField && cachedField.default) return cachedField.default;\n\t        if (angular.isDefined(field.default)) return field.default;\n\t        var schema = service.getSchema(genericKey);\n\t        if (schema) return schema.default;\n\t      }();\n\t    }\n\t\n\t    if (data && data.cursor) {\n\t      field.loadMore = function () {\n\t        var dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n\t        service.refreshSchema('data:' + dataProp + ':' + data.cursor);\n\t      };\n\t    } else {\n\t      delete field.loadMore;\n\t    }\n\t\n\t    field[fieldProp] = data && data.data ? data.data : data;\n\t\n\t    if (!skipPropHandlers) {\n\t      fieldPropHandlers.forEach(function (_ref4) {\n\t        var prop = _ref4.prop,\n\t            handler = _ref4.handler;\n\t        return prop === fieldProp && handler(field, service);\n\t      });\n\t    }\n\t  }\n\t\n\t  function registerResolve(field, fieldProp, dataProp, exp) {\n\t    var service = this;\n\t\n\t    var fieldKey = service.getKey(field.key);\n\t    service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\t\n\t    var register = service.resolveRegister[dataProp];\n\t    register[fieldKey] = register[fieldKey] || [];\n\t    register[fieldKey].push({ field: field, prop: fieldProp, exp: exp });\n\t  }\n\t\n\t  function processConditional(field) {\n\t    var service = this;\n\t\n\t    _.each(field.conditionals, function (condition, key) {\n\t      var handler = function handler(val, prev) {\n\t        field[key] = service.parseCondition(condition);\n\t        var scope = service.getFromScopeCache(service.getKey(field.key));\n\t        if (key === 'required' && scope) {\n\t          $rootScope.$broadcast('schemaFormValidate');\n\t        }\n\t      };\n\t      field.conditionals[key].match(/model\\.([^\\s]+)/g).map(function (path) {\n\t        return path.match(/model\\.([^\\s]+)/)[1];\n\t      }).forEach(function (key) {\n\t        service.registerHandler(key, handler);\n\t      });\n\t      handler();\n\t    });\n\t  }\n\t\n\t  function processFieldWatch(field) {\n\t    var service = this;\n\t    if (!field.watch) return;\n\t\n\t    var schema = field.schema;\n\t    field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\t\n\t    _.each(field.watch, function (watch) {\n\t      if (watch.resolution) {\n\t        var condition = watch.condition;\n\t        var resolution = watch.resolution;\n\t        var handler = void 0;\n\t\n\t        if (_.isFunction(resolution)) {\n\t          handler = function handler(cur, prev) {\n\t            if (!condition || service.parseCondition(condition)) {\n\t              resolution(cur, prev);\n\t            }\n\t          };\n\t        } else {\n\t          var adjustment = {};\n\t\n\t          adjustment.date = resolution.match(/\\+ ?(\\d+) days/);\n\t\n\t          if (adjustment.date) {\n\t            adjustment.date = adjustment.date[1];\n\t            resolution = resolution.replace(adjustment.date, '').trim();\n\t          } else {\n\t            adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\t\n\t            if (adjustment.math) {\n\t              adjustment.operator = {\n\t                '+': 'add',\n\t                '-': 'subtract',\n\t                '*': 'multiply',\n\t                '/': 'divide'\n\t              }[adjustment.math[1]];\n\t\n\t              adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n\t            }\n\t          }\n\t\n\t          resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n\t\n\t          handler = function handler(val, prev, key, trigger) {\n\t            var curCondition = condition && replaceArrayIndex(condition, key);\n\t            var updatePath = replaceArrayIndex(resolution[1], key);\n\t            var fromPath = replaceArrayIndex(resolution[2], key);\n\t\n\t            var update = service.parseExpression(updatePath);\n\t\n\t            // avoid loop where two watches keep triggering each other\n\t            if (trigger === update.path().key) return;\n\t            trigger = update.path().key;\n\t\n\t            var from = service.parseExpression(fromPath);\n\t\n\t            if (!condition || service.parseCondition(curCondition)) {\n\t              if (adjustment.date) {\n\t                update.set(moment(from.get()).add(adjustment.date, 'days').toDate());\n\t              } else if (adjustment.math) {\n\t                //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n\t                //let result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n\t                var result = $parse(from.get() + adjustment.math[1] + adjustment.adjuster.get())();\n\t                schema = schema || field.items && (field.items[0].schema || field.items[0].items && field.items[0].items[0].schema);\n\t                if (field.type === 'cn-currency') {\n\t                  var p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\t\n\t                  if (adjustment.math[1] === '*') {\n\t                    result = _.floor(result, p);\n\t                  } else if (adjustment.math[1] === '/') {\n\t                    result = _.ceil(result, p);\n\t                  } else {\n\t                    result = _.round(result, p);\n\t                  }\n\t                }\n\t                //service.listeners[update.path().key].prev = result;\n\t                if (service.listeners[trigger]) {\n\t                  service.listeners[trigger].trigger = key;\n\t                }\n\t                update.set(result || 0);\n\t              } else {\n\t                update.set(from.get());\n\t              }\n\t            }\n\t          };\n\t        }\n\t\n\t        service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n\t      }\n\t    });\n\t  }\n\t\n\t  function parseCondition(condition) {\n\t    var service = this;\n\t    if (condition.startsWith(\"_\")) {\n\t      var exp = /^_\\.(.*?)\\((.*?),[\\s(]*(.*?)\\)?\\s*=>[{\\s]*(?:return)?(.*?)\\}?\\)$/;\n\t\n\t      var _condition$match = condition.match(exp),\n\t          _condition$match2 = _slicedToArray(_condition$match, 5),\n\t          fn = _condition$match2[1],\n\t          list = _condition$match2[2],\n\t          predicateParams = _condition$match2[3],\n\t          predicateBody = _condition$match2[4];\n\t\n\t      return _[fn]($parse(list)(service), generatePredicate(predicateParams, predicateBody));\n\t    } else {\n\t      return $parse(condition)(service);\n\t    }\n\t  }\n\t\n\t  function generatePredicate(params, body) {\n\t    return function () {\n\t      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t        args[_key2] = arguments[_key2];\n\t      }\n\t\n\t      return $parse(body)(params.replace(/\\s/g, '').split(',').reduce(function (acc, cur, i) {\n\t        acc[cur] = args[i];return acc;\n\t      }, {}));\n\t    };\n\t  }\n\t\n\t  function registerHandler(key, handler, updateSchema, runHandler) {\n\t    var service = this;\n\t\n\t    // if field is passed instead of key\n\t    if (_.isObject(key) && !_.isArray(key)) {\n\t      if (!key.key && key.items) {\n\t        _.each(key.items, function (field) {\n\t          service.registerHandler(field, handler, field.updateSchema);\n\t        });\n\t        return;\n\t      } else {\n\t        key = key.key;\n\t      }\n\t    }\n\t\n\t    key = service.getKey(key);\n\t    var arrMatch = key.match(/(.*)\\[]\\.?(.*)/);\n\t\n\t    if (arrMatch) {\n\t      service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n\t      return;\n\t    }\n\t\n\t    var cur = service.parseExpression(key, service.model).get();\n\t    var defaultValue = _.get(service.getSchema(key), 'default');\n\t\n\t    if (!service.listeners[key]) {\n\t      var prev = _.isUndefined(cur) ? angular.copy(defaultValue) : angular.copy(cur);\n\t      service.listeners[key] = {\n\t        handlers: [],\n\t        updateSchema: updateSchema,\n\t        prev: prev\n\t      };\n\t    }\n\t\n\t    if (handler) {\n\t      service.listeners[key].handlers.push(handler);\n\t      if (runHandler) handler(cur, null, key);\n\t    }\n\t  }\n\t\n\t  function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n\t    var service = this;\n\t    var onArray = function onArray(cur, prev, reorder) {\n\t\n\t      if (!prev && prev !== 0 && (cur | 0) < 1) return;\n\t      var i, l, key;\n\t\n\t      if (prev > cur || reorder) {\n\t        var lastKey = fieldKey ? arrKey + '[' + (prev - 1) + '].' + fieldKey : arrKey + '[' + (prev - 1) + ']';\n\t\n\t        // only deregister handlers once each time an element is removed\n\t        if (service.listeners[lastKey]) {\n\t          for (i = 0, l = prev; i < l; i++) {\n\t            key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t            service.deregisterHandlers(key);\n\t          }\n\t        }\n\t        for (i = 0, l = cur; i < l; i++) {\n\t          key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t          service.registerHandler(key, handler, updateSchema);\n\t          //no need to call if just reregisering handlers\n\t          //if(runHandler) handler(null, null, key);\n\t        }\n\t      } else if (cur > (prev || 0)) {\n\t        for (i = prev | 0, l = cur; i < l; i++) {\n\t          key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t          service.registerHandler(key, handler, updateSchema, runHandler);\n\t          //if(runHandler) handler(null, null, key);\n\t        }\n\t      }\n\t    };\n\t\n\t    var arrVal = service.parseExpression(arrKey, service.model).get();\n\t    _.each(arrVal, function (field, i) {\n\t      var key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t      service.registerHandler(key, handler, updateSchema);\n\t      if (runHandler) handler(null, null, key);\n\t    });\n\t\n\t    var listenerKey = arrKey + '.length';\n\t    if (service.arrayListeners[listenerKey]) {\n\t      service.arrayListeners[listenerKey].handlers.push(onArray);\n\t    } else {\n\t      service.arrayListeners[listenerKey] = {\n\t        handlers: [onArray],\n\t        prev: arrVal ? arrVal.length : 0\n\t      };\n\t    }\n\t  }\n\t\n\t  function deregisterHandlers(key) {\n\t    var service = this;\n\t\n\t    key = service.getKey(key);\n\t\n\t    var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\t\n\t    if (arrMatch) {\n\t      service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n\t      return;\n\t    }\n\t\n\t    //if(service.listeners[key]) service.listeners[key].handlers = [];\n\t    if (service.listeners[key]) delete service.listeners[key];\n\t  }\n\t\n\t  function deregisterArrayHandlers(arrKey, fieldKey) {\n\t    var service = this;\n\t\n\t    service.parseExpression(arrKey, service.model).get().forEach(function (item, i) {\n\t      fieldKey ? service.deregisterHandlers(arrKey + '[' + i + '].' + fieldKey) : service.deregisterHandlers(arrKey + '[' + i + ']');\n\t    });\n\t  }\n\t\n\t  function initModelWatch() {\n\t    var service = this;\n\t    if (service.watching) return;\n\t    if (service.modelWatch) service.modelWatch();\n\t\n\t    service.modelWatch = $rootScope.$watch(function () {\n\t      return service.model;\n\t    }, service.onModelWatch.bind(service), true);\n\t\n\t    service.initSchemaParams();\n\t    service.watching = true;\n\t    service.firstUpdate = true;\n\t  }\n\t\n\t  function onModelWatch(cur, prev) {\n\t    var service = this;\n\t    // we always run through the listeners on the first update because angular seems to mess up\n\t    // when the defaults are applied and uses the same object for both cur and prev\n\t    if (service.firstUpdate || !angular.equals(cur, prev)) {\n\t      service.firstUpdate = false;\n\t      cnUtil.cleanModel(service.model);\n\t\n\t      service.prevParams = angular.copy(service.params);\n\t\n\t      _.each(service.arrayListeners, function (listener, key) {\n\t        var val = service.parseExpression(key, service.model).get();\n\t        if (!angular.equals(val, listener.prev)) {\n\t          listener.handlers.forEach(function (handler) {\n\t            return handler(val, listener.prev);\n\t          });\n\t          listener.prev = angular.copy(val);\n\t        }\n\t      });\n\t\n\t      _.each(service.listeners, function (listener, key) {\n\t        if (listener) {\n\t          var val = service.parseExpression(key, service.model).get();\n\t          var isInitArray = angular.equals(val, []) && !listener.prev;\n\t          if (!angular.equals(val, listener.prev) && !isInitArray) {\n\t            listener.handlers.forEach(function (handler) {\n\t              handler(val, listener.prev, key, listener.trigger);\n\t            });\n\t            listener.trigger = null;\n\t            listener.prev = angular.copy(val);\n\t          }\n\t          if (listener.updateSchema && !angular.isUndefined(val) && !isInitArray && val !== null /* &&\n\t                                                                                                 !angular.equals(val, service.getDefault(key))*/) {\n\t              service.params[key] = val;\n\t            } else {\n\t            delete service.params[key];\n\t          }\n\t        }\n\t      });\n\t\n\t      if (!angular.equals(service.params, service.prevParams)) {\n\t        if (service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n\t          ++service.updates;\n\t        } else {\n\t          service.refreshSchema();\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function initSchemaParams() {\n\t    var service = this;\n\t    _.each(service.listeners, function (listener, key) {\n\t      if (listener) {\n\t        var val = service.parseExpression(key, service.model).get();\n\t        if (listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n\t          service.params[key] = val;\n\t        }\n\t      }\n\t    });\n\t  }\n\t\n\t  function stripIndexes(key) {\n\t    return key.replace(/\\[\\d+]/g, '[]');\n\t  }\n\t\n\t  function initArrayCopyWatch() {\n\t    var service = this;\n\t\n\t    service.events.push($rootScope.$on('schemaFormPropagateFormController', function (event, scope) {\n\t      var form = scope.form;\n\t\n\t      if (!form.key) {\n\t        form.cacheKey = form.type + '-' + _.uniqueId();\n\t      }\n\t      var key = form.cacheKey || service.getKey(form.key);\n\t\n\t      if (_.isNumber(scope.arrayIndex)) {\n\t        var genericKey = stripIndexes(key);\n\t        var index = scope.arrayIndex;\n\t        form.arrayIndex = index;\n\t\n\t        if (!service.getArrayCopy(genericKey, index)) {\n\t          service.processFieldProps(form, true);\n\t        }\n\t\n\t        if (!form.condition) form.condition = 'true';\n\t\n\t        service.addArrayCopy(scope, genericKey, index);\n\t        scope.$emit('flexFormArrayCopyAdded', genericKey);\n\t      } else {\n\t        service.addToScopeCache(scope, key);\n\t      }\n\t    }));\n\t\n\t    service.events.push($rootScope.$on('schemaFormDeleteFormController', function (event, scope, index) {\n\t      var key = service.getKey(scope.form.key);\n\t      var listener = service.listeners[key];\n\t      if (listener) listener.handlers = [];\n\t\n\t      var unindexedKey = key.replace(/\\[\\d+]/g, '[]');\n\t      var copies = service.getArrayCopiesFor(unindexedKey);\n\t\n\t      copies.forEach(function (list) {\n\t        return list.splice(index, 1);\n\t      });\n\t\n\t      if (scope.form.link) {\n\t        var list = service.parseExpression(scope.form.link, service.model).get();\n\t        list.splice(index, 1);\n\t      }\n\t    }));\n\t  }\n\t\n\t  function addArrayCopy(form, key, index) {\n\t    var service = this;\n\t    if (!index || index < 0) index = 0;\n\t    if (!service.arrayCopies[key]) service.arrayCopies[key] = [];\n\t    service.arrayCopies[key][index] = form;\n\t    //service.arrayCopies[key].push(form);\n\t  }\n\t\n\t  function getArrayCopy(key, index) {\n\t    var service = this;\n\t    var copies = service.arrayCopies[key];\n\t    return copies && copies[index];\n\t  }\n\t\n\t  function getArrayCopies(key) {\n\t    var service = this;\n\t    return _.pluck(service.getArrayScopes(key), 'form');\n\t  }\n\t\n\t  function getArrayCopiesFor(keyStart) {\n\t    var service = this;\n\t    keyStart += '[]';\n\t\n\t    return _.filter(service.arrayCopies, function (copy, key) {\n\t      return key.includes(keyStart);\n\t    });\n\t  }\n\t\n\t  function getArrayScopes(key) {\n\t    var service = this;\n\t    return service.arrayCopies[key];\n\t  }\n\t\n\t  function addToScopeCache(scope, key) {\n\t    var service = this;\n\t    if (service.scopeCache[key]) {\n\t      console.warn('caching duplicate scope for', key);\n\t    }\n\t    return service.scopeCache[key] = scope;\n\t  }\n\t\n\t  function getFromScopeCache(key) {\n\t    var service = this;\n\t    return service.scopeCache[key];\n\t  }\n\t\n\t  function addToFormCache(field, key) {\n\t    var service = this;\n\t    key = key || service.getKey(field.key);\n\t    if (!service.getFromFormCache(key)) service.formCache[key] = field;\n\t  }\n\t\n\t  function getFromFormCache(key) {\n\t    var service = this;\n\t    return service.formCache[key];\n\t  }\n\t\n\t  function addToDataCache(key, modelValue) {\n\t    var service = this;\n\t\n\t    if (key) {\n\t      service.dataCache[key] = modelValue;\n\t    }\n\t  }\n\t\n\t  function getFromDataCache(key) {\n\t    var service = this;\n\t\n\t    return service.dataCache[key];\n\t  }\n\t\n\t  function matchIntStrIndex(exp) {\n\t    return exp.match(/\\[(-?\\d+|\".*\"|'.*')]/);\n\t  }\n\t\n\t  function matchNestedExpression(exp) {\n\t    var _ref5 = matchIntStrIndex(exp) || [],\n\t        _ref6 = _slicedToArray(_ref5, 1),\n\t        toReplace = _ref6[0];\n\t\n\t    var replaced = [];\n\t\n\t    while (toReplace) {\n\t      replaced.push(toReplace);\n\t      exp = exp.replace(toReplace, 'ff_r' + (replaced.length - 1) + '_ff');\n\t\n\t      var _ref7 = matchIntStrIndex(exp) || [];\n\t\n\t      var _ref8 = _slicedToArray(_ref7, 1);\n\t\n\t      toReplace = _ref8[0];\n\t    }\n\t\n\t    var match = exp.match(/\\[([^[\\]]+)]([^[\\]]*)/);\n\t\n\t    return match && replaced.length ? match.map(function (exp) {\n\t      var _ref9 = exp.match(/ff_r(\\d+)_ff/) || [],\n\t          _ref10 = _slicedToArray(_ref9, 2),\n\t          toReplace = _ref10[0],\n\t          index = _ref10[1];\n\t\n\t      while (toReplace) {\n\t        exp = exp.replace(toReplace, replaced[index]);\n\t\n\t        var _ref11 = exp.match(/ff_r(\\d+)_ff/) || [];\n\t\n\t        var _ref12 = _slicedToArray(_ref11, 2);\n\t\n\t        toReplace = _ref12[0];\n\t        index = _ref12[1];\n\t      }\n\t      return exp;\n\t    }) : match;\n\t  }\n\t\n\t  function resolveNestedExpressions(exp, depth) {\n\t    var service = this;\n\t\n\t    var _ref13 = matchNestedExpression(exp) || [],\n\t        _ref14 = _slicedToArray(_ref13, 2),\n\t        nested = _ref14[1];\n\t\n\t    while (nested) {\n\t      var parsed = service.parseExpression(nested, depth).get();\n\t      var keyVal = _.isUndefined(parsed) ? '' : _.isString(parsed) ? '\"' + parsed + '\"' : parsed;\n\t      exp = exp.replace('[' + nested + ']', '[' + keyVal + ']');\n\t\n\t      var _ref15 = matchNestedExpression(exp) || [];\n\t\n\t      var _ref16 = _slicedToArray(_ref15, 2);\n\t\n\t      nested = _ref16[1];\n\t    }\n\t\n\t    return exp;\n\t  }\n\t\n\t  function parseExpression(exp, depth) {\n\t    var service = this;\n\t\n\t    if (!_.isString(exp) && !_.isArray(exp)) {\n\t      return { get: function get() {\n\t          return exp;\n\t        } };\n\t    }\n\t\n\t    // if expression is specific value\n\t    if (/^(null|false|true|undefined|'[^\\']*'|\"[^\\\"]*\"|-?[0-9.]+|\\[]|\\{})$/.test(exp)) {\n\t      return {\n\t        \"get\": function get() {\n\t          if (!exp) return exp;\n\t          var isStr = exp.match(/\"([^\\\"]*)\"/) || exp.match(/'([^\\']*)'/);\n\t          if (isStr) return isStr[1];\n\t          switch (exp) {\n\t            case 'null':\n\t              return null;\n\t            case 'false':\n\t              return false;\n\t            case 'true':\n\t              return true;\n\t            case 'undefined':\n\t              return;\n\t            case '[]':\n\t              return [];\n\t            case '{}':\n\t              return {};\n\t            default:\n\t              return parseFloat(exp);\n\t          }\n\t        }\n\t      };\n\t    }\n\t\n\t    exp = service.getKey(exp);\n\t\n\t    var match = exp.match(/^(model\\.)?(\\S+)$/);\n\t\n\t    var modelValue = {\n\t      get: function get() {\n\t        var resolved = service.resolveNestedExpressions(exp, depth);\n\t        var path = ObjectPath.parse(resolved);\n\t        var start = depth || service;\n\t\n\t        while (start && path.length > 1) {\n\t          start = start[path.shift()];\n\t        }\n\t\n\t        return start && start[path[0]];\n\t      },\n\t      getAssignable: function getAssignable() {\n\t        var resolved = service.resolveNestedExpressions(exp, depth);\n\t        var path = ObjectPath.parse(resolved);\n\t        var progress = [];\n\t        var start = depth || service;\n\t\n\t        while (start && path.length > 1) {\n\t          var key = path.shift();\n\t          progress.push(key);\n\t          if (!start[key]) {\n\t            if (/^\\d?$/.test(path[0])) {\n\t              start[key] = [];\n\t            } else {\n\t              start[key] = {};\n\t            }\n\t          }\n\t          start = start[key];\n\t        }\n\t\n\t        return {\n\t          obj: start,\n\t          key: path[0],\n\t          path: service.getKey(progress),\n\t          fullPath: service.getKey(progress.concat(path.slice(0, 1)))\n\t        };\n\t      },\n\t      set: function set(val) {\n\t        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t        var resolved = service.resolveNestedExpressions(exp, depth);\n\t        var path = ObjectPath.parse(resolved);\n\t        var assignable = this.getAssignable();\n\t        if (val === 'remove') {\n\t          delete assignable.obj[assignable.key];\n\t        } else {\n\t          assignable.obj[assignable.key] = val;\n\t        }\n\t        if (options.silent) {\n\t          service.silenceListeners(resolved, depth);\n\t          service.skipDefaults(resolved);\n\t        }\n\t        return val;\n\t      },\n\t      path: function path() {\n\t        return {\n\t          exp: exp,\n\t          depth: depth,\n\t          key: match[2]\n\t        };\n\t      }\n\t    };\n\t\n\t    return modelValue;\n\t  }\n\t\n\t  function silenceListeners(keyStart, depth) {\n\t    var service = this;\n\t    _.each(service.listeners, function (listener, key) {\n\t      if (key.indexOf(keyStart) === 0) {\n\t        listener.prev = angular.copy(service.parseExpression(key, depth).get());\n\t      }\n\t    });\n\t  }\n\t\n\t  // TODO -- extend this to support nested array keys\n\t  // e.g. \"creative[1].childAttachments[0].callToAction\"\n\t  function skipDefaults(keyStart) {\n\t    var service = this;\n\t    var index = keyStart.match(/\\[\\d*\\]/) ? getArrayIndex(keyStart) : null;\n\t    var ks = stripIndexes(keyStart);\n\t    _.each(service.formCache, function (form, key) {\n\t      if (key.startsWith(ks)) {\n\t        var indexedKey = service.setArrayIndex(key, index);\n\t        service.skipDefault[indexedKey] = true;\n\t      }\n\t    });\n\t  }\n\t\n\t  function processArray(array) {\n\t    var service = this;\n\t    var key = service.getKey(array.key);\n\t\n\t    array.sortOptions = {\n\t      update: function update(e, ui) {\n\t        var listener = service.arrayListeners[key + '.length'];\n\t        listener.handlers.forEach(function (handler) {\n\t          handler(listener.prev, listener.prev, true);\n\t        });\n\t      }\n\t    };\n\t\n\t    service.processSection(array);\n\t  }\n\t\n\t  function processSection(section, secondPass) {\n\t    var service = this;\n\t    // if we're here because a parent's scope was emitted, \n\t    // scope for this section will soon be emitted, so can skip\n\t    if (secondPass) return;\n\t    _.each(section.items, service.processField.bind(service));\n\t  }\n\t\n\t  function processComponent(component) {\n\t    var service = this;\n\t\n\t    component.type = 'section';\n\t    component.htmlClass = 'row';\n\t\n\t    var cols = 12 / _.reject(component.items, 'hidden').length;\n\t\n\t    _.each(component.items, function (field, i) {\n\t      service.processField(field);\n\t      component.items[i] = {\n\t        type: 'section',\n\t        htmlClass: 'col-sm-' + cols,\n\t        items: [field]\n\t      };\n\t    });\n\t  }\n\t\n\t  function processCurrency(field) {\n\t    field.currencyFormat = {\n\t      'currency-dollars': 'dollars',\n\t      'currency-microcents': 'microcents',\n\t      'currency': 'cents'\n\t    }[field.schema.format];\n\t\n\t    field.type = 'cn-currency';\n\t  }\n\t\n\t  function processPercentage(field) {\n\t    field.type = 'cn-percentage';\n\t  }\n\t\n\t  function processReusable(field) {\n\t    var service = this;\n\t    field.type = 'cn-reusable';\n\t    field.view = field.view || 'new';\n\t    field.items.forEach(service.processField.bind(service));\n\t    field.items = [{\n\t      type: 'section',\n\t      items: field.items,\n\t      condition: '!model.' + service.getKey(field.key) + '.id'\n\t    }];\n\t  }\n\t\n\t  function processMediaUpload(field) {\n\t    var service = this;\n\t    field.type = 'cn-mediaupload';\n\t    _.each(field.data, function (dataProp, key) {\n\t      field.data[key] = service.parseExpression(dataProp).get();\n\t    });\n\t  }\n\t\n\t  function processCsvUpload(field) {\n\t    var service = this;\n\t    field.type = 'cn-csvupload';\n\t  }\n\t\n\t  function processRadios(field) {\n\t    field.type = 'cn-radios';\n\t  }\n\t\n\t  function processRadiobuttons(radios) {\n\t    var service = this;\n\t    radios.type = 'cn-radiobuttons';\n\t    if (radios.fullWidth) {\n\t      radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n\t    }\n\t  }\n\t\n\t  function processDate(date) {\n\t    var service = this;\n\t    date.type = 'cn-datetimepicker';\n\t\n\t    if (date.schema.format === 'time-minutes') {\n\t      date.maxView = 'hour';\n\t      date.iconClass = 'fa fa-clock-o';\n\t\n\t      date.modelFormatter = function (val) {\n\t        if (!val) return;\n\t\n\t        var m = moment(val);\n\t\n\t        return _.add(_.multiply(m.hours(), 60), m.minutes());\n\t      };\n\t\n\t      date.modelParser = function (val) {\n\t        if (!val) return;\n\t\n\t        var d = parseInt(val);\n\t        var hours = _.floor(d / 60);\n\t        var minutes = d % 60;\n\t\n\t        return moment().startOf('day').add('hours', hours).add('minutes', minutes);\n\t      };\n\t\n\t      date.viewFormatter = function (val) {\n\t        if (!val) return;\n\t\n\t        return date.modelParser(val).format(date.dateFormat);\n\t      };\n\t\n\t      date.viewParser = function (val) {\n\t        if (!val) return;\n\t\n\t        var match = val.match(/^(\\d{1,2}):?(\\d{1,2})? (a|p)/);\n\t        if (!match) return;\n\t\n\t        var hours = _.add(match[1] === '12' ? 0 : match[1], match[3] === 'a' ? 0 : 12);\n\t        var minutes = match[2] || '00';\n\t\n\t        if (minutes.length === 1) minutes += '0';\n\t\n\t        return _.add(_.multiply(hours, 60), minutes);\n\t      };\n\t    }\n\t  }\n\t\n\t  function getSelectValProp(select) {\n\t    var isArray = select.getSchemaType() === 'array';\n\t    return select.valueProperty || (isArray ? select.schema.items.type : select.schema.type) !== 'object' && 'value';\n\t  }\n\t\n\t  function getAllowedSelectValue(select, val, titleMap) {\n\t    titleMap = titleMap || select.getTitleMap();\n\t    var valProp = getSelectValProp(select);\n\t    if (!valProp) return;\n\t\n\t    if (select.getSchemaType() === 'array') {\n\t      if (!val || !_.isArray(val)) return;\n\t\n\t      var mapVal = val.map(function (x) {\n\t        return _.find(titleMap, _defineProperty({}, valProp, x));\n\t      }).filter(function (x) {\n\t        return x !== undefined;\n\t      });\n\t\n\t      return mapVal;\n\t    } else {\n\t      return _.find(titleMap, _defineProperty({}, valProp, val));\n\t    }\n\t  }\n\t\n\t  function processSelect(select) {\n\t    var service = this,\n\t        schema = select.schema;\n\t\n\t    if (select.titleMapResolve || select.titleMap) {\n\t      select.getTitleMap = function () {\n\t        return select.titleMap || service.schema.data[select.titleMapResolve];\n\t      };\n\t\n\t      select.onInit = function (val, form, event, setter) {\n\t        // make sure we use correct value\n\t        var modelValue = service.parseExpression(form.key, service.model);\n\t        if (event === 'tag-init') {\n\t          var newVal = getAllowedSelectValue(select, modelValue.get());\n\t          if (newVal !== undefined) setter(newVal);\n\t        }\n\t      };\n\t    }\n\t\n\t    if (select.titleMapQuery) {\n\t      var key = select.titleMapQuery.params.q;\n\t      select.titleQuery = function (q) {\n\t        var params = {};\n\t        if (key) {\n\t          params[key] = q;\n\t        }\n\t        return Api.get({\n\t          url: select.titleMapQuery.url,\n\t          params: params\n\t        });\n\t      };\n\t\n\t      // wrap in string so returns truthy when compiled, but converted to number within directive\n\t      if (!key) select.minLookup = '0';\n\t\n\t      select.onInit = function (val, form, event, setter) {\n\t        if (event === 'tag-init') {\n\t          setter(val);\n\t        }\n\t      };\n\t    }\n\t\n\t    if (schema.items) {\n\t      var defaults = [];\n\t      _.each(schema.items.properties, function (schema, key) {\n\t        if (angular.isDefined(schema.default)) {\n\t          defaults.push({\n\t            \"key\": key,\n\t            default: schema.default\n\t          });\n\t        }\n\t      });\n\t      if (defaults.length) {\n\t        select.onAdd = function (val, form, event) {\n\t          if (val.value && event === 'tag-added') {\n\t            _.each(defaults, function (prop) {\n\t              if (!val.value[prop.key]) val.value[prop.key] = prop.default;\n\t            });\n\t          }\n\t        };\n\t      }\n\t    }\n\t\n\t    if (select.displayFormat) {\n\t      select.itemFormatter = service.processTemplate(select.displayFormat);\n\t    }\n\t\n\t    if (!select.type.includes('cn-autocomplete')) {\n\t      if (select.items) {\n\t        select.detailedList = true;\n\t\n\t        if (select.items[0].type !== 'component') {\n\t          if (select.items.length > 1) {\n\t            select.items = [{\n\t              type: \"component\",\n\t              items: select.items\n\t            }];\n\t          }\n\t\n\t          service.processFieldset(select);\n\t        }\n\t\n\t        select.type = 'cn-autocomplete-detailed';\n\t      } else {\n\t        if (!select.selectionStyle) {\n\t          select.selectionStyle = select.key === 'tags' ? 'tags' : select.getSchemaType() === 'array' && select.schema.maxItems !== 1 ? 'list' : 'select';\n\t        }\n\t        select.type = 'cn-autocomplete';\n\t      }\n\t\n\t      if (select.titleMapResolve) {\n\t        $rootScope.$on('cnFlexFormDiff:data', function (e, data) {\n\t          if (data[select.titleMapResolve]) {\n\t            var modelValue = service.parseExpression(select.key, service.model);\n\t            var val = modelValue.get();\n\t            if (val !== undefined) {\n\t              var valid = getAllowedSelectValue(select, val, data[select.titleMapResolve]);\n\t              if (valid === undefined) modelValue.set();\n\t            }\n\t          }\n\t        });\n\t      }\n\t\n\t      service.registerHandler(select.key, function (val) {\n\t        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n\t        if (form && form.$setDirty) form.$setDirty();\n\t      }, select.updateSchema);\n\t    }\n\t  }\n\t\n\t  function processToggle(toggle) {\n\t    toggle.type = 'cn-toggle';\n\t  }\n\t\n\t  function processHelp(help) {\n\t    help.htmlClass = 'help-block';\n\t  }\n\t\n\t  function processDisplay(display) {\n\t    var service = this;\n\t    display.type = 'cn-display';\n\t    display.getDisplay = service.processTemplate(display.displayFormat, true);\n\t  }\n\t\n\t  function processTemplate(tpl, parseScope) {\n\t    var service = this;\n\t    //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n\t    var processor = $interpolate;\n\t    return function (scope, arrayIndex) {\n\t      if (parseScope) {\n\t        if (angular.isDefined(arrayIndex)) {\n\t          scope = _.map(scope, function (key) {\n\t            return key === 'arrayIndex' ? arrayIndex : key;\n\t          });\n\t        }\n\t        scope = service.parseExpression(scope, service.model).get();\n\t      }\n\t      return processor(tpl)(scope);\n\t    };\n\t  }\n\t\n\t  function processTable(table) {\n\t    var service = this;\n\t    table.type = 'cn-table';\n\t    table.items.forEach(function (row) {\n\t      for (var i = 0; i < table.columns.length; i++) {\n\t        _.extend(row.items[i], table.columns[i]);\n\t        //if(row.columns[i].key) row.columns[i].key = ObjectPath.parse(row.columns[i].key);\n\t        service.processField(row.items[i]);\n\t      }\n\t    });\n\t  }\n\t\n\t  function processSelectDisplay(selectDisplay) {\n\t    var service = this,\n\t        schema = service.getSchema(selectDisplay.key),\n\t        selectField = _.find(selectDisplay.items, 'selectField'),\n\t        handler;\n\t\n\t    if (schema && schema.type === 'array') {\n\t      handler = service.setupArraySelectDisplay(selectDisplay, selectField);\n\t    } else {\n\t      handler = service.setupSelectDisplay(selectDisplay, selectField);\n\t    }\n\t\n\t    selectDisplay.selectDisplay = false;\n\t    service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n\t    //service.processField(selectDisplay);\n\t  }\n\t\n\t  function setupArraySelectDisplay(selectDisplay, selectField) {\n\t    var service = this;\n\t    _.each(selectDisplay.items, function (item) {\n\t      if (item.condition !== 'false') {\n\t        item.condition = 'true';\n\t      }\n\t    });\n\t    var handler = function handler(val, prev, key) {\n\t      var index = getArrayIndex(key);\n\t      _.each(selectDisplay.items, function (item) {\n\t        var selectKey = service.getKey(selectField.key);\n\t        var key = service.getKey(item.key);\n\t        var splitKey = ObjectPath.parse(key);\n\t        if (selectKey === key) return;\n\t        var indexedSelectKey = service.setArrayIndex(selectKey, index);\n\t        var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n\t        var formCopies = service.getArrayCopies(key);\n\t        if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n\t          _.each(formCopies, function (copy) {\n\t            if (getArrayIndex(copy) == index) {\n\t              copy.condition = 'true';\n\t            }\n\t          });\n\t        } else {\n\t          _.each(formCopies, function (copy) {\n\t            if (getArrayIndex(copy) == index) {\n\t              copy.condition = 'false';\n\t              service.parseExpression(service.getKey(copy.key), service.model).set();\n\t            }\n\t          });\n\t        }\n\t      });\n\t    };\n\t    // handle legacy objects that don't have values set in the selectField\n\t    var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n\t    _.each(selectDisplay.items, function (item) {\n\t      var key = service.getKey(item.key);\n\t      var selectKey = service.getKey(selectField.key);\n\t      if (key === selectKey) return;\n\t      _.each(model, function (elem, i) {\n\t        var indexedKey = service.setArrayIndex(key, i);\n\t        var splitIndexedKey = ObjectPath.parse(indexedKey);\n\t        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n\t        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n\t        var selectValue = selectModel.get();\n\t        var itemValue = service.parseExpression(indexedKey, service.model).get();\n\t        if (itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n\t          if (!selectValue) {\n\t            selectValue = [];\n\t          }\n\t          selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n\t          selectModel.set(selectValue);\n\t        }\n\t      });\n\t    });\n\t    // handle new objects with values set in defaults\n\t    var defaults = service.getSchema(selectDisplay.key).default;\n\t    _.each(defaults, function (elem, i) {\n\t      var selectKey = service.getKey(selectField.key);\n\t      var indexedSelectKey = service.setArrayIndex(selectKey, i);\n\t      var selectModel = service.parseExpression(indexedSelectKey, service.model);\n\t      var selectValue = selectModel.get();\n\t      _.each(elem, function (val, key) {\n\t        if (!selectValue) {\n\t          selectValue = [];\n\t        }\n\t        selectValue.push(key);\n\t        selectModel.set(selectValue);\n\t      });\n\t    });\n\t    // run handler once all arrayCopies have been instantiated\n\t    var count = 0;\n\t    var keyMap = _.pluck(_.reject(selectDisplay.items, { \"condition\": \"false\" }), 'key');\n\t    var once = $rootScope.$on('flexFormArrayCopyAdded', function (event, key) {\n\t      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n\t      if (model) {\n\t        var total = model.length * keyMap.length;\n\t        if (_.includes(keyMap, key)) {\n\t          count++;\n\t        }\n\t        if (count === total) {\n\t          for (var i = 0; i < model.length; i++) {\n\t            handler(null, null, '[' + i + ']');\n\t          }\n\t          count = 0;\n\t        }\n\t      }\n\t    });\n\t    var resetCount = $rootScope.$on('flexForm.updatePage', function () {\n\t      count = 0;\n\t    });\n\t    service.events.push(once);\n\t    service.events.push(resetCount);\n\t    return handler;\n\t  }\n\t\n\t  function setupSelectDisplay(selectDisplay, selectField) {\n\t    var service = this;\n\t    var handler = function handler() {\n\t      var selectKey = service.getKey(selectField.key);\n\t      _.each(selectDisplay.items, function (item) {\n\t        var key = service.getKey(item.key);\n\t        var splitKey = ObjectPath.parse(key);\n\t        if (selectKey === key) return;\n\t        var selectValue = service.parseExpression(selectKey, service.model).get();\n\t        if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n\t          item.condition = 'true';\n\t        } else {\n\t          item.condition = 'false';\n\t          service.parseExpression(key, service.model).set();\n\t        }\n\t      });\n\t    };\n\t    // handle legacy objects that don't have values set in the selectField\n\t    var selectKey = service.getKey(selectField.key);\n\t    var selectModel = service.parseExpression(selectKey, service.model);\n\t    var selectValue = selectModel.get();\n\t    _.each(selectDisplay.items, function (item) {\n\t      var key = service.getKey(item.key);\n\t      if (selectKey === key) return;\n\t      var splitKey = ObjectPath.parse(key);\n\t      var itemValue = service.parseExpression(key, service.model).get();\n\t      if (itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n\t        if (!selectValue) {\n\t          selectValue = [];\n\t        }\n\t        selectValue.push(splitKey[splitKey.length - 1]);\n\t        selectModel.set(selectValue);\n\t      }\n\t    });\n\t    // handle new objects with values set in the defaults\n\t    var defaults = service.getSchema(selectDisplay.key).default;\n\t    _.each(defaults, function (val, key) {\n\t      if (!selectValue) {\n\t        selectValue = [];\n\t      }\n\t      selectValue.push(key);\n\t      selectModel.set(selectValue);\n\t    });\n\t    // set default values here\n\t    var model = service.parseExpression(selectDisplay.key, service.model);\n\t    if (defaults && !model.get()) {\n\t      model.set(defaults);\n\t    }\n\t\n\t    return handler;\n\t  }\n\t\n\t  function setupSchemaRefresh(refresh) {\n\t    var service = this;\n\t    service.refreshSchema = _.debounce(function (updateSchema) {\n\t      var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n\t      var diff = cnUtil.diff(service.schema.params, params, true);\n\t      var keys;\n\t\n\t      if (diff || updateSchema) {\n\t        if (updateSchema) params.updateSchema = updateSchema;else {\n\t          keys = _.keys(diff);\n\t\n\t          if (keys.length > 1) {\n\t            diff = _.omit(diff, _.isNull);\n\t            keys = _.keys(diff);\n\t          }\n\t\n\t          params.updateSchema = _.first(keys);\n\t        }\n\t\n\t        if (!params.updateSchema) {\n\t          diff = cnUtil.diff(params, _.omit(service.schema.params, 'updateSchema'));\n\t          keys = _.keys(diff);\n\t\n\t          params.updateSchema = _.first(keys);\n\t        }\n\t\n\t        refresh(params).then(function (schema) {\n\t          ++service.updates;\n\t          //service.updateSchema(schema);\n\t          service.processUpdatedSchema(schema);\n\t        });\n\t      }\n\t    }, 100);\n\t\n\t    service.refreshData = _.debounce(function () {\n\t      refresh(_.extend(service.schema.params, { updateSchema: 'refreshData' })).then(function (schema) {\n\t        service.processUpdatedSchema(schema);\n\t      });\n\t    }, 100);\n\t\n\t    service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n\t  }\n\t\n\t  function processUpdatedSchema(schema) {\n\t    var service = this;\n\t    if (schema.diff) {\n\t      service.schema.params = schema.params;\n\t\n\t      if (schema.diff.data) {\n\t        $rootScope.$broadcast('cnFlexFormDiff:data', schema.diff.data);\n\t        _.each(schema.diff.data, function (data, prop) {\n\t          if (data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n\t            data.data = service.schema.data[prop].data.concat(data.data);\n\t          }\n\t          service.schema.data[prop] = data;\n\t          if (service.resolveRegister[prop]) {\n\t            _.each(service.resolveRegister[prop], function (registers) {\n\t              registers.forEach(function (register) {\n\t                service.handleResolve(register.field, register.prop, register.exp);\n\t              });\n\t            });\n\t          }\n\t        });\n\t      }\n\t\n\t      var keys = [];\n\t\n\t      if (schema.diff.schema) {\n\t        $rootScope.$broadcast('cnFlexFormDiff:schema', schema.diff.schema);\n\t        _.each(schema.diff.schema, function (schema, key) {\n\t          service.schema.schema.properties[key] = schema;\n\t          reprocessSchema(schema, key, keys);\n\t        });\n\t      }\n\t\n\t      if (schema.diff.form) {\n\t        $rootScope.$broadcast('cnFlexFormDiff:form', schema.diff.form);\n\t        _.each(schema.diff.form, function (form) {\n\t\n\t          if (keys.indexOf(form.key) === -1) {\n\t            keys.push(form.key);\n\t          }\n\t\n\t          // don't want to override key when extending cached objects\n\t          //var key = form.key;\n\t          //delete form.key;\n\t\n\t          var cached = service.getFromFormCache(form.key);\n\t          if (cached) {\n\t            service.reprocessField(cached, form);\n\t          }\n\t          var copies = service.getArrayCopies(form.key);\n\t          if (copies) {\n\t            copies.forEach(function (copy) {\n\t              return copy && service.reprocessField(copy, form);\n\t            });\n\t          }\n\t        });\n\t      }\n\t\n\t      if (keys.length) {\n\t        _.each(keys, function (key) {\n\t          var form = service.getFromFormCache(key);\n\t          if (form) service.processField(form);\n\t          if (key.includes('[]')) {\n\t            var copies = service.getArrayCopies(key);\n\t            _.each(copies, function (copy) {\n\t              if (copy) service.processField(copy);\n\t            });\n\t          }\n\t        });\n\t      }\n\t\n\t      service.broadcastErrors();\n\t    } else {\n\t      service.updateSchema(schema);\n\t    }\n\t  }\n\t\n\t  function reprocessField(current, update, isChild) {\n\t    var service = this;\n\t\n\t    // other logic in the service will add conition = 'true' to force\n\t    // condition to eval true, so we set the update condition to 'true'\n\t    // before comparing\n\t    if (!update.condition && current.condition) update.condition = 'true';\n\t    var redraw = !isChild && current.condition !== update.condition;\n\t\n\t    _.extend(current, _.omit(update, 'items', 'key'));\n\t\n\t    current._ogKeys.forEach(function (key) {\n\t      if (!update[key]) delete current[key];\n\t    });\n\t    current._ogKeys = _.keys(update);\n\t\n\t    service.deregisterHandlers(update.key);\n\t\n\t    $rootScope.$broadcast('cnFlexFormReprocessField', update.key);\n\t\n\t    // why do we redraw? If we're doing it to show error message\n\t    // that has been addressed from the angular-schema-form library\n\t    // if there's another issue, try triggering the specific action required\n\t    // instead of redrawing the whole form\n\t    if (redraw && current.redraw) {\n\t      console.log('TODO: see if this can be removed');\n\t      current.redraw();\n\t    }\n\t  }\n\t\n\t  function reprocessSchema(schema, key, keys) {\n\t    keys.push(key);\n\t    if (schema.properties) {\n\t      _.each(schema.properties, function (schema, subKey) {\n\t        reprocessSchema(schema, key + '.' + subKey, keys);\n\t      });\n\t    }\n\t    if (schema.items && schema.items.properties) {\n\t      _.each(schema.properties, function (schema, subKey) {\n\t        reprocessSchema(schema, key + '[].' + subKey, keys);\n\t      });\n\t    }\n\t  }\n\t\n\t  function buildError(field) {\n\t    var service = this;\n\t    var key = service.getKey(field.key);\n\t    return {\n\t      key: key,\n\t      message: field.error\n\t    };\n\t  }\n\t\n\t  function broadcastErrors() {\n\t    var service = this;\n\t    $timeout(function () {\n\t      service.errors.forEach(function (error) {\n\t        $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n\t      });\n\t    }, 1);\n\t  }\n\t\n\t  function replaceArrayIndex(resolve, key) {\n\t    while (resolve.includes('arrayIndex')) {\n\t      if (_.isNumber(key)) return resolve.replace(/arrayIndex/g, key);\n\t      var arrayIndexKey = /([^.[]*)\\[arrayIndex\\]/.exec(resolve);\n\t      var re = new RegExp(arrayIndexKey[1] + '\\\\[(-?\\\\d+)\\\\]');\n\t      var index = re.exec(key);\n\t      if (!index) return resolve;\n\t      resolve = resolve.replace(new RegExp(arrayIndexKey[0].replace(/(\\[|\\])/g, '\\\\$1'), 'g'), index[0]);\n\t    }\n\t    return resolve;\n\t  }\n\t\n\t  function getArrayIndex(key) {\n\t    if (_.isObject(key)) {\n\t      return _.find(key.key, function (key) {\n\t        return _.isNumber(key);\n\t      });\n\t    } else {\n\t      return (/\\[(\\d+)\\]/.exec(key)[1]\n\t      );\n\t    }\n\t  }\n\t\n\t  function setArrayIndex(key, index, asArray) {\n\t    var service = this;\n\t    var keyCopy;\n\t    if (_.isString(key)) {\n\t      keyCopy = ObjectPath.parse(key);\n\t    } else {\n\t      keyCopy = _.clone(key);\n\t    }\n\t    var indexOfIndex = keyCopy.indexOf('');\n\t    keyCopy[indexOfIndex] = index;\n\t\n\t    if (asArray) {\n\t      return keyCopy;\n\t    } else {\n\t      return service.getKey(keyCopy);\n\t    }\n\t  }\n\t\n\t  function cleanup() {\n\t    var service = this;\n\t    _.each(service.events, function (listener) {\n\t      listener();\n\t    });\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormService', cnFlexFormServiceProvider);\n\t\n\texports.default = cnFlexFormServiceProvider;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tcnFlexFormModalLoaderService.$inject = [\"$stateParams\", \"$q\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar modalMap = {};\n\tvar promiseMap = {};\n\t\n\tfunction getPromises(state) {\n\t  if (promiseMap[state]) return promiseMap[state];\n\t\n\t  var promise = {};\n\t  promiseMap[state] = promise;\n\t  return promise;\n\t}\n\t\n\tfunction getPromise(state, id, $q) {\n\t  var promises = getPromises(state);\n\t  if (promises[id]) return promises[id];\n\t\n\t  var promise = $q.defer();\n\t  promises[id] = promise;\n\t  return promise;\n\t}\n\t\n\tfunction cnFlexFormModalLoaderServiceProvider() {\n\t\n\t  parent.$inject = [\"$stateParams\", \"$q\"];\n\t  return {\n\t    addMapping: addMapping,\n\t    $get: cnFlexFormModalLoaderService\n\t  };\n\t\n\t  ////////////\n\t\n\t  function addMapping(state, def) {\n\t    def.resolve = { parent: parent };\n\t    modalMap[state] = def;\n\t  }\n\t\n\t  function parent($stateParams, $q) {\n\t    'ngInject';\n\t\n\t    return getPromise($stateParams.modal, $stateParams.modalId, $q).promise.then(function (_ref) {\n\t      var parent = _ref.parent;\n\t      return parent;\n\t    });\n\t  }\n\t}\n\t\n\tfunction cnFlexFormModalLoaderService($stateParams, $q) {\n\t  'ngInject';\n\t\n\t  return {\n\t    getMapping: getMapping,\n\t    resolveMapping: resolveMapping\n\t  };\n\t\n\t  /////////////\n\t\n\t  function resolveMapping(state, id, parent) {\n\t    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\t    var scope = options.scope;\n\t\n\t    if (scope) {\n\t      scope.options = scope.options || {};\n\t      scope.options.destroyStrategy = 'retain';\n\t      modalMap[state].scope = scope;\n\t    }\n\t    var d = getPromise(state, id, $q);\n\t    d.resolve({ parent: parent, options: options });\n\t    return d.promise;\n\t  }\n\t\n\t  function getMapping(state) {\n\t    var d = $q.defer();\n\t    getPromise($stateParams.modal, $stateParams.modalId, $q).promise.then(function (_ref2) {\n\t      var parent = _ref2.parent,\n\t          options = _ref2.options;\n\t\n\t      d.resolve({ state: modalMap[state], options: options });\n\t      return parent;\n\t    });\n\t    return d.promise;\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider);\n\t\n\texports.default = cnFlexFormModalLoaderServiceProvider;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlexFormModalLoader.$inject = [\"FlexFormModal\", \"$state\", \"$rootScope\", \"$stateParams\"];\n\tFlexFormModal.$inject = [\"cnFlexFormModalLoaderService\", \"$uibModal\", \"$stateParams\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams) {\n\t  'ngInject';\n\t\n\t  var vm = this;\n\t\n\t  activate();\n\t\n\t  //////////\n\t\n\t  function activate() {\n\t    FlexFormModal.open(vm).then(function (_ref) {\n\t      var modal = _ref.modal,\n\t          _ref$options = _ref.options,\n\t          onDismiss = _ref$options.onDismiss,\n\t          onAfterDismiss = _ref$options.onAfterDismiss;\n\t\n\t      vm.modal = modal;\n\t      vm.modal.result.finally(goBack);\n\t\n\t      if (onDismiss) vm.modal.result.catch(function () {\n\t        return onDismiss($stateParams.restParams);\n\t      });\n\t      vm.dismissEvent = $rootScope.$on('$stateChangeStart', dismissModal);\n\t    });\n\t  }\n\t\n\t  function goBack() {\n\t    if (!$state.transition) {\n\t      $state.go('^');\n\t    }\n\t  }\n\t\n\t  function dismissModal() {\n\t    console.log('dismissModal');\n\t    // unbind event\n\t    vm.dismissEvent();\n\t    vm.modal.dismiss();\n\t  }\n\t}\n\t\n\tfunction FlexFormModal(cnFlexFormModalLoaderService, $uibModal, $stateParams) {\n\t  'ngInject';\n\t\n\t  return { open: open };\n\t\n\t  ////////////\n\t\n\t  function open() {\n\t    return cnFlexFormModalLoaderService.getMapping($stateParams.modal).then(function (_ref2) {\n\t      var state = _ref2.state,\n\t          options = _ref2.options;\n\t      return {\n\t        modal: $uibModal.open(state),\n\t        options: options\n\t      };\n\t    });\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.controller('FlexFormModalLoader', FlexFormModalLoader)\n\t//.factory('FlexFormModal', FlexFormModal);\n\t\n\texports.FlexFormModalLoader = FlexFormModalLoader;\n\texports.FlexFormModal = FlexFormModal;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\t\n\tFlexForm.$inject = [\"cnFlexFormService\", \"$scope\", \"$location\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexForm() {\n\t  return {\n\t    restrict: 'E',\n\t    template: '\\n      <div ng-if=\"vm.showForm()\">\\n        <ng-form \\n          class=\"clearfix\"\\n          name=\"{{vm.formName}}\"\\n          sf-schema=\"vm.config.schema.schema\"\\n          sf-form=\"vm.form\"\\n          sf-model=\"vm.model\">\\n        </ng-form>\\n        <!-- debug panel to display model -->\\n        <section ng-if=\"vm.debug\">\\n          <json-explorer json-data=\"vm.model || \\'...model not loaded yet\\'\"/>\\n        </section>\\n      </div>\\n    ',\n\t    scope: {\n\t      config: '=ffConfig',\n\t      model: '=ffModel',\n\t      formIndex: '=ffFormIndex',\n\t      formName: '=ffFormName',\n\t      delayForm: '=ffDelayForm',\n\t      cleanupEvent: '=ffCleanupEvent'\n\t    },\n\t    controller: FlexForm,\n\t    controllerAs: 'vm',\n\t    bindToController: true\n\t  };\n\t}\n\t\n\tfunction FlexForm(cnFlexFormService, $scope, $location) {\n\t  'ngInject';\n\t\n\t  var vm = this;\n\t  vm.service = undefined;\n\t  vm.events = [];\n\t\n\t  vm.activate = activate;\n\t  vm.cleanup = cleanup;\n\t  vm.process = process;\n\t  vm.showForm = showForm;\n\t\n\t  vm.events.push($scope.$watch(function () {\n\t    return vm.config.schema;\n\t  }, vm.process));\n\t\n\t  vm.activate();\n\t\n\t  $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\t\n\t  //////////\n\t\n\t  function activate() {\n\t    if (angular.isNumber(vm.formIndex)) {\n\t      vm.form = vm.config.schema.forms[vm.formIndex].form;\n\t    } else {\n\t      vm.form = vm.config.schema.form;\n\t    }\n\t\n\t    // debug\n\t    if ($location.search().debug) {\n\t      vm.debug = true;\n\t    }\n\t  }\n\t\n\t  function process(cur, prev) {\n\t    if (vm.form) {\n\t      if (!vm.service) {\n\t        vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n\t          formCtrl: vm.config.formCtrl,\n\t          getSchema: vm.config.getSchema,\n\t          updateSchema: updateSchema\n\t        });\n\t      } else {\n\t        console.log('vm.service.isCompiled():', vm.service.isCompiled());\n\t        vm.service.compile(vm.config.schema, vm.model);\n\t      }\n\t      //$scope.$broadcast('schemaFormRedraw');\n\t    }\n\t  }\n\t\n\t  function showForm() {\n\t    return !vm.delayForm && vm.service && vm.service.isCompiled();\n\t  }\n\t\n\t  function updateSchema(schema) {\n\t    vm.config.schema = schema;\n\t    vm.activate();\n\t  }\n\t\n\t  function cleanup() {\n\t    _.each(vm.events, function (listener) {\n\t      listener();\n\t    });\n\t    vm.service.cleanup();\n\t  }\n\t}\n\t\n\texports.default = cnFlexForm;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlexFormHeader.$inject = [\"$scope\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexFormHeader() {\n\t  return {\n\t    restrict: 'E',\n\t    scope: {\n\t      config: '=ffHeaderConfig',\n\t      submit: '&ffSubmit',\n\t      loadOffscreen: '&ffLoadOffscreen'\n\t    },\n\t    controller: FlexFormHeader,\n\t    bindToController: true,\n\t    controllerAs: 'vm',\n\t    template: '\\n        <div class=\"col-md-6\">\\n          <h5 ng-if=\"vm.title.lead\">{{::vm.title.lead}}</h5>\\n          <h1>\\n            <i ng-show=\"vm.title.icon\" class=\"{{vm.title.icon}}\"/>\\n            {{vm.title.main}}\\n          </h1>\\n          <h5 ng-if=\"vm.title.sub\">{{::vm.title.sub}}</h5>\\n        </div>\\n        <div class=\"{{vm.buttonContainerClass || \\'page-action-btns\\'}}\">\\n          <div class=\"btn-options\"\\n               ng-mouseover=\"vm.loadOffscreen()\">\\n            <a class=\"btn btn-{{vm.returnStyle ? vm.returnStyle : \\'default-dark\\'\"\\n               ng-if=\"vm.returnState\"\\n               ui-sref=\"{{vm.returnState}}\">\\n              {{vm.returnText || \\'Cancel\\'}}\\n            </a>\\n            <a class=\"btn btn-{{vm.closeButton.style ? vm.closeButton.style : \\'default-dark\\'}}\"\\n               ng-if=\"vm.closeButton\"\\n               ng-click=\"vm.closeButton.handler()\">\\n               Cancel\\n            </a>\\n            <span ng-repeat=\"button in vm.actions\">\\n              <span ng-class=\"{\\'btn-group\\': button.options}\">\\n                <a class=\"btn {{button.style ? \\'btn-\\'+button.style : ($index === vm.actions.length - 1 ? \\'btn-primary\\' : \\'btn-default-dark\\')}}\"\\n                   ng-disabled=\"vm.isDisabled(button)\"\\n                   ng-click=\"vm.submit({handler: button.handler})\"\\n                   uib-tooltip=\"{{button.helptext}}\"\\n                   uib-tooltip-placement=\"bottom\"\\n                   ng-bind-html=\"button.text || \\'Save\\'\">\\n                </a>\\n                <a class=\"btn {{button.style ? \\'btn-\\'+button.style : ($index === vm.actions.length - 1 ? \\'btn-primary\\' : \\'btn-default-dark\\')}} dropdown-toggle\"\\n                        ng-disabled=\"vm.isDisabled(button)\"\\n                        ng-show=\"button.options\"\\n                        data-toggle=\"dropdown\">\\n                  <span class=\"caret\"></span>\\n                </a>\\n                <ul class=\"dropdown-menu\" ng-if=\"button.options\">\\n                  <li ng-repeat=\"option in button.options\"\\n                      ng-disabled=\"vm.isDisabled(option)\">\\n                    <a ng-click=\"vm.submit({handler: option.handler})\"\\n                       ng-bind-html=\"option.text\">\\n                    </a>\\n                  </li>\\n                </ul>\\n              </span>\\n            </span>\\n          </div>\\n          <p class=\"data-updated-at text-right\"\\n             id=\"data-updated-at\"\\n             ng-hide=\"vm.config.noData\">\\n            <a ng-click=\"vm.updateData()\">Update Data</a>\\n          </p>\\n        </div>'\n\t  };\n\t}\n\t\n\tfunction FlexFormHeader($scope) {\n\t  'ngInject';\n\t\n\t  var vm = this;\n\t\n\t  vm.updateData = updateData;\n\t  vm.isDisabled = isDisabled;\n\t\n\t  activate();\n\t\n\t  ///////////\n\t\n\t  function activate() {\n\t    vm.title = vm.config.title;\n\t\n\t    var _ref = vm.config.actionConfig || {};\n\t\n\t    vm.returnState = _ref.returnState;\n\t    vm.returnStyle = _ref.returnStyle;\n\t    vm.returnText = _ref.returnText;\n\t    vm.closeButton = _ref.closeButton;\n\t    vm.actions = _ref.actions;\n\t  }\n\t\n\t  function updateData() {\n\t    console.log('updateData:', updateData);\n\t    $scope.$emit('ffRefreshData');\n\t  }\n\t\n\t  function isDisabled(btnConfig) {\n\t    if (vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n\t    return false;\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.directive('cnFlexFormHeader', cnFlexFormHeader);\n\t\n\texports.default = cnFlexFormHeader;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction ffValidate() {\n\t  return {\n\t    restrict: 'A',\n\t    scope: { form: '=ffValidate' },\n\t    require: 'ngModel',\n\t    link: link\n\t  };\n\t}\n\t\n\tfunction link($scope, elem, attrs, ngModel) {\n\t  //console.log('$scope, ngModel:', $scope.form, ngModel);\n\t  if ($scope.form && $scope.form.required) {\n\t    $scope.$watch(function () {\n\t      return ngModel.$viewValue;\n\t    }, function (value) {\n\t      // override schemaForm validation\n\t      ngModel.$setValidity('schemaForm', true);\n\t      ngModel.$setValidity('tv4-302', value);\n\t    });\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.directive('ffValidate', ffValidate);\n\t\n\texports.default = ffValidate;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// all.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d4f6e256792782e58438","import cnFlexFormConfigProvider from './cn-flex-form-config.service';\nimport cnFlexFormTypesProvider from './cn-flex-form-types.service';\nimport { cnFlexFormRoutesProvider, cnFlexFormRoutes } from './cn-flex-form.routes';\nimport { schemaFormConfig, addTemplates } from './schema-form-extensions';\nimport cnFlexFormServiceProvider from './cn-flex-form.service';\nimport cnFlexFormModalLoaderServiceProvider from './cn-flex-form-modal-loader.service';\nimport { FlexFormModalLoader, FlexFormModal } from './cn-flex-form-modal-loader';\nimport cnFlexForm from './cn-flex-form.directive';\nimport cnFlexFormHeader from './cn-flex-form-header.directive';\nimport ffValidate from './cn-flex-form-validate.directive';\n\nconsole.log(cnFlexFormServiceProvider);\n\nexport default angular\n  .module('cn.flex-form', [\n    'ui.router',\n    'schemaForm',\n    'ui.bootstrap.datetimepicker',\n    'cnTagsInput',\n    //'ngJsonExplorer',\n    'cn.util'\n  ])\n  .provider('cnFlexFormConfig', cnFlexFormConfigProvider)\n  .provider('cnFlexFormTypes', cnFlexFormTypesProvider)\n  .provider('cnFlexFormRoutes', cnFlexFormRoutesProvider)\n  .config(cnFlexFormRoutes)\n  .config(schemaFormConfig)\n  .run(addTemplates)\n  .provider('cnFlexFormService', cnFlexFormServiceProvider)\n  .provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider)\n  .factory('FlexFormModal', FlexFormModal)\n  .controller('FlexFormModalLoader', FlexFormModalLoader)\n  .directive('cnFlexForm', cnFlexForm)\n  .directive('cnFlexFormHeader', cnFlexFormHeader)\n  .directive('ffValidate', ffValidate)\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./src/_cn-flex-form.module.js","function cnFlexFormConfigProvider() {\n\n  const ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\n  return {\n    addIgnoreParam,\n    $get: cnFlexFormConfig\n  };\n\n  ////////\n\n  function addIgnoreParam(param) {\n    ignoreParams.push(param);\n  }\n\n  function cnFlexFormConfig($stateParams) {\n    'ngInject';\n\n    return {\n      getStateParams,\n      ignoreParams\n    };\n\n    ////////\n\n    function getStateParams() {\n      return _\n          .chain($stateParams)\n          .omit(ignoreParams)\n          .omit(function(v) {\n            return _.isUndefined(v) || _.isNull(v);\n          })\n          .value();\n    }\n  }\n\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\nexport default cnFlexFormConfigProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-config.service.js","function cnFlexFormTypesProvider() {\n\n  var fieldTypeRegister = [{\n    condition: field => field.type === 'hidden',\n    type: 'hidden'\n  }, {\n    condition: field => field.type.includes('radios'),\n    type: 'cn-radios'\n  }, {\n    condition: field => field.type.includes('radiobuttons'),\n    type: 'cn-radiobuttons'\n  }, {\n    condition: field => field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery,\n    type: 'cn-autocomplete'\n  }, {\n    condition: field => field.type === 'cn-datetimepicker' || field.type === 'datetime-local' || field.type === 'time-minutes',\n    type: 'cn-datetimepicker'\n  }, {\n    condition: field => field.type === 'help',\n    type: 'help'\n  }, {\n    condition: field => field.type.includes('display'),\n    type: 'cn-display'\n  }, {\n    condition: field => field.schema && field.schema.format && field.schema.format.includes('currency'),\n    type: 'cn-currency'\n  }, {\n    condition: field => field.schema && field.schema.format === 'percentage',\n    type: 'cn-percentage'\n  }, {\n    condition: field => field.type === 'toggle' || field.type === 'boolean',\n    type: 'cn-toggle'\n  }, {\n    condition: field => field.type === 'mediaupload',\n    type: 'cn-mediaupload'\n  }, {\n    condition: field => field.type === 'csvupload',\n    type: 'cn-csvupload'\n  }, {\n    condition: field => field.type === 'reusable',\n    type: 'cn-reusable'\n  }, {\n    condition: field => field.type === 'table',\n    type: 'cn-table'\n  }, {\n    condition: field => field.type === 'array',\n    type: 'array'\n  }];\n\n  return {\n    registerFieldType: registerFieldType,\n    $get: cnFlexFormTypes\n  };\n\n  ////////\n\n  function registerFieldType(fieldType) {\n    fieldTypeRegister.unshift(fieldType);\n  }\n\n  function cnFlexFormTypes() {\n    return {\n      fieldTypeRegister: fieldTypeRegister,\n      getFieldType: getFieldType\n    };\n\n    /////////\n\n    function getFieldType(field) {\n      for(var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n        if(fieldTypeRegister[i].condition(field)) {\n          return fieldTypeRegister[i].type;\n        }\n      }\n      return field.type || field.schema && field.schema.type;\n    }\n  }\n\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\nexport default cnFlexFormTypesProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-types.service.js","function cnFlexFormRoutesProvider($stateProvider) {\n  'ngInject';\n\n  return {\n    addStates,\n    $get\n  };\n\n  ////////////\n\n  function $get() {\n    // nothing to do here, but required\n  }\n\n  function addStates({ permissions, name }) {\n    const shared = {\n      controller: 'FlexFormModalLoader',\n      controllerAs: 'vm',\n      permissions\n    };\n    $stateProvider\n        .state(`${name}.page.modal`, {\n          url: '/~:modal/:modalId',\n          ...shared\n        })\n        .state(`${name}.page.modalParams`, {\n          url: '/~:modal/:modalId/:restParams',\n          ...shared\n        });\n  }\n}\n\nfunction cnFlexFormRoutes($stateProvider) {\n  'ngInject';\n\n  $stateProvider\n      .state('flex-form-sandbox', {\n        url: '/flex-form/sandbox',\n        controller: 'FlexFormSandbox',\n        controllerAs: 'vm',\n        templateUrl: 'app/components/cn-flex-form/sandbox.html'\n      });\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormRoutes', cnFlexFormRoutesProvider)\n    //.config(cnFlexFormRoutes);\n\nexport { cnFlexFormRoutes, cnFlexFormRoutesProvider };\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form.routes.js","//angular.module('cn.flex-form')\n    //.config(schemaFormConfig)\n    //.run(addTemplates);\n\nfunction schemaFormConfig(cnFlexFormServiceProvider) {\n  'ngInject';\n\n  tv4.addFormat({\n    'url': data => _.isString(data) && !/^(https?:\\/\\/.{2}|$)/.test(data) && 'invalid url'\n  });\n\n  var extensions = [\n    'cn-fieldset',\n    'cn-toggle',\n    'cn-datetimepicker',\n    'cn-autocomplete',\n    'cn-autocomplete-detailed',\n    'cn-currency',\n    'cn-radios',\n    'cn-radiobuttons',\n    'cn-percentage',\n    'cn-display',\n    'cn-mediaupload',\n    'cn-csvupload',\n    'cn-reusable',\n    'cn-table'\n  ];\n\n  _.each(extensions, function(extension) {\n    cnFlexFormServiceProvider.registerField({\n      type: extension,\n      templateUrl: `app/components/cn-flex-form/forms/${extension}.html`\n    });\n  });\n}\n\nfunction addTemplates($templateCache) {\n  'ngInject';\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-toggle.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n        <div class=\"clearfix\">\n          <cn-toggle-switch\n            class=\"pull-left\"\n            ng-show=\"form.key\"\n            ng-model-options=\"form.ngModelOptions\"\n            ng-model=\"$$value$$\"\n            sf-changed=\"form\"\n            schema-validate=\"form\"\n            on-value=\"form.onValue\"\n            off-value=\"form.offValue\"\n            read-only=\"form.readonly\"\n            undefined-class=\"form.undefinedClass\"/>\n          <span ng-show=\"form.onText && form.offText\">\n            {{$$value$$ === form.onValue ? form.onText : form.offText}}\n          </span>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-datetimepicker.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               for=\"{{form.key.join('.')}}\"\n               ng-show=\"showTitle()\">{{form.title}}</label>\n        <cn-datetimepicker\n          ng-show=\"form.key\"\n          ng-model=\"$$value$$\"\n          ng-model-options=\"form.ngModelOptions\"\n          is-disabled=\"form.readonly\"\n          sf-changed=\"form\"\n          schema-validate=\"form\"\n          input-id=\"{{form.key.join('.')}}\"\n          min-date=\"form.minDate\"\n          max-date=\"form.maxDate\"\n          max-view=\"{{form.maxView}}\"\n          cn-date-required=\"form.required\"\n          placeholder=\"{{form.placeholder}}\"\n          model-type=\"{{form.schema.type}}\"\n          model-formatter=\"form.modelFormatter\"\n          model-parser=\"form.modelParser\"\n          view-formatter=\"form.viewFormatter\"\n          view-parser=\"form.viewParser\"\n          format-string={{form.dateFormat}}\n          icon-class={{form.iconClass}}>\n        </cn-datetimepicker>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  var sharedAutocompleteTpl = `\n        <tags-input\n          ng-show=\"form.key\"\n          ng-model=\"$$value$$\"\n          ng-model-options=\"form.ngModelOptions\"\n          ng-disabled=\"form.readonly\"\n          sf-changed=\"form\"\n          schema-validate=\"form\"\n          input-id=\"{{form.key.join('.')}}\"\n          display-property=\"{{form.displayProperty || 'name'}}\"\n          value-property=\"{{form.valueProperty}}\"\n          placeholder=\"{{form.placeholder || ' '}}\"\n          clear-on-blur=\"true\"\n          add-on-comma=\"false\"\n          add-from-autocomplete-only=\"{{!form.allowNew}}\"\n          on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\n          on-init=\"form.onInit($tag, form, $event, $setter)\"\n          model-type=\"{{form.getSchemaType()}}\"\n          array-value-type=\"{{form.schema.items.type}}\"\n          hide-tags=\"{{form.detailedList}}\"\n          tags-style=\"{{form.selectionStyle}}\"\n          required=\"{{form.required}}\"\n          min-length=\"{{form.minLength}}\"\n          allowed-tags-pattern=\".*\"\n          dropdown-icon=\"true\"\n          item-formatter=\"form.itemFormatter\"\n          min-tags=\"{{form.schema.minItems}}\"\n          max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== 'array' ? 1 : 0}}\"\n          allow-bulk=\"{{form.bulkAdd}}\"\n          bulk-delimiter=\"{{form.bulkDelimiter}}\"\n          bulk-placeholder=\"{{form.bulkPlaceholder}}\"\n          show-clear-all=\"{{form.showClearAll}}\"\n          show-button=\"true\">\n          <auto-complete\n            source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\n            skip-filtering=\"{{form.titleQuery ? true : false}}\"\n            min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\n          </auto-complete>\n        </tags-input>`;\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-autocomplete.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               for=\"{{form.key.join('.')}}-input\"\n               ng-show=\"showTitle()\">{{form.title}}</label>\n        ${sharedAutocompleteTpl}\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-autocomplete-detailed.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               for=\"{{form.key.join('.')}}-input\"\n               ng-show=\"showTitle()\">{{form.title}}</label>\n        <ol sf-array=\"form\"\n            class=\"list-group cn-autocomplete-list\"\n            ng-show=\"modelArray.length\"\n            ng-model=\"modelArray\">\n          <li class=\"list-group-item {{form.fieldHtmlClass}}\"\n              ng-repeat=\"item in modelArray\">\n            <button ng-hide=\"form.readonly || form.remove === null\"\n                    ng-click=\"deleteFromArray($index)\"\n                    type=\"button\" class=\"close pull-right\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <sf-decorator form=\"copyWithIndex($index)\"/>\n          </li>\n        </ol>\n        ${sharedAutocompleteTpl}\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-currency.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key.join('.')}}\">{{form.title}}</label>\n        <div class=\"{{form.fieldClass}} input-group\">\n          <label class=\"input-group-addon\"\n                 ng-disabled=\"form.readonly\"\n                 for=\"{{form.key.join('.')}}\">$</label>\n          <input class=\"form-control\"\n                 cn-currency-format=\"{{form.currencyFormat}}\"\n                 cn-currency-placeholder=\"{{form.placeholder}}\"\n                 ng-show=\"form.key\"\n                 ng-model-options=\"form.ngModelOptions\"\n                 ng-disabled=\"form.readonly\"\n                 sf-changed=\"form\"\n                 schema-validate=\"form\"\n                 type=\"text\"\n                 step=\"any\"\n                 min=\"{{form.min}}\"\n                 max=\"{{form.max}}\"\n                 id=\"{{form.key.join('.')}}\"\n                 name=\"{{form.key.join('.')}}\"\n                 ng-model=\"$$value$$\">\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-radios.html',\n      `<div class=\"form-group {{form.htmlClass}}\"\n            ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n         <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n         <div class=\"btn-group clearfix\">\n           <label class=\"radio radio-block\"\n                  ng-repeat=\"item in form.titleMap\">\n             <input type=\"radio\"\n                    sf-changed=\"form\"\n                    ng-disabled=\"form.readonly\"\n                    ng-model=\"$$value$$\"\n                    ng-model-options=\"form.ngModelOptions\"\n                    schema-validate=\"form\"\n                    ff-validate=\"form\"\n                    ng-value=\"item.value\"\n                    name=\"{{form.key.join('.')}}\">\n             <span class=\"radio-block-icon\" ng-if=\"item.iconClass\">\n               <i class=\"fa fa-{{item.iconClass}} fa-lg\"></i>\n             </span>\n             <span ng-bind-html=\"item.name\"></span>\n           </label>\n         </div>\n         <span class=\"help-block\" sf-message=\"form.description\"></span>\n       </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-radiobuttons.html',\n      `\n      <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n        <div class=\"btn-group clearfix\">\n          <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? 'active' : ''}}\"\n                 ng-repeat=\"item in form.titleMap\">\n            <input type=\"radio\"\n                   class=\"{{form.fieldHtmlClass}} hide\"\n                   sf-changed=\"form\"\n                   ng-disabled=\"form.readonly\"\n                   ng-model=\"$$value$$\"\n                   ng-model-options=\"form.ngModelOptions\"\n                   schema-validate=\"form\"\n                   ff-validate=\"form\"\n                   ng-value=\"item.value\"\n                   name=\"{{form.key.join('.')}}\">\n            <i class=\"fa fa-{{item.value}} fa-lg\"></i>\n            <span ng-bind-html=\"item.name\"></span>\n          </label>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-percentage.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n        <div class=\"{{form.fieldClass}} input-group\">\n          <input class=\"form-control\"\n                 cn-percentage-format\n                 ng-show=\"form.key\"\n                 ng-model-options=\"form.ngModelOptions\"\n                 ng-disabled=\"form.readonly\"\n                 sf-changed=\"form\"\n                 schema-validate=\"form\"\n                 type=\"number\"\n                 step=\"any\"\n                 min=\"{{form.min}}\"\n                 max=\"{{form.max}}\"\n                 id=\"{{form.key && form.key[0]}}\"\n                 name=\"{{form.key && form.key[0]}}\"\n                 ng-model=\"$$value$$\">\n           <div class=\"input-group-addon\"\n                  ng-disabled=\"form.readonly\"\n                  for=\"{{form.key && form.key[0]}}\">%</div>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-display.html',\n      `\n      <div class=\"form-group cn-display{{form.htmlClass}}\">\n        <input ng-show=\"form.key\"\n               class=\"form-control\"\n               id=\"{{form.key.join('.')}}\"\n               name=\"{{form.key.join('.')}}\"\n               ng-disabled=\"true\"\n               value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-fieldset.html',\n      `\n      <fieldset \n        ng-disabled=\"form.readonly\"\n        class=\"schema-form-fieldset {{form.htmlClass}}\"\n        ng-class=\"{'borderless': form.pos === 0}\">\n        <legend ng-click=\"form.toggleCollapse(form)\"\n                ng-class=\"{'sr-only': !showTitle(), collapsible: form.collapsible}\"\n                ng-mouseenter=\"form.render = true\">\n          <i ng-show=\"form.collapsible\"\n             class=\"fa fa-caret-{{form.collapsed ? 'right' : 'down'}}\"></i>\n          {{ form.title }}\n        </legend>\n        <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\n        <div uib-collapse=\"form.collapsed\">\n          <div ng-if=\"form.render\">\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\n          </div>\n        </div>\n      </fieldset>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-mediaupload.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n        <media-upload ng-model=\"$$value$$\"\n                      cn-file-type=\"form.fileType\"\n                      cn-upload-path=\"form.uploadPath\"\n                      cn-data=\"form.data\"\n                      cn-preview-path=\"form.previewPath\"\n                      cn-model-value-key=\"form.modelValueKey\"\n                      ng-model-options=\"form.ngModelOptions\"\n                      sf-changed=\"form\"\n                      schema-validate=\"form\"\n                      ff-form=\"form\"\n                      class=\"clearfix\">\n        </media-upload>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n     </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-csvupload.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n        <csv-upload ng-model=\"$$value$$\"\n                      cn-upload-path=\"form.uploadPath\"\n                      ng-model-options=\"form.ngModelOptions\"\n                      sf-changed=\"form\"\n                      schema-validate=\"form\"\n                      ff-form=\"form\"\n                      class=\"clearfix\">\n        </csv-upload>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n     </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-reusable.html',\n      `\n      <div class=\"form-group cn-reusable {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key.join('.')}}\">{{form.title}}</label>\n        <cn-select-or\n          ng-show=\"form.key\"\n          select-from=\"form.library\"\n          ng-model=\"$$value$$\"\n          ng-model-options=\"form.ngModelOptions\"\n          sf-changed=\"form\"\n          schema-validate=\"form\"\n          ff-form=\"form\"\n          directiveId=\"form.directiveId\"\n          item-template=\"form.itemTemplate\"\n          toggle-text=\"form.toggleText\"\n          disabled=\"form.readonly\"\n          view=\"form.view\">\n          <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\n        </cn-select-or>\n        <p ng-if=\"form.loadMore && form.view === 'list'\">\n          <a ng-click=\"form.loadMore()\"\n             class=\"btn btn-default btn-block\">Load More</a>\n        </p>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-table.html',\n      `\n      <div class=\"form-group cn-ff-table {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <h6>{{form.title}}</h6>\n        <div class=\"row\">\n          <div ng-repeat=\"col in form.columns\" class=\"{{col.columnWidth}}\">\n            <p class=\"column-header\">{{col.columnHeader}}</p>\n          </div>\n        </div>\n        <div class=\"row\" ng-repeat=\"row in form.items\">\n          <div ng-repeat=\"col in row.items\" class=\"{{col.columnWidth}}\">\n            <sf-decorator form=\"col\"></sf-decorator>\n          </div>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n}\n\nexport { schemaFormConfig, addTemplates };\n\n\n\n// WEBPACK FOOTER //\n// ./src/schema-form-extensions.js","// Need these modules for test bundle\nvar _ = typeof window !== 'undefined' && window._ || require('lodash');\nvar ObjectPath = typeof window !== 'undefined' && window.ObjectPath || require('objectpath');\n\nconst fieldTypeHandlers = {\n  'fieldset': 'processFieldset',\n  'cn-radios': 'processRadios',\n  'cn-radiobuttons': 'processRadiobuttons',\n  'cn-autocomplete': 'processSelect',\n  'cn-datetimepicker': 'processDate',\n  'help': 'processHelp',\n  'cn-display': 'processDisplay',\n  'cn-currency': 'processCurrency',\n  'cn-percentage': 'processPercentage',\n  'cn-mediaupload': 'processMediaUpload',\n  'cn-csvupload': 'processCsvUpload',\n  'cn-reusable': 'processReusable',\n  'cn-toggle': 'processToggle',\n  'cn-table': 'processTable',\n  'component': 'processComponent',\n  'section': 'processSection',\n  'tabarray': 'processSection',\n  'array': 'processArray'\n};\n\nconst fieldPropHandlers = [{\n  prop: 'resolve',\n  handler: (field, service) => service.processResolve(field)\n}, {\n  prop: 'selectDisplay',\n  handler: (field, service) => service.processSelectDisplay(field)\n}, {\n  prop: 'watch',\n  handler: (field, service) => field.watch && service.processFieldWatch(field)\n}, {\n  prop: 'type',\n  handler: (field, service, secondPass) => service.processFieldType(field, secondPass)\n}, {\n  prop: 'conditionals',\n  handler: (field, service) => service.processConditional(field)\n}, {\n  prop: 'default',\n  handler: (field, service) => service.processDefault(field)\n}, {\n  prop: 'schema',\n  handler: (field, service) => \n    _.isUndefined(field.default) && !_.isUndefined(field.schema.default) && service.processDefault(field)\n}, {\n  prop: 'updateSchema',\n  handler: (field, service) => service.registerHandler(field, null, field.updateSchema)\n}];\n\nfunction cnFlexFormServiceProvider(schemaFormDecoratorsProvider, cnFlexFormTypesProvider) {\n  'ngInject';\n\n  return {\n    registerField,\n    $get: CNFlexFormService\n  };\n\n  //////////\n\n  function registerField(fieldType) {\n    if(fieldType.condition) {\n      cnFlexFormTypesProvider.registerFieldType({\n        condition: fieldType.condition,\n        type: fieldType.type\n      });\n    }\n\n    if(fieldType.handler) {\n      fieldTypeHandlers[fieldType.type] = fieldType.handler;\n    }\n\n    if(fieldType.templateUrl) {\n      schemaFormDecoratorsProvider.addMapping(\n          'bootstrapDecorator',\n          fieldType.type,\n          fieldType.templateUrl\n      );\n      schemaFormDecoratorsProvider.createDirective(\n          fieldType.type,\n          fieldType.templateUrl\n      );\n    }\n  }\n}\n\nfunction CNFlexFormService(\n  Api,\n  $parse,\n  cnFlexFormConfig,\n  cnFlexFormTypes,\n  sfPath,\n  $interpolate,\n  $rootScope,\n  $timeout,\n  cnUtil,\n  $stateParams\n) {\n  'ngInject';\n\n  const services = [];\n  const prototype = {\n    compile,\n    addArrayCopy,\n    addToDataCache,\n    addToFormCache,\n    addToScopeCache,\n    broadcastErrors,\n    buildError,\n    cleanup,\n    deregisterHandlers,\n    deregisterArrayHandlers,\n    getArrayCopy,\n    getArrayCopies,\n    getArrayCopiesFor,\n    getArrayScopes,\n    getDefault,\n    getFromDataCache,\n    getFromFormCache,\n    getFromScopeCache,\n    getKey,\n    getSchema,\n    getWatchables,\n    handleResolve,\n    initArrayCopyWatch,\n    initModelWatch,\n    initSchemaParams,\n    isCompiled,\n    onModelWatch,\n    parseCondition,\n    parseExpression,\n    processArray,\n    processDefault,\n    processDisplay,\n    processField,\n    processFieldset,\n    processFieldProps,\n    processFieldType,\n    processFieldWatch,\n    processComponent,\n    processConditional,\n    processCurrency,\n    processPercentage,\n    processDate,\n    processHelp,\n    processRadios,\n    processRadiobuttons,\n    processReusable,\n    processSchema,\n    processSelectDisplay,\n    processResolve,\n    processSection,\n    processSelect,\n    processTable,\n    processTemplate,\n    processToggle,\n    processUpdatedSchema,\n    processMediaUpload,\n    processCsvUpload,\n    registerArrayHandlers,\n    registerHandler,\n    registerResolve,\n    replaceArrayIndex,\n    reprocessField,\n    resolveNestedExpressions,\n    setArrayIndex,\n    setupConfig,\n    setupArraySelectDisplay,\n    setupSelectDisplay,\n    setupSchemaRefresh,\n    silenceListeners,\n    skipDefaults\n  };\n\n  function getService(fn) {\n    return _.find(services, fn);\n  }\n\n  function CNFlexFormConstructor(...args) {\n    if(args.length > 1) {\n      var [ schema, model, config ] = args;\n    }\n    else {\n      var { schema, model, config } = args[0];\n    }\n\n    const curService = getService((service) => service.model === model);\n    if(curService) {\n      if(schema) {\n        curService.compile(schema, model, config);\n      }\n      return curService;\n    }\n\n    const newService = new CNFlexForm(schema, model, config);\n    services.push(newService);\n    return newService;\n  }\n\n  function CNFlexForm(schema, model, config) {\n\n    if($stateParams.debug) {\n      window.services = services;\n    }\n\n    this.arrayCopies = {};\n    this.arrayListeners = {};\n    this.dataCache = {};\n    this.defaults = {};\n    this.errors = [];\n    this.events = [];\n    this.formCache = {};\n    this.scopeCache = {};\n    this.listeners = {};\n    this.resolveRegister = {};\n    this.model = model;\n    this.updates = 0;\n    this.skipDefault = {};\n\n    this.params = cnFlexFormConfig.getStateParams();\n\n    this._ = _;\n\n    this.compile(schema, model, config);\n  }\n\n  _.extend(CNFlexForm.prototype, prototype);\n  _.extend(CNFlexFormConstructor, prototype, { getService });\n\n  return CNFlexFormConstructor;\n\n  //////////////\n\n  function compile(schema, model, config) {\n    var service = this;\n\n    service.schema = schema;\n    service.model = model;\n\n    if(!service.isCompiled()) {\n      service.setupConfig(config);\n\n      if(schema.forms) {\n        _.each(schema.forms, function(form) {\n          _.each(form.form, service.processField.bind(service));\n        });\n      }\n      else {\n        _.each(schema.form, service.processField.bind(service));\n      }\n\n      service.initModelWatch();\n      service.initArrayCopyWatch();\n      service.isCompiled(true);\n    }\n\n    service.broadcastErrors();\n  }\n\n  function isCompiled(setValue) {\n    var service = this;\n    if(setValue) {\n      service.schema.compiled = setValue;\n    }\n    return service.schema && service.schema.compiled;\n  }\n\n  function setupConfig(config) {\n    var service = this;\n    if(config) {\n      if(config.formCtrl) service.formCtrl = config.formCtrl;\n      if(config.updateSchema) service.updateSchema = config.updateSchema;\n      if(config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n    }\n  }\n\n  function processSchema(field) {\n    const service = this;\n    const { schema } = field;\n\n    field.getSchemaType = () => _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n    if(!field.type) field.type = field.getSchemaType && field.getSchemaType();\n  }\n\n  function processDefault(field) {\n    const service = this;\n    const { schema } = field;\n    const curDefault = field.default || schema.default;\n    const key = service.getKey(field.key);\n    \n    if (service.skipDefault[key]) {\n      delete service.skipDefault[key];\n      return;\n    }\n    // if default is returned for new form, treat it as a previous param in order to not trigger unnecessary updateSchema\n    if(!service.updates && field.updateSchema && angular.isDefined(curDefault) && !service.schema.params[key]) {\n      service.schema.params[key] = curDefault;\n    }\n\n    // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n    //if(service.updates || field.default) {\n    if(!_.isUndefined(curDefault)) {\n      if(key.includes && key.includes('[]')) return;\n      const model = service.parseExpression(field.key, service.model);\n      const modelValue = model.get();\n      // if there's an existing default and it's the same as the current value\n      // update the current value to the new default\n      if((\n        _.isTrulyEmpty(modelValue) ||\n        (_.has(service.defaults, key) && angular.equals(modelValue, service.defaults[key]))\n      ) && !angular.equals(modelValue, curDefault)) {\n        model.set(curDefault);\n      }\n    }\n    service.defaults[key] = angular.copy(curDefault);\n\n    if(schema.format === 'url' && !field.validationMessage) {\n      if(!field.type) field.type = 'url';\n      field.validationMessage = 'Must be a valid url (https://...)';\n    }\n  }\n\n  function processFieldset(fieldset) {\n    var service = this;\n\n    fieldset.type = 'cn-fieldset';\n    fieldset.items.forEach(service.processField.bind(service));\n\n    if(_.has(fieldset, 'pos') && fieldset.pos === 0) {\n      fieldset.htmlClass = (fieldset.htmlClass || '') + ' borderless';\n    }\n    if(fieldset.collapsible) {\n      fieldset.toggleCollapse = (fieldset) => {\n        if(fieldset.collapsible) {\n          fieldset.collapsed = !fieldset.collapsed;\n        }\n      };\n\n      fieldset.render = !fieldset.collapsed;\n    }\n    else {\n      fieldset.render = true;\n    }\n  }\n\n  function processFieldType(field, secondPass) {\n    const service = this;\n    const fieldType = cnFlexFormTypes.getFieldType(field);\n    const handler = fieldTypeHandlers[fieldType];\n    if(_.isString(handler)) {\n      service[handler](field, secondPass);\n    }\n    else if(_.isFunction(handler)) {\n      handler.call(service, field, secondPass);\n    }\n  }\n\n  function processField(field, pos) {\n    const service = this;\n\n    if(angular.isDefined(pos)) {\n      field.pos = pos;\n    }\n\n    if(!field._ogKeys) {\n      field._ogKeys = _.without(_.keys(field), 'key', 'htmlClass');\n    }\n\n    const key = service.getKey(field.key);\n\n    if(key) {\n      service.addToFormCache(field, key);\n      const schema = service.getSchema(key);\n\n      if(schema) {\n        field.schema = schema;\n        if(schema.description) field.description = schema.description;\n        if(field.readonly && !schema.readonly) field.readonly = false;\n        if(schema.type === 'array' && !('showClearAll' in field)) field.showClearAll = true;\n      }\n\n      service.processSchema(field);\n    }\n\n    service.processFieldProps(field);\n\n    if(key) {\n      if(_.find(service.errors, { key })) {\n        service.errors = _.reject(service.errors, {key: key});\n        $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n        $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n      }\n      \n      if(field.error) {\n        service.errors.push(service.buildError(field));\n        if(_.isEmpty(field.ngModelOptions)) {\n          field.ngModelOptions = {\n            allowInvalid: true\n          };\n        } else {\n          field.ngModelOptions.allowInvalid = true;\n        }\n      }\n    }\n  }\n\n  function processFieldProps(field, secondPass) {\n    const service = this;\n    fieldPropHandlers.forEach(({ prop, handler }) =>\n        _.has(field, prop) && handler(field, service, secondPass)\n    );\n  }\n\n  function getKey(key) {\n    if(_.isArray(key)) {\n      key = _.reduce(key, (total, next) => \n          /^(-?\\d*)$/.test(next) ? total + '[' + next + ']' : total + '.' + next);\n    }\n    return key;\n  }\n\n  function getSchema(key, depth) {\n    var service = this;\n    if(!key) return;\n\n    key = ObjectPath.parse(service.getKey(key));\n    depth = depth || service.schema.schema.properties;\n\n    let first, next;\n\n    while(key.length > 1) {\n      first = key[0];\n      next = key[1];\n      if(/^-?\\d*$/.test(next)) {\n        if(key.length === 2) {\n          depth = depth = depth[key.shift()];\n        }\n        else {\n          depth = depth[key.shift()].items.properties;\n          key.shift();\n        }\n      }\n      else {\n        depth = depth[key.shift()].properties;\n      }\n    }\n\n    // if array item\n    first = key[0] || 'items';\n\n    return depth[first];\n  }\n\n  function getDefault(field) {\n    const service = this;\n    field = field.key ? field : service.getFromFormCache(field);\n    return field && (angular.isDefined(field.default) ? field.default : field.schema && field.schema.default);\n  }\n\n  function getWatchables(exp) {\n    const watchables = [];\n    let nested = matchNestedExpression(exp);\n    let replaceStr = '';\n\n    while(nested) {\n      if(/^-?\\d+$/.test(nested[1]) || /^(\"|').*(\"|')$/.test(nested[1])) {\n        replaceStr = nested[0];\n        exp = exp.replace(nested[0], 'ff_replace_ff');\n      }\n      else {\n        watchables.push(nested[1].replace(/ff_replace_ff/g, replaceStr));\n        replaceStr = '';\n        exp = exp.replace(nested[0], '');\n      }\n      nested = matchNestedExpression(exp);\n    }\n\n    return [...watchables, exp.replace(/ff_replace_ff/g, replaceStr)];\n  }\n\n  function processResolve(field) {\n    const service = this;\n    const key = service.getKey(field.key);\n\n    _.each(field.resolve, function(dataProp, fieldProp) {\n      dataProp = replaceArrayIndex(dataProp, key || field.arrayIndex);\n      if(dataProp.includes('[arrayIndex]')) return;\n\n      service.handleResolve(field, fieldProp, dataProp, true);\n\n      getWatchables(dataProp).forEach((watchable) => {\n        const [, base, exp] = watchable.match(/(schema\\.data\\.|model\\.)(\\S+)/) || [];\n\n        if(base) {\n          if(base === 'schema.data.') {\n            service.registerResolve(field, fieldProp, exp, dataProp);\n          }\n          else if(base === 'model.') {\n            service.registerHandler(exp, () => {\n              service.handleResolve(field, fieldProp, dataProp);\n            });\n          }\n        }\n      });\n    });\n\n    return field;\n  }\n\n  function handleResolve(field, fieldProp, exp, skipPropHandlers) {\n    const service = this;\n    let data;\n    // does declarative/functional outweigh performance?\n    if(exp.includes(' || ')) {\n      let eithers = exp.split(' || ');\n      for(let i = 0, l = eithers.length; i < l; i++) {\n        const x = service.parseExpression(eithers[i]).get();\n        if(angular.isDefined(x)) {\n          data = x;\n          break;\n        }\n      }\n    }\n    else if(exp.includes(' && ')) {\n      let all = exp.split(' && ');\n      for(let i = 0, l = all.length; i < l; i++) {\n        const x = service.parseExpression(all[i]).get();\n        if(angular.isDefined(x)) data = x;\n        else {\n          data = undefined;\n          break;\n        }\n      }\n    }\n    else {\n      data = service.parseExpression(exp).get();\n    }\n\n    // if we're resolving from model but defaults haven't been applied yet, resolve from default itself\n    if(!data && exp.indexOf('model.') === 0) {\n      const key = exp.replace('model.', '');\n      const genericKey = stripIndexes(key);\n      const cachedField = service.getFromFormCache(key) || service.getFromFormCache(genericKey);\n\n      data = (() => {\n        if(cachedField && cachedField.default)\n          return cachedField.default;\n        if(angular.isDefined(field.default))\n          return field.default;\n        const schema = service.getSchema(genericKey);\n        if(schema) return schema.default;\n      })();\n    }\n\n    if(data && data.cursor) {\n      field.loadMore = function() {\n        const dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n        service.refreshSchema(`data:${dataProp}:${data.cursor}`);\n      };\n    } \n    else {\n      delete field.loadMore;\n    }\n \n    field[fieldProp] = (data && data.data) ? data.data : data;\n\n    if(!skipPropHandlers) {\n      fieldPropHandlers.forEach(({ prop, handler }) => \n          prop === fieldProp && handler(field, service)\n      );\n    }\n  }\n\n  function registerResolve(field, fieldProp, dataProp, exp) {\n    var service = this;\n\n    let fieldKey = service.getKey(field.key);\n    service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\n    let register = service.resolveRegister[dataProp];\n    register[fieldKey] = register[fieldKey] || [];\n    register[fieldKey].push({ field, prop: fieldProp, exp });\n  }\n\n  function processConditional(field) {\n    const service = this;\n\n    _.each(field.conditionals, (condition, key) => {\n      const handler = (val, prev) => {\n        field[key] = service.parseCondition(condition);\n        const scope = service.getFromScopeCache(service.getKey(field.key));\n        if(key === 'required' && scope) {\n          $rootScope.$broadcast('schemaFormValidate');\n        }\n      };\n      field\n          .conditionals[key]\n          .match(/model\\.([^\\s]+)/g)\n          .map(path => path.match(/model\\.([^\\s]+)/)[1])\n          .forEach(key => {\n            service.registerHandler(key, handler);\n          });\n      handler();\n    });\n  }\n\n  function processFieldWatch(field) {\n    const service = this;\n    if(!field.watch) return;\n\n    let schema = field.schema;\n    field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\n    _.each(field.watch, function(watch) {\n      if(watch.resolution) {\n        let condition = watch.condition;\n        let resolution = watch.resolution;\n        let handler;\n\n        if(_.isFunction(resolution)) {\n          handler = function(cur, prev) {\n            if(!condition || service.parseCondition(condition)) {\n              resolution(cur, prev);\n            }\n          };\n        }\n        else {\n          var adjustment = {};\n\n          adjustment.date = resolution.match(/\\+ ?(\\d+) days/);\n\n          if(adjustment.date) {\n            adjustment.date = adjustment.date[1];\n            resolution = resolution.replace(adjustment.date, '').trim();\n          }\n          else {\n            adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\n            if(adjustment.math) {\n              adjustment.operator = {\n                '+': 'add',\n                '-': 'subtract',\n                '*': 'multiply',\n                '/': 'divide'\n              }[adjustment.math[1]];\n\n              adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n            }\n          }\n\n          resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n\n          handler = (val, prev, key, trigger) => {\n            let curCondition = condition && replaceArrayIndex(condition, key);\n            let updatePath = replaceArrayIndex(resolution[1], key);\n            let fromPath = replaceArrayIndex(resolution[2], key);\n\n            let update = service.parseExpression(updatePath);\n\n            // avoid loop where two watches keep triggering each other\n            if(trigger === update.path().key) return;\n            trigger = update.path().key;\n\n            let from = service.parseExpression(fromPath);\n\n            if(!condition || service.parseCondition(curCondition)) {\n              if(adjustment.date) {\n                update.set(moment(from.get()).add(adjustment.date, 'days').toDate());\n              }\n              else if(adjustment.math) {\n                //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n                //let result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n                let result = $parse(from.get() + adjustment.math[1] + adjustment.adjuster.get())();\n                schema = schema || field.items && (field.items[0].schema || (field.items[0].items && field.items[0].items[0].schema));\n                if(field.type === 'cn-currency') {\n                  let p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\n                  if(adjustment.math[1] === '*') {\n                    result = _.floor(result, p);\n                  }\n                  else if(adjustment.math[1] === '/') {\n                    result = _.ceil(result, p);\n                  }\n                  else {\n                    result = _.round(result, p);\n                  }\n                }\n                //service.listeners[update.path().key].prev = result;\n                if(service.listeners[trigger]) {\n                  service.listeners[trigger].trigger = key;\n                }\n                update.set(result || 0);\n              }\n              else {\n                update.set(from.get());\n              }\n            }\n          };\n        }\n\n        service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n      }\n    });\n  }\n\n  function parseCondition(condition) {\n    let service = this;\n    if(condition.startsWith(\"_\")) {\n      let exp = /^_\\.(.*?)\\((.*?),[\\s(]*(.*?)\\)?\\s*=>[{\\s]*(?:return)?(.*?)\\}?\\)$/;\n      let [, fn, list, predicateParams, predicateBody] = condition.match(exp);\n      return _[fn]($parse(list)(service), generatePredicate(predicateParams, predicateBody));\n    } else {\n      return $parse(condition)(service);\n    }\n  }\n\n  function generatePredicate(params, body) {\n    return (...args) =>\n      $parse(body)(params\n              .replace(/\\s/g, '')\n              .split(',')\n              .reduce((acc, cur, i) => { acc[cur] = args[i]; return acc; }, {})\n            );\n  }\n\n  function registerHandler(key, handler, updateSchema, runHandler) {\n    var service = this;\n\n    // if field is passed instead of key\n    if(_.isObject(key) && !_.isArray(key)) {\n      if(!key.key && key.items) {\n        _.each(key.items, function(field) {\n          service.registerHandler(field, handler, field.updateSchema);\n        });\n        return;\n      }\n      else {\n        key = key.key;\n      }\n    }\n\n    key = service.getKey(key);\n    var arrMatch = key.match(/(.*)\\[]\\.?(.*)/);\n\n    if(arrMatch) {\n      service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n      return;\n    }\n\n    var cur = service.parseExpression(key, service.model).get();\n    let defaultValue = _.get(service.getSchema(key), 'default');\n\n    if(!service.listeners[key]) {\n      var prev = _.isUndefined(cur) ? angular.copy(defaultValue) : angular.copy(cur);\n      service.listeners[key] = {\n        handlers: [],\n        updateSchema: updateSchema,\n        prev: prev\n      };\n    }\n\n    if(handler) {\n      service.listeners[key].handlers.push(handler);\n      if(runHandler) handler(cur, null, key);\n    }\n  }\n\n  function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n    const service = this;\n    const onArray = (cur, prev, reorder) => {\n\n      if(!prev && prev !== 0 && (cur | 0) < 1) return;\n      var i, l, key;\n\n      if(prev > cur || reorder) {\n        const lastKey = fieldKey ?\n          `${arrKey}[${prev - 1}].${fieldKey}` :\n          `${arrKey}[${prev - 1}]`;\n\n        // only deregister handlers once each time an element is removed\n        if(service.listeners[lastKey]) {\n          for(i = 0, l = prev; i < l; i++) {\n            key = fieldKey ?\n              `${arrKey}[${i}].${fieldKey}` :\n              `${arrKey}[${i}]`;\n\n            service.deregisterHandlers(key);\n          }\n        }\n        for(i = 0, l = cur; i < l; i++) {\n          key = fieldKey ?\n            `${arrKey}[${i}].${fieldKey}` :\n            `${arrKey}[${i}]`;\n\n          service.registerHandler(key, handler, updateSchema);\n          //no need to call if just reregisering handlers\n          //if(runHandler) handler(null, null, key);\n        }\n      }\n      else if(cur > (prev || 0)) {\n        for(i = prev | 0, l = cur; i < l; i++) {\n          key = fieldKey ?\n            `${arrKey}[${i}].${fieldKey}` :\n            `${arrKey}[${i}]`;\n\n          service.registerHandler(key, handler, updateSchema, runHandler);\n          //if(runHandler) handler(null, null, key);\n        }\n      }\n    };\n\n    const arrVal = service.parseExpression(arrKey, service.model).get();\n    _.each(arrVal, (field, i) => {\n      const key = fieldKey ?\n        `${arrKey}[${i}].${fieldKey}` :\n        `${arrKey}[${i}]`;\n\n      service.registerHandler(key, handler, updateSchema);\n      if(runHandler) handler(null, null, key);\n    });\n\n    const listenerKey = `${arrKey}.length`;\n    if(service.arrayListeners[listenerKey]) {\n      service.arrayListeners[listenerKey].handlers.push(onArray);\n    }\n    else {\n      service.arrayListeners[listenerKey] = {\n        handlers: [onArray],\n        prev: arrVal ? arrVal.length : 0\n      };\n    }\n  }\n\n  function deregisterHandlers(key) {\n    var service = this;\n\n    key = service.getKey(key);\n\n    var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\n    if(arrMatch) {\n      service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n      return;\n    }\n\n    //if(service.listeners[key]) service.listeners[key].handlers = [];\n    if(service.listeners[key]) delete service.listeners[key];\n  }\n\n  function deregisterArrayHandlers(arrKey, fieldKey) {\n    var service = this;\n\n    service.parseExpression(arrKey, service.model).get().forEach((item, i) => {\n      fieldKey ?\n        service.deregisterHandlers(`${arrKey}[${i}].${fieldKey}`) :\n        service.deregisterHandlers(`${arrKey}[${i}]`);\n    });\n  }\n\n  function initModelWatch() {\n    var service = this;\n    if(service.watching) return;\n    if(service.modelWatch) service.modelWatch();\n\n    service.modelWatch = $rootScope.$watch(\n      () => service.model,\n      service.onModelWatch.bind(service),\n      true\n    );\n\n    service.initSchemaParams();\n    service.watching = true;\n    service.firstUpdate = true;\n  }\n\n  function onModelWatch(cur, prev) {\n    var service = this;\n    // we always run through the listeners on the first update because angular seems to mess up\n    // when the defaults are applied and uses the same object for both cur and prev\n    if(service.firstUpdate || !angular.equals(cur, prev)) {\n      service.firstUpdate = false;\n      cnUtil.cleanModel(service.model);\n\n      service.prevParams = angular.copy(service.params);\n\n      _.each(service.arrayListeners, (listener, key) => {\n        let val = service.parseExpression(key, service.model).get();\n        if(!angular.equals(val, listener.prev)) {\n          listener.handlers.forEach(handler => handler(val, listener.prev));\n          listener.prev = angular.copy(val);\n        }\n      });\n\n      _.each(service.listeners, (listener, key) => {\n        if(listener) {\n          let val = service.parseExpression(key, service.model).get();\n          const isInitArray = angular.equals(val, []) && !listener.prev;\n          if(!angular.equals(val, listener.prev) && !isInitArray) {\n            listener.handlers.forEach(handler => {\n              handler(val, listener.prev, key, listener.trigger);\n            });\n            listener.trigger = null;\n            listener.prev = angular.copy(val);\n          }\n          if(listener.updateSchema && \n            !angular.isUndefined(val) &&\n            !isInitArray &&\n            val !== null/* &&\n            !angular.equals(val, service.getDefault(key))*/) {\n            service.params[key] = val;\n          }\n          else {\n            delete service.params[key];\n          }\n        }\n      });\n\n      if(!angular.equals(service.params, service.prevParams)) {\n        if(service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n          ++service.updates;\n        }\n        else {\n          service.refreshSchema();\n        }\n      }\n    }\n  }\n\n  function initSchemaParams() {\n    var service = this;\n    _.each(service.listeners, function(listener, key) {\n      if(listener) {\n        var val = service.parseExpression(key, service.model).get();\n        if(listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n          service.params[key] = val;\n        }\n      }\n    });\n  }\n\n  function stripIndexes(key) {\n    return key.replace(/\\[\\d+]/g, '[]');\n  }\n\n  function initArrayCopyWatch() {\n    const service = this;\n\n    service.events.push($rootScope.$on('schemaFormPropagateFormController', (event, scope) => {\n      const { form } = scope;\n      if(!form.key) {\n        form.cacheKey = `${form.type}-${_.uniqueId()}`;\n      }\n      const key = form.cacheKey || service.getKey(form.key);\n\n      if(_.isNumber(scope.arrayIndex)) {\n        const genericKey = stripIndexes(key);\n        const index = scope.arrayIndex;\n        form.arrayIndex = index;\n\n        if(!service.getArrayCopy(genericKey, index)) {\n          service.processFieldProps(form, true);\n        }\n\n        if(!form.condition) form.condition = 'true';\n\n        service.addArrayCopy(scope, genericKey, index);\n        scope.$emit('flexFormArrayCopyAdded', genericKey);\n      }\n      else {\n        service.addToScopeCache(scope, key);\n      }\n    }));\n\n    service.events.push($rootScope.$on('schemaFormDeleteFormController', (event, scope, index) => {\n      const key = service.getKey(scope.form.key);\n      const listener = service.listeners[key];\n      if(listener) listener.handlers = [];\n\n      const unindexedKey = key.replace(/\\[\\d+]/g, '[]');\n      const copies = service.getArrayCopiesFor(unindexedKey);\n\n      copies.forEach((list) => list.splice(index, 1));\n\n      if(scope.form.link) {\n        var list = service.parseExpression(scope.form.link, service.model).get();\n        list.splice(index, 1);\n      }\n    }));\n  }\n\n  function addArrayCopy(form, key, index) {\n    const service = this;\n    if(!index || index < 0) index = 0;\n    if(!service.arrayCopies[key]) service.arrayCopies[key] = [];\n    service.arrayCopies[key][index] = form;\n    //service.arrayCopies[key].push(form);\n  }\n\n  function getArrayCopy(key, index) {\n    const service = this;\n    const copies = service.arrayCopies[key];\n    return copies && copies[index];\n  }\n\n  function getArrayCopies(key) {\n    const service = this;\n    return _.pluck(service.getArrayScopes(key), 'form');\n  }\n\n  function getArrayCopiesFor(keyStart) {\n    const service = this;\n    keyStart += '[]';\n\n    return _.filter(service.arrayCopies, (copy, key) => key.includes(keyStart));\n  }\n\n  function getArrayScopes(key) {\n    var service = this;\n    return service.arrayCopies[key];\n  }\n\n  function addToScopeCache(scope, key) {\n    const service = this;\n    if(service.scopeCache[key]) {\n      console.warn('caching duplicate scope for', key);\n    }\n    return service.scopeCache[key] = scope;\n  }\n\n  function getFromScopeCache(key) {\n    const service = this;\n    return service.scopeCache[key];\n  }\n\n  function addToFormCache(field, key) {\n    var service = this;\n    key = key || service.getKey(field.key);\n    if(!service.getFromFormCache(key)) service.formCache[key] = field;\n  }\n\n  function getFromFormCache(key) {\n    var service = this;\n    return service.formCache[key];\n  }\n\n  function addToDataCache(key, modelValue) {\n    var service = this;\n\n    if(key) {\n      service.dataCache[key] = modelValue;\n    }\n  }\n\n  function getFromDataCache(key) {\n    var service = this;\n\n    return service.dataCache[key];\n  }\n\n  function matchIntStrIndex(exp) {\n    return exp.match(/\\[(-?\\d+|\".*\"|'.*')]/);\n  }\n\n  function matchNestedExpression(exp) {\n    let [toReplace] = matchIntStrIndex(exp) || [];\n    const replaced = [];\n\n    while(toReplace) {\n      replaced.push(toReplace);\n      exp = exp.replace(toReplace, `ff_r${replaced.length - 1}_ff`);\n      [toReplace] = matchIntStrIndex(exp) || [];\n    }\n\n    const match = exp.match(/\\[([^[\\]]+)]([^[\\]]*)/);\n\n    return match &&\n      replaced.length ?\n      match.map((exp) => {\n        let [toReplace, index] = exp.match(/ff_r(\\d+)_ff/) || [];\n        while(toReplace) {\n          exp = exp.replace(toReplace, replaced[index]);\n          [toReplace, index] = exp.match(/ff_r(\\d+)_ff/) || [];\n        }\n        return exp;\n      }) :\n      match;\n  }\n\n  function resolveNestedExpressions(exp, depth) {\n    const service = this;\n    let [, nested] = matchNestedExpression(exp) || [];\n\n    while(nested) {\n      const parsed = service.parseExpression(nested, depth).get();\n      const keyVal = _.isUndefined(parsed) ?\n        '' :\n        _.isString(parsed) ?\n          `\"${parsed}\"` :\n          parsed;\n      exp = exp.replace(`[${nested}]`, `[${keyVal}]`);\n      [, nested] = matchNestedExpression(exp) || [];\n    }\n\n    return exp;\n  }\n\n  function parseExpression(exp, depth) {\n    const service = this;\n    \n    if(!_.isString(exp) && !_.isArray(exp)) {\n      return { get: () => exp };\n    }\n\n    // if expression is specific value\n    if(/^(null|false|true|undefined|'[^\\']*'|\"[^\\\"]*\"|-?[0-9.]+|\\[]|\\{})$/.test(exp)) {\n      return {\n        \"get\": function() {\n          if(!exp) return exp;\n          const isStr = exp.match(/\"([^\\\"]*)\"/) || exp.match(/'([^\\']*)'/);\n          if(isStr) return isStr[1];\n          switch(exp) {\n            case 'null': return null;\n            case 'false': return false;\n            case 'true': return true;\n            case 'undefined': return;\n            case '[]': return [];\n            case '{}': return {};\n            default: return parseFloat(exp);\n          }\n        }\n      };\n    }\n\n    exp = service.getKey(exp);\n\n    const match = exp.match(/^(model\\.)?(\\S+)$/);\n\n    const modelValue = {\n      get() {\n        let resolved = service.resolveNestedExpressions(exp, depth);\n        let path = ObjectPath.parse(resolved);\n        let start = depth || service;\n\n        while(start && path.length > 1) {\n          start = start[path.shift()];\n        }\n\n        return start && start[path[0]];\n      },\n\n      getAssignable() {\n        let resolved = service.resolveNestedExpressions(exp, depth);\n        let path = ObjectPath.parse(resolved);\n        let progress = [];\n        let start = depth || service;\n\n        while(start && path.length > 1) {\n          let key = path.shift();\n          progress.push(key);\n          if(!start[key]) {\n            if(/^\\d?$/.test(path[0])) {\n              start[key] = [];\n            }\n            else {\n              start[key] = {};\n            }\n          }\n          start = start[key];\n        }\n\n        return {\n          obj: start,\n          key: path[0],\n          path: service.getKey(progress),\n          fullPath: service.getKey(progress.concat(path.slice(0, 1)))\n        };\n      },\n\n      set(val, options = {}) {\n        let resolved = service.resolveNestedExpressions(exp, depth);\n        let path = ObjectPath.parse(resolved);\n        let assignable = this.getAssignable();\n        if(val === 'remove') {\n          delete assignable.obj[assignable.key];\n        }\n        else {\n          assignable.obj[assignable.key] = val;\n        }\n        if(options.silent) {\n          service.silenceListeners(resolved, depth);\n          service.skipDefaults(resolved);\n        }\n        return val;\n      },\n\n      path() {\n        return {\n          exp: exp,\n          depth: depth,\n          key: match[2]\n        };\n      }\n    };\n\n    return modelValue;\n  }\n\n  function silenceListeners(keyStart, depth) {\n    const service = this;\n    _.each(service.listeners, (listener, key) => {\n      if(key.indexOf(keyStart) === 0) {\n        listener.prev = angular.copy(service.parseExpression(key, depth).get());\n      }\n    });\n  }\n\n  // TODO -- extend this to support nested array keys\n  // e.g. \"creative[1].childAttachments[0].callToAction\"\n  function skipDefaults(keyStart) {\n    const service = this;\n    const index = keyStart.match(/\\[\\d*\\]/) ? getArrayIndex(keyStart) : null;\n    const ks = stripIndexes(keyStart);\n    _.each(service.formCache, (form, key) => {\n      if (key.startsWith(ks)) {\n        const indexedKey = service.setArrayIndex(key, index); \n        service.skipDefault[indexedKey] = true;\n      }\n    });\n  }\n\n  function processArray(array) {\n    var service = this;\n    var key = service.getKey(array.key);\n\n    array.sortOptions = {\n      update: function(e, ui) {\n        let listener = service.arrayListeners[`${key}.length`];\n        listener.handlers.forEach(handler => {\n          handler(listener.prev, listener.prev, true);\n        });\n      }\n    };\n\n    service.processSection(array);\n  }\n\n  function processSection(section, secondPass) {\n    var service = this;\n    // if we're here because a parent's scope was emitted, \n    // scope for this section will soon be emitted, so can skip\n    if(secondPass) return; \n    _.each(section.items, service.processField.bind(service));\n  }\n\n  function processComponent(component) {\n    var service = this;\n\n    component.type = 'section';\n    component.htmlClass = 'row';\n\n    var cols = 12 / _.reject(component.items, 'hidden').length;\n\n    _.each(component.items, function(field, i) {\n      service.processField(field);\n      component.items[i] = {\n        type: 'section',\n        htmlClass: 'col-sm-' + cols,\n        items: [field]\n      };\n    });\n  }\n\n  function processCurrency(field) {\n    field.currencyFormat = {\n      'currency-dollars': 'dollars',\n      'currency-microcents': 'microcents',\n      'currency': 'cents'\n    }[field.schema.format];\n\n    field.type = 'cn-currency';\n  }\n\n  function processPercentage(field) {\n    field.type = 'cn-percentage';\n  }\n\n  function processReusable(field) {\n    var service = this;\n    field.type = 'cn-reusable';\n    field.view = field.view || 'new';\n    field.items.forEach(service.processField.bind(service));\n    field.items = [{\n      type: 'section',\n      items: field.items,\n      condition: '!model.' + service.getKey(field.key) + '.id'\n    }];\n  }\n\n  function processMediaUpload(field) {\n    var service = this;\n    field.type = 'cn-mediaupload';\n    _.each(field.data, function(dataProp, key) {\n      field.data[key] = service.parseExpression(dataProp).get();\n    });\n  }\n\n  function processCsvUpload(field) {\n    var service = this;\n    field.type = 'cn-csvupload';\n  }\n\n  function processRadios(field) {\n    field.type = 'cn-radios';\n  }\n\n  function processRadiobuttons(radios) {\n    var service = this;\n    radios.type = 'cn-radiobuttons';\n    if(radios.fullWidth) {\n      radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n    }\n  }\n\n  function processDate(date) {\n    var service = this;\n    date.type = 'cn-datetimepicker';\n\n    if(date.schema.format === 'time-minutes') {\n      date.maxView = 'hour';\n      date.iconClass = 'fa fa-clock-o';\n\n      date.modelFormatter = val => {\n        if(!val) return;\n\n        let m = moment(val);\n\n        return _.add(_.multiply(m.hours(), 60), m.minutes());\n      };\n\n      date.modelParser = val => {\n        if(!val) return;\n\n        let d = parseInt(val);\n        let hours = _.floor(d / 60);\n        let minutes = d % 60;\n\n        return moment().startOf('day').add('hours', hours).add('minutes', minutes);\n      };\n\n      date.viewFormatter = val => {\n        if(!val) return;\n\n        return date.modelParser(val).format(date.dateFormat);\n      };\n\n      date.viewParser = val => {\n        if(!val) return;\n\n        let match = val.match(/^(\\d{1,2}):?(\\d{1,2})? (a|p)/);\n        if(!match) return;\n\n        let hours = _.add(match[1] === '12' ? 0 : match[1], match[3] === 'a' ? 0 : 12);\n        let minutes = match[2] || '00';\n\n        if(minutes.length === 1) minutes += '0';\n\n        return _.add(_.multiply(hours, 60), minutes);\n      };\n    }\n  }\n\n  function getSelectValProp(select) {\n    let isArray = select.getSchemaType() === 'array';\n    return select.valueProperty ||\n      (isArray ? select.schema.items.type : select.schema.type) !== 'object' && 'value';\n  }\n\n  function getAllowedSelectValue(select, val, titleMap) {\n    titleMap = titleMap || select.getTitleMap();\n    let valProp = getSelectValProp(select);\n    if(!valProp) return;\n\n    if(select.getSchemaType() === 'array') {\n      if(!val || !_.isArray(val)) return;\n\n      let mapVal = val.map(x => _.find(titleMap, {[valProp]: x})).filter(x => x !== undefined);\n\n      return mapVal;\n    }\n    else {\n      return _.find(titleMap, {[valProp]: val});\n    }\n  }\n\n  function processSelect(select) {\n    var service = this,\n        schema = select.schema;\n\n    if(select.titleMapResolve || select.titleMap) {\n      select.getTitleMap = () =>\n        select.titleMap || service.schema.data[select.titleMapResolve];\n\n      select.onInit = function(val, form, event, setter) {\n        // make sure we use correct value\n        var modelValue = service.parseExpression(form.key, service.model);\n        if(event === 'tag-init') {\n          let newVal = getAllowedSelectValue(select, modelValue.get());\n          if(newVal !== undefined) setter(newVal);\n        }\n      };\n    }\n\n    if(select.titleMapQuery) {\n      var key = select.titleMapQuery.params.q;\n      select.titleQuery = function(q) {\n        var params = {};\n        if(key) {\n          params[key] = q;\n        }\n        return Api.get({\n          url: select.titleMapQuery.url,\n          params: params\n        });\n      };\n\n      // wrap in string so returns truthy when compiled, but converted to number within directive\n      if(!key) select.minLookup = '0';\n\n      select.onInit = function(val, form, event, setter) {\n        if(event === 'tag-init') {\n          setter(val);\n        }\n      };\n    }\n\n    if(schema.items) {\n      var defaults = [];\n      _.each(schema.items.properties, function(schema, key) {\n        if(angular.isDefined(schema.default)) {\n          defaults.push({\n            \"key\": key,\n            default: schema.default\n          });\n        }\n      });\n      if(defaults.length) {\n        select.onAdd = function(val, form, event) {\n          if(val.value && event === 'tag-added') {\n            _.each(defaults, function(prop) {\n              if(!val.value[prop.key]) val.value[prop.key] = prop.default;\n            });\n          }\n        };\n      }\n    }\n\n    if(select.displayFormat) {\n      select.itemFormatter = service.processTemplate(select.displayFormat);\n    }\n\n    if(!select.type.includes('cn-autocomplete')) {\n      if(select.items) {\n        select.detailedList = true;\n\n        if(select.items[0].type !== 'component') {\n          if(select.items.length > 1) {\n            select.items = [{\n              type: \"component\",\n              items: select.items\n            }];\n          }\n\n          service.processFieldset(select);\n        }\n\n        select.type = 'cn-autocomplete-detailed';\n      }\n      else {\n        if(!select.selectionStyle) {\n          select.selectionStyle = select.key === 'tags' ?\n            'tags' : (select.getSchemaType() === 'array' && select.schema.maxItems !== 1) ?\n              'list' : 'select';\n        }\n        select.type = 'cn-autocomplete';\n      }\n\n      if(select.titleMapResolve) {\n        $rootScope.$on('cnFlexFormDiff:data', (e, data) => {\n          if(data[select.titleMapResolve]) {\n            let modelValue = service.parseExpression(select.key, service.model);\n            let val = modelValue.get();\n            if(val !== undefined) {\n              let valid = getAllowedSelectValue(select, val, data[select.titleMapResolve]); \n              if(valid === undefined) modelValue.set();\n            }\n          }\n        });\n      }\n\n      service.registerHandler(select.key, function(val) {\n        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n        if(form && form.$setDirty) form.$setDirty();\n      }, select.updateSchema);\n    }\n  }\n\n  function processToggle(toggle) {\n    toggle.type = 'cn-toggle';\n  }\n\n  function processHelp(help) {\n    help.htmlClass = 'help-block';\n  }\n\n  function processDisplay(display) {\n    var service = this;\n    display.type = 'cn-display';\n    display.getDisplay = service.processTemplate(display.displayFormat, true);\n  }\n\n  function processTemplate(tpl, parseScope) {\n    var service = this;\n    //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n    var processor = $interpolate;\n    return function(scope, arrayIndex) {\n      if(parseScope) {\n        if(angular.isDefined(arrayIndex)) {\n          scope = _.map(scope, function(key) {\n            return key === 'arrayIndex' ? arrayIndex : key;\n          });\n        }\n        scope = service.parseExpression(scope, service.model).get();\n      }\n      return processor(tpl)(scope);\n    };\n  }\n\n  function processTable(table) {\n    var service = this;\n    table.type = 'cn-table';\n    table.items.forEach(function(row) {\n      for (var i = 0; i < table.columns.length; i++) {\n        _.extend(row.items[i], table.columns[i]);\n        //if(row.columns[i].key) row.columns[i].key = ObjectPath.parse(row.columns[i].key);\n        service.processField(row.items[i]);\n      }\n    });\n  }\n\n  function processSelectDisplay(selectDisplay) {\n    var service = this,\n        schema = service.getSchema(selectDisplay.key),\n        selectField = _.find(selectDisplay.items, 'selectField'),\n        handler;\n\n    if(schema && schema.type === 'array') {\n      handler = service.setupArraySelectDisplay(selectDisplay, selectField);\n    } else {\n      handler = service.setupSelectDisplay(selectDisplay, selectField);\n    }\n\n    selectDisplay.selectDisplay = false;\n    service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n    //service.processField(selectDisplay);\n  }\n\n  function setupArraySelectDisplay(selectDisplay, selectField) {\n    var service = this;\n    _.each(selectDisplay.items, function(item) {\n      if(item.condition !== 'false') {\n        item.condition = 'true';\n      }\n    });\n    var handler = function(val, prev, key) {\n      var index = getArrayIndex(key);\n      _.each(selectDisplay.items, function(item) {\n        var selectKey = service.getKey(selectField.key);\n        var key = service.getKey(item.key);\n        var splitKey = ObjectPath.parse(key);\n        if(selectKey === key) return;\n        var indexedSelectKey = service.setArrayIndex(selectKey, index);\n        var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n        var formCopies = service.getArrayCopies(key);\n        if(_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          _.each(formCopies, function(copy) {\n            if(getArrayIndex(copy) == index) {\n              copy.condition = 'true';\n            }\n          });\n        } else {\n          _.each(formCopies, function(copy) {\n            if(getArrayIndex(copy) == index) {\n              copy.condition = 'false';\n              service.parseExpression(service.getKey(copy.key), service.model).set();\n            }\n          });\n        }\n      });\n    };\n    // handle legacy objects that don't have values set in the selectField\n    var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n    _.each(selectDisplay.items, function(item) {\n      var key = service.getKey(item.key);\n      var selectKey = service.getKey(selectField.key);\n      if(key === selectKey) return;\n      _.each(model, function(elem, i) {\n        var indexedKey = service.setArrayIndex(key, i);\n        var splitIndexedKey = ObjectPath.parse(indexedKey);\n        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n        var selectValue = selectModel.get();\n        var itemValue = service.parseExpression(indexedKey, service.model).get();\n        if(itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n          if(!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n          selectModel.set(selectValue);\n        }\n      });\n    });\n    // handle new objects with values set in defaults\n    var defaults = service.getSchema(selectDisplay.key).default;\n    _.each(defaults, function(elem, i) {\n      var selectKey = service.getKey(selectField.key);\n      var indexedSelectKey = service.setArrayIndex(selectKey, i);\n      var selectModel = service.parseExpression(indexedSelectKey, service.model);\n      var selectValue = selectModel.get();\n      _.each(elem, function(val, key) {\n        if(!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(key);\n        selectModel.set(selectValue);\n      });\n    });\n    // run handler once all arrayCopies have been instantiated\n    var count = 0;\n    var keyMap = _.pluck(_.reject(selectDisplay.items, {\"condition\":\"false\"}), 'key');\n    var once = $rootScope.$on('flexFormArrayCopyAdded', function(event, key) {\n      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n      if(model) {\n        var total = model.length * (keyMap.length);\n        if(_.includes(keyMap, key)) {\n          count++;\n        }\n        if(count === total) {\n          for (var i = 0; i < model.length; i++) {\n            handler(null, null, '[' + i + ']');\n          }\n          count = 0;\n        }\n      }\n    });\n    var resetCount = $rootScope.$on('flexForm.updatePage', function() {\n      count = 0;\n    });\n    service.events.push(once);\n    service.events.push(resetCount);\n    return handler;\n  }\n\n  function setupSelectDisplay(selectDisplay, selectField) {\n    var service = this;\n    var handler = function() {\n      var selectKey = service.getKey(selectField.key);\n      _.each(selectDisplay.items, function(item) {\n        var key = service.getKey(item.key);\n        var splitKey = ObjectPath.parse(key);\n        if(selectKey === key) return;\n        var selectValue = service.parseExpression(selectKey, service.model).get();\n        if(_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          item.condition = 'true';\n        } else {\n          item.condition = 'false';\n          service.parseExpression(key, service.model).set();\n        }\n      });\n    };\n    // handle legacy objects that don't have values set in the selectField\n    var selectKey = service.getKey(selectField.key);\n    var selectModel = service.parseExpression(selectKey, service.model);\n    var selectValue = selectModel.get();\n    _.each(selectDisplay.items, function(item) {\n      var key = service.getKey(item.key);\n      if(selectKey === key) return;\n      var splitKey = ObjectPath.parse(key);\n      var itemValue = service.parseExpression(key, service.model).get();\n      if(itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n        if(!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(splitKey[splitKey.length - 1]);\n        selectModel.set(selectValue);\n      }\n    });\n    // handle new objects with values set in the defaults\n    var defaults = service.getSchema(selectDisplay.key).default;\n    _.each(defaults, function(val, key) {\n      if(!selectValue) {\n        selectValue = [];\n      }\n      selectValue.push(key);\n      selectModel.set(selectValue);\n    });\n    // set default values here\n    var model = service.parseExpression(selectDisplay.key, service.model);\n    if(defaults && !model.get()) {\n      model.set(defaults);\n    }\n\n    return handler;\n  }\n\n  function setupSchemaRefresh(refresh) {\n    var service = this;\n    service.refreshSchema = _.debounce(function(updateSchema) {\n      var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n      var diff = cnUtil.diff(service.schema.params, params, true);\n      var keys;\n\n      if(diff || updateSchema) {\n        if(updateSchema) params.updateSchema = updateSchema;\n        else {\n          keys = _.keys(diff);\n\n          if(keys.length > 1) {\n            diff = _.omit(diff, _.isNull);\n            keys = _.keys(diff);\n          }\n\n          params.updateSchema = _.first(keys);\n        }\n\n        if(!params.updateSchema) {\n          diff = cnUtil.diff(params, _.omit(service.schema.params, 'updateSchema'));\n          keys = _.keys(diff);\n\n          params.updateSchema = _.first(keys);\n        }\n\n        refresh(params).then(function(schema) {\n          ++service.updates;\n          //service.updateSchema(schema);\n          service.processUpdatedSchema(schema);\n        });\n      }\n    }, 100);\n\n    service.refreshData = _.debounce(function() {\n      refresh(_.extend(service.schema.params, {updateSchema: 'refreshData'}))\n        .then(function(schema) {\n          service.processUpdatedSchema(schema);\n        });\n    }, 100);\n\n    service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n  }\n\n  function processUpdatedSchema(schema) {\n    var service = this;\n    if(schema.diff) {\n      service.schema.params = schema.params;\n\n      if(schema.diff.data) {\n        $rootScope.$broadcast('cnFlexFormDiff:data', schema.diff.data);\n        _.each(schema.diff.data, (data, prop) => {\n          if(data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n            data.data = service.schema.data[prop].data.concat(data.data);\n          }\n          service.schema.data[prop] = data;\n          if(service.resolveRegister[prop]) {\n            _.each(service.resolveRegister[prop], (registers) => {\n              registers.forEach(register => {\n                service.handleResolve(register.field, register.prop, register.exp);\n              });\n            });\n          }\n        });\n      }\n\n      var keys = [];\n\n      if(schema.diff.schema) {\n        $rootScope.$broadcast('cnFlexFormDiff:schema', schema.diff.schema);\n        _.each(schema.diff.schema, function(schema, key) {\n          service.schema.schema.properties[key] = schema;\n          reprocessSchema(schema, key, keys);\n        });\n      }\n\n      if(schema.diff.form) {\n        $rootScope.$broadcast('cnFlexFormDiff:form', schema.diff.form);\n        _.each(schema.diff.form, function(form) {\n\n          if(keys.indexOf(form.key) === -1) {\n            keys.push(form.key);\n          }\n\n          // don't want to override key when extending cached objects\n          //var key = form.key;\n          //delete form.key;\n\n          var cached = service.getFromFormCache(form.key);\n          if(cached) {\n            service.reprocessField(cached, form);\n          }\n          var copies = service.getArrayCopies(form.key);\n          if(copies) {\n            copies.forEach(copy => copy && service.reprocessField(copy, form));\n          }\n        });\n      }\n\n      if(keys.length) {\n        _.each(keys, function(key) {\n          var form = service.getFromFormCache(key);\n          if(form) service.processField(form);\n          if(key.includes('[]')) {\n            var copies = service.getArrayCopies(key);\n            _.each(copies, function(copy) {\n              if(copy) service.processField(copy);\n            });\n          }\n        });\n      }\n\n      service.broadcastErrors();\n    }\n    else {\n      service.updateSchema(schema);\n    }\n  }\n\n  function reprocessField(current, update, isChild) {\n    var service = this;\n\n    // other logic in the service will add conition = 'true' to force\n    // condition to eval true, so we set the update condition to 'true'\n    // before comparing\n    if(!update.condition && current.condition) update.condition = 'true';\n    let redraw = !isChild && current.condition !== update.condition;\n\n    _.extend(current, _.omit(update, 'items', 'key'));\n\n    current._ogKeys.forEach(key => {\n      if(!update[key]) delete current[key];\n    });\n    current._ogKeys = _.keys(update);\n\n    service.deregisterHandlers(update.key);\n\n    $rootScope.$broadcast('cnFlexFormReprocessField', update.key);\n\n    // why do we redraw? If we're doing it to show error message\n    // that has been addressed from the angular-schema-form library\n    // if there's another issue, try triggering the specific action required\n    // instead of redrawing the whole form\n    if(redraw && current.redraw) {\n      console.log('TODO: see if this can be removed'); \n      current.redraw();\n    }\n  }\n\n  function reprocessSchema(schema, key, keys) {\n    keys.push(key);\n    if(schema.properties) {\n      _.each(schema.properties, function(schema, subKey) {\n        reprocessSchema(schema, key + '.' + subKey, keys);\n      });\n    }\n    if(schema.items && schema.items.properties) {\n      _.each(schema.properties, function(schema, subKey) {\n        reprocessSchema(schema, key + '[].' + subKey, keys);\n      });\n    }\n  }\n\n  function buildError(field) {\n    var service = this;\n    var key = service.getKey(field.key);\n    return {\n      key: key,\n      message: field.error\n    };\n  }\n\n  function broadcastErrors() {\n    var service = this;\n    $timeout(function() {\n      service.errors.forEach(function(error) {\n        $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n      });\n    }, 1);\n  }\n\n  function replaceArrayIndex(resolve, key) {\n    while(resolve.includes('arrayIndex')) {\n      if(_.isNumber(key)) return resolve.replace(/arrayIndex/g, key);\n      const arrayIndexKey = /([^.[]*)\\[arrayIndex\\]/.exec(resolve);\n      const re = new RegExp(arrayIndexKey[1] + '\\\\[(-?\\\\d+)\\\\]');\n      const index = re.exec(key);\n      if(!index) return resolve;\n      resolve = resolve.replace(new RegExp(arrayIndexKey[0].replace(/(\\[|\\])/g, '\\\\$1'), 'g'), index[0]);\n    }\n    return resolve;\n  }\n\n  function getArrayIndex(key) {\n    if(_.isObject(key)) {\n      return _.find(key.key, function(key) {\n        return _.isNumber(key);\n      });\n    } else {\n      return /\\[(\\d+)\\]/.exec(key)[1];\n    }\n  }\n\n  function setArrayIndex(key, index, asArray) {\n    var service = this;\n    var keyCopy;\n    if(_.isString(key)) {\n      keyCopy = ObjectPath.parse(key);\n    } else {\n      keyCopy = _.clone(key);\n    }\n    var indexOfIndex = keyCopy.indexOf('');\n    keyCopy[indexOfIndex] = index;\n\n    if(asArray) {\n      return keyCopy;\n    } else {\n      return service.getKey(keyCopy);\n    }\n  }\n\n  function cleanup() {\n    var service = this;\n    _.each(service.events, function(listener) {\n      listener();\n    });\n  }\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormService', cnFlexFormServiceProvider);\n\nexport default cnFlexFormServiceProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form.service.js","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"objectpath\"\n// module id = 7\n// module chunks = 0","const modalMap = {};\nconst promiseMap = {};\n\nfunction getPromises(state) {\n  if(promiseMap[state]) return promiseMap[state];\n\n  const promise = {};\n  promiseMap[state] = promise;\n  return promise;\n}\n\nfunction getPromise(state, id, $q) {\n  const promises = getPromises(state);\n  if(promises[id]) return promises[id];\n\n  const promise = $q.defer();\n  promises[id] = promise;\n  return promise;\n}\n\nfunction cnFlexFormModalLoaderServiceProvider() {\n\n  return {\n    addMapping,\n    $get: cnFlexFormModalLoaderService\n  };\n\n  ////////////\n\n  function addMapping(state, def) {\n    def.resolve = { parent };\n    modalMap[state] = def;\n  }\n\n  function parent($stateParams, $q) {\n    'ngInject';\n\n    return (\n      getPromise($stateParams.modal, $stateParams.modalId, $q)\n      .promise\n      .then(({ parent }) => parent)\n    );\n  }\n}\n\nfunction cnFlexFormModalLoaderService($stateParams, $q) {\n  'ngInject';\n\n  return {\n    getMapping,\n    resolveMapping\n  };\n\n  /////////////\n\n  function resolveMapping(state, id, parent, options = {}) {\n    const { scope } = options;\n    if(scope) {\n      scope.options = scope.options || {};\n      scope.options.destroyStrategy = 'retain';\n      modalMap[state].scope = scope;\n    }\n    const d = getPromise(state, id, $q);\n    d.resolve({ parent, options });\n    return d.promise;\n  }\n\n  function getMapping(state) {\n    const d = $q.defer();\n    getPromise($stateParams.modal, $stateParams.modalId, $q)\n      .promise\n      .then(({ parent, options }) => {\n        d.resolve({ state: modalMap[state], options });\n        return parent;\n      });\n    return d.promise;\n  }\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider);\n\nexport default cnFlexFormModalLoaderServiceProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-modal-loader.service.js","function FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams) {\n  'ngInject';\n\n  const vm = this;\n\n  activate();\n\n  //////////\n\n  function activate() {\n    FlexFormModal\n      .open(vm)\n      .then(({ modal, options: { onDismiss, onAfterDismiss } }) => {\n        vm.modal = modal;\n        vm.modal.result.finally(goBack);\n\n        if(onDismiss) vm.modal.result.catch(() => onDismiss($stateParams.restParams));\n        vm.dismissEvent = $rootScope.$on('$stateChangeStart', dismissModal);\n      });\n  }\n\n  function goBack() {\n    if(!$state.transition) {\n      $state.go('^');\n    }\n  }\n\n  function dismissModal() {\n    console.log('dismissModal');\n    // unbind event\n    vm.dismissEvent();\n    vm.modal.dismiss();\n  }\n}\n\nfunction FlexFormModal(cnFlexFormModalLoaderService, $uibModal, $stateParams) {\n  'ngInject';\n\n  return { open };\n\n  ////////////\n  \n  function open() {\n    return (\n      cnFlexFormModalLoaderService\n        .getMapping($stateParams.modal)\n        .then(({ state, options }) => ({\n          modal: $uibModal.open(state),\n          options \n        }))\n    );\n  }\n\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.controller('FlexFormModalLoader', FlexFormModalLoader)\n    //.factory('FlexFormModal', FlexFormModal);\n\nexport { FlexFormModalLoader, FlexFormModal };\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-modal-loader.js","function cnFlexForm() {\n  return {\n    restrict: 'E',\n    template: `\n      <div ng-if=\"vm.showForm()\">\n        <ng-form \n          class=\"clearfix\"\n          name=\"{{vm.formName}}\"\n          sf-schema=\"vm.config.schema.schema\"\n          sf-form=\"vm.form\"\n          sf-model=\"vm.model\">\n        </ng-form>\n        <!-- debug panel to display model -->\n        <section ng-if=\"vm.debug\">\n          <json-explorer json-data=\"vm.model || '...model not loaded yet'\"/>\n        </section>\n      </div>\n    `,\n    scope: {\n      config: '=ffConfig',\n      model: '=ffModel',\n      formIndex: '=ffFormIndex',\n      formName: '=ffFormName',\n      delayForm: '=ffDelayForm',\n      cleanupEvent: '=ffCleanupEvent'\n    },\n    controller: FlexForm,\n    controllerAs: 'vm',\n    bindToController: true\n  };\n}\n\nfunction FlexForm(cnFlexFormService, $scope, $location) {\n  'ngInject';\n\n  var vm = this;\n  vm.service = undefined;\n  vm.events = [];\n\n  vm.activate = activate;\n  vm.cleanup = cleanup;\n  vm.process = process;\n  vm.showForm = showForm;\n\n  vm.events.push($scope.$watch(function() { return vm.config.schema; }, vm.process));\n\n  vm.activate();\n\n  $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\n  //////////\n\n  function activate() {\n    if(angular.isNumber(vm.formIndex)) {\n      vm.form = vm.config.schema.forms[vm.formIndex].form;\n    }\n    else {\n      vm.form = vm.config.schema.form;\n    }\n\n    // debug\n    if($location.search().debug) {\n      vm.debug = true;\n    }\n  }\n\n  function process(cur, prev) {\n    if(vm.form) {\n      if(!vm.service) {\n        vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n          formCtrl: vm.config.formCtrl,\n          getSchema: vm.config.getSchema,\n          updateSchema: updateSchema\n        });\n      }\n      else {\n        console.log('vm.service.isCompiled():', vm.service.isCompiled());\n        vm.service.compile(vm.config.schema, vm.model);\n      }\n      //$scope.$broadcast('schemaFormRedraw');\n    }\n  }\n\n  function showForm() {\n    return !vm.delayForm && vm.service && vm.service.isCompiled();\n  }\n\n  function updateSchema(schema) {\n    vm.config.schema = schema;\n    vm.activate();\n  }\n\n  function cleanup() {\n    _.each(vm.events, function(listener) {\n      listener();\n    });\n    vm.service.cleanup();\n  }\n\n}\n\nexport default cnFlexForm;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form.directive.js","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 11\n// module chunks = 0","function cnFlexFormHeader() {\n  return {\n    restrict: 'E',\n    scope: {\n      config: '=ffHeaderConfig',\n      submit: '&ffSubmit',\n      loadOffscreen: '&ffLoadOffscreen'\n    },\n    controller: FlexFormHeader,\n    bindToController: true,\n    controllerAs: 'vm',\n    template: `\n        <div class=\"col-md-6\">\n          <h5 ng-if=\"vm.title.lead\">{{::vm.title.lead}}</h5>\n          <h1>\n            <i ng-show=\"vm.title.icon\" class=\"{{vm.title.icon}}\"/>\n            {{vm.title.main}}\n          </h1>\n          <h5 ng-if=\"vm.title.sub\">{{::vm.title.sub}}</h5>\n        </div>\n        <div class=\"{{vm.buttonContainerClass || 'page-action-btns'}}\">\n          <div class=\"btn-options\"\n               ng-mouseover=\"vm.loadOffscreen()\">\n            <a class=\"btn btn-{{vm.returnStyle ? vm.returnStyle : 'default-dark'\"\n               ng-if=\"vm.returnState\"\n               ui-sref=\"{{vm.returnState}}\">\n              {{vm.returnText || 'Cancel'}}\n            </a>\n            <a class=\"btn btn-{{vm.closeButton.style ? vm.closeButton.style : 'default-dark'}}\"\n               ng-if=\"vm.closeButton\"\n               ng-click=\"vm.closeButton.handler()\">\n               Cancel\n            </a>\n            <span ng-repeat=\"button in vm.actions\">\n              <span ng-class=\"{'btn-group': button.options}\">\n                <a class=\"btn {{button.style ? 'btn-'+button.style : ($index === vm.actions.length - 1 ? 'btn-primary' : 'btn-default-dark')}}\"\n                   ng-disabled=\"vm.isDisabled(button)\"\n                   ng-click=\"vm.submit({handler: button.handler})\"\n                   uib-tooltip=\"{{button.helptext}}\"\n                   uib-tooltip-placement=\"bottom\"\n                   ng-bind-html=\"button.text || 'Save'\">\n                </a>\n                <a class=\"btn {{button.style ? 'btn-'+button.style : ($index === vm.actions.length - 1 ? 'btn-primary' : 'btn-default-dark')}} dropdown-toggle\"\n                        ng-disabled=\"vm.isDisabled(button)\"\n                        ng-show=\"button.options\"\n                        data-toggle=\"dropdown\">\n                  <span class=\"caret\"></span>\n                </a>\n                <ul class=\"dropdown-menu\" ng-if=\"button.options\">\n                  <li ng-repeat=\"option in button.options\"\n                      ng-disabled=\"vm.isDisabled(option)\">\n                    <a ng-click=\"vm.submit({handler: option.handler})\"\n                       ng-bind-html=\"option.text\">\n                    </a>\n                  </li>\n                </ul>\n              </span>\n            </span>\n          </div>\n          <p class=\"data-updated-at text-right\"\n             id=\"data-updated-at\"\n             ng-hide=\"vm.config.noData\">\n            <a ng-click=\"vm.updateData()\">Update Data</a>\n          </p>\n        </div>`\n  };\n}\n\nfunction FlexFormHeader($scope) {\n  'ngInject';\n\n  const vm = this;\n\n  vm.updateData = updateData;\n  vm.isDisabled = isDisabled;\n\n  activate();\n\n  ///////////\n  \n  function activate() {\n    ({ title: vm.title } = vm.config);\n    ({\n      returnState: vm.returnState,\n      returnStyle: vm.returnStyle,\n      returnText: vm.returnText,\n      closeButton: vm.closeButton,\n      actions: vm.actions\n    } = vm.config.actionConfig || {});\n  }\n\n  function updateData() {\n    console.log('updateData:', updateData);\n    $scope.$emit('ffRefreshData');\n  }\n\n  function isDisabled(btnConfig) {\n    if(vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n    return false;\n  }\n}\n\n//angular\n  //.module('cn.flex-form')\n  //.directive('cnFlexFormHeader', cnFlexFormHeader);\n\nexport default cnFlexFormHeader;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-header.directive.js","function ffValidate() {\n  return {\n    restrict: 'A',\n    scope: { form: '=ffValidate' },\n    require: 'ngModel',\n    link: link\n  };\n}\n\nfunction link($scope, elem, attrs, ngModel) {\n  //console.log('$scope, ngModel:', $scope.form, ngModel);\n  if($scope.form && $scope.form.required) {\n    $scope.$watch(function() { return ngModel.$viewValue; }, function(value) {\n      // override schemaForm validation\n      ngModel.$setValidity('schemaForm', true);\n      ngModel.$setValidity('tv4-302', value);\n    });\n  }\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.directive('ffValidate', ffValidate);\n\nexport default ffValidate;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-validate.directive.js"],"sourceRoot":""}