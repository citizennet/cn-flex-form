{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///all.min.js","webpack:///webpack/bootstrap de227322bd8c52cccd54","webpack:///./src/_cn-flex-form.module.js","webpack:///./src/cn-flex-form-config.service.js","webpack:///./src/cn-flex-form-types.service.js","webpack:///./src/cn-flex-form.routes.js","webpack:///./src/schema-form-extensions.js","webpack:///./src/cn-flex-form.service.js","webpack:///external \"lodash\"","webpack:///external \"objectpath\"","webpack:///./src/cn-flex-form-modal-loader.service.js","webpack:///./src/cn-flex-form-modal-loader.js","webpack:///./src/cn-flex-form.directive.js","webpack:///./~/process/browser.js","webpack:///./src/cn-flex-form-header.directive.js","webpack:///./src/cn-flex-form-validate.directive.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_cnFlexFormConfig","_cnFlexFormConfig2","_cnFlexFormTypes","_cnFlexFormTypes2","_cnFlexForm","_schemaFormExtensions","_cnFlexForm2","_cnFlexForm3","_cnFlexFormModalLoader","_cnFlexFormModalLoader2","_cnFlexFormModalLoader3","_cnFlexForm4","_cnFlexForm5","_cnFlexFormHeader","_cnFlexFormHeader2","_cnFlexFormValidate","_cnFlexFormValidate2","angular","provider","cnFlexFormRoutesProvider","config","cnFlexFormRoutes","schemaFormConfig","run","addTemplates","FlexFormModal","controller","FlexFormModalLoader","directive","name","cnFlexFormConfigProvider","addIgnoreParam","param","ignoreParams","push","cnFlexFormConfig","$stateParams","getStateParams","_","chain","omit","v","isUndefined","isNull","$inject","$get","cnFlexFormTypesProvider","registerFieldType","fieldType","fieldTypeRegister","unshift","cnFlexFormTypes","getFieldType","field","i","l","length","condition","type","schema","includes","titleMap","titleMapResolve","titleMapQuery","format","$stateProvider","addStates","_ref","permissions","shared","controllerAs","state","_extends","url","templateUrl","assign","target","arguments","source","key","prototype","hasOwnProperty","cnFlexFormServiceProvider","tv4","addFormat","data","isString","test","extensions","each","extension","registerField","$templateCache","put","sharedAutocompleteTpl","_toConsumableArray","arr","Array","isArray","arr2","from","_defineProperty","enumerable","configurable","writable","schemaFormDecoratorsProvider","handler","fieldTypeHandlers","addMapping","createDirective","CNFlexFormService","Api","$parse","sfPath","$interpolate","$rootScope","$timeout","cnUtil","getService","fn","find","services","destroyService","service","cleanup","empty","remove","s","CNFlexFormConstructor","_len","args","_key","model","_args$","curService","compile","newService","CNFlexForm","debug","window","arrayCopies","arrayListeners","dataCache","defaults","errors","events","formCache","scopeCache","listeners","resolveRegister","updates","skipDefault","params","isCompiled","setupConfig","forms","form","processField","bind","initModelWatch","initArrayCopyWatch","broadcastErrors","setValue","compiled","formCtrl","updateSchema","getSchema","getSchemaForm","setupSchemaRefresh","processSchema","getSchemaType","first","processDefault","curDefault","getKey","parseExpression","modelValue","get","has","equals","isTrulyEmpty","set","copy","validationMessage","processFieldset","fieldset","items","forEach","pos","htmlClass","collapsible","toggleCollapse","collapsed","render","processFieldType","secondPass","isFunction","getOgKeys","reject","keys","isDefined","_ogKeys","addToFormCache","description","readonly","showClearAll","processFieldProps","$broadcast","getDotKey","error","buildError","isEmpty","ngModelOptions","allowInvalid","fieldPropHandlers","prop","reduce","total","next","depth","ObjectPath","parse","properties","shift","getDefault","getFromFormCache","getWatchables","exp","watchables","nested","matchNestedExpression","replaceStr","replace","concat","processResolve","resolve","dataProp","fieldProp","replaceArrayIndex","arrayIndex","handleResolve","watchable","_ref2","match","_ref3","_slicedToArray","base","registerResolve","registerHandler","skipPropHandlers","eithers","split","x","all","undefined","indexOf","genericKey","stripIndexes","cachedField","cursor","loadMore","refreshSchema","val","_ref4","fieldKey","register","processConditional","conditionals","prev","parseCondition","scope","getFromScopeCache","map","path","processFieldWatch","watch","resolution","adjustment","cur","date","units","trim","math","operator","+","-","*","/","adjuster","trigger","curCondition","updatePath","fromPath","update","moment","add","toDate","result","floor","ceil","round","initialize","startsWith","_condition$match","_condition$match2","list","predicateParams","predicateBody","generatePredicate","body","_len2","_key2","acc","processFieldUpdatedSchema","curVal","runHandler","isObject","arrMatch","registerArrayHandlers","handlers","arrKey","onArray","reorder","lastKey","deregisterHandlers","arrVal","listenerKey","deregisterArrayHandlers","item","watching","modelWatch","$watch","onModelWatch","initSchemaParams","firstUpdate","cleanModel","prevParams","listener","isInitArray","incrementUpdates","$on","event","cacheKey","uniqueId","isNumber","index","getArrayCopy","addArrayCopy","$emit","addToScopeCache","unindexedKey","copies","getArrayCopiesFor","getArrayScopes","splice","link","getArrayCopies","pluck","keyStart","filter","console","warn","addToDataCache","getFromDataCache","matchIntStrIndex","_ref5","_ref6","toReplace","replaced","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","resolveNestedExpressions","_ref13","_ref14","parsed","keyVal","_ref15","_ref16","isStr","parseFloat","resolved","start","getAssignable","_ref17","noConstruction","progress","fullPath","slice","options","_ref18","_getAssignable","silent","silenceListeners","skipDefaults","getArrayIndex","ks","k","skipKeys","indexedKey","setArrayIndex","childKeys","_loop","indexedChildKey","processArray","array","sortOptions","e","ui","processSection","section","processComponent","component","cols","processCurrency","currencyFormat","currency-dollars","currency-microcents","currency","processPercentage","processReusable","view","processMediaUpload","processCsvUpload","processRadios","processRadiobuttons","radios","fullWidth","btnClass","divide","processDate","maxView","iconClass","modelFormatter","multiply","hours","minutes","modelParser","d","parseInt","startOf","viewFormatter","dateFormat","viewParser","getSelectValProp","select","valueProperty","getAllowedSelectValue","getTitleMap","valProp","mapVal","processSelect","onInit","setter","newVal","queryParams","paramsKeys","titleQuery","q","minLookup","onAdd","displayFormat","itemFormatter","processTemplate","detailedList","destroyStrategy","selectionStyle","maxItems","valid","$setDirty","processToggle","toggle","processHelp","help","processDisplay","display","getDisplay","tpl","parseScope","processor","processTable","table","row","columns","extend","processSelectDisplay","selectDisplay","selectField","setupArraySelectDisplay","setupSelectDisplay","selectKey","splitKey","indexedSelectKey","selectValue","formCopies","elem","splitIndexedKey","selectModel","itemValue","count","keyMap","once","resetCount","refresh","debounce","diff","then","processUpdatedSchema","refreshData","reset","registers","reprocessSchema","getFormsToProcess","reprocessField","_ref19","_ref20","cached","current","isChild","redraw","log","subKey","join","message","arrayIndexKey","exec","re","RegExp","asArray","keyCopy","clone","indexOfIndex","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","done","err","TypeError","cn-radios","cn-radiobuttons","cn-autocomplete","cn-datetimepicker","cn-display","cn-currency","cn-percentage","cn-mediaupload","cn-csvupload","cn-reusable","cn-toggle","cn-table","tabarray","getPromises","promiseMap","promise","getPromise","$q","promises","defer","cnFlexFormModalLoaderServiceProvider","def","parent","modalMap","modal","modalId","cnFlexFormModalLoaderService","resolveMapping","info","getMapping","removeMapping","$state","$scope","FFModalLoaderTag","activate","open","vm","_ref$options","onDismiss","onAfterDismiss","finally","goBack","catch","restParams","dismissEvent","dismissModal","transition","go","opened","dismiss","__tag","$uibModal","process","cnFlexForm","restrict","template","formIndex","formName","delayForm","cleanupEvent","FlexForm","bindToController","cnFlexFormService","$location","cnFlexFormTag","search","showForm","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","len","Item","noop","nextTick","apply","title","browser","env","argv","version","versions","on","addListener","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","cnFlexFormHeader","submit","loadOffscreen","FlexFormHeader","ffHeaderTag","actionConfig","returnState","returnStyle","returnText","closeButton","actions","updateData","isDisabled","btnConfig","ffValidate","attrs","ngModel","ffValidateTag","required","$viewValue","$setValidity"],"mappings":"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","file":"all.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cn-flex-form\", [\"lodash\", \"objectpath\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cn-flex-form\"] = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse\n\t\troot[\"cn-flex-form\"] = factory(root[\"lodash\"], root[\"objectpath\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cn-flex-form\", [\"lodash\", \"objectpath\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cn-flex-form\"] = factory(require(\"lodash\"), require(\"objectpath\"));\n\telse\n\t\troot[\"cn-flex-form\"] = factory(root[\"lodash\"], root[\"objectpath\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _cnFlexFormConfig = __webpack_require__(1);\n\t\n\tvar _cnFlexFormConfig2 = _interopRequireDefault(_cnFlexFormConfig);\n\t\n\tvar _cnFlexFormTypes = __webpack_require__(2);\n\t\n\tvar _cnFlexFormTypes2 = _interopRequireDefault(_cnFlexFormTypes);\n\t\n\tvar _cnFlexForm = __webpack_require__(3);\n\t\n\tvar _schemaFormExtensions = __webpack_require__(4);\n\t\n\tvar _cnFlexForm2 = __webpack_require__(5);\n\t\n\tvar _cnFlexForm3 = _interopRequireDefault(_cnFlexForm2);\n\t\n\tvar _cnFlexFormModalLoader = __webpack_require__(8);\n\t\n\tvar _cnFlexFormModalLoader2 = _interopRequireDefault(_cnFlexFormModalLoader);\n\t\n\tvar _cnFlexFormModalLoader3 = __webpack_require__(9);\n\t\n\tvar _cnFlexForm4 = __webpack_require__(10);\n\t\n\tvar _cnFlexForm5 = _interopRequireDefault(_cnFlexForm4);\n\t\n\tvar _cnFlexFormHeader = __webpack_require__(12);\n\t\n\tvar _cnFlexFormHeader2 = _interopRequireDefault(_cnFlexFormHeader);\n\t\n\tvar _cnFlexFormValidate = __webpack_require__(13);\n\t\n\tvar _cnFlexFormValidate2 = _interopRequireDefault(_cnFlexFormValidate);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = angular.module('cn.flex-form', ['ui.router', 'schemaForm', 'ui.bootstrap.datetimepicker', 'cnTagsInput', 'cn.util']).provider('cnFlexFormConfig', _cnFlexFormConfig2.default).provider('cnFlexFormTypes', _cnFlexFormTypes2.default).provider('cnFlexFormRoutes', _cnFlexForm.cnFlexFormRoutesProvider).config(_cnFlexForm.cnFlexFormRoutes).config(_schemaFormExtensions.schemaFormConfig).run(_schemaFormExtensions.addTemplates).provider('cnFlexFormService', _cnFlexForm3.default).provider('cnFlexFormModalLoaderService', _cnFlexFormModalLoader2.default).factory('FlexFormModal', _cnFlexFormModalLoader3.FlexFormModal).controller('FlexFormModalLoader', _cnFlexFormModalLoader3.FlexFormModalLoader).directive('cnFlexForm', _cnFlexForm5.default).directive('cnFlexFormHeader', _cnFlexFormHeader2.default).directive('ffValidate', _cnFlexFormValidate2.default).name;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexFormConfigProvider() {\n\t\n\t  cnFlexFormConfig.$inject = [\"$stateParams\"];\n\t  var ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\t\n\t  return {\n\t    addIgnoreParam: addIgnoreParam,\n\t    $get: cnFlexFormConfig\n\t  };\n\t\n\t  ////////\n\t\n\t  function addIgnoreParam(param) {\n\t    ignoreParams.push(param);\n\t  }\n\t\n\t  function cnFlexFormConfig($stateParams) {\n\t    'ngInject';\n\t\n\t    return {\n\t      getStateParams: getStateParams,\n\t      ignoreParams: ignoreParams\n\t    };\n\t\n\t    ////////\n\t\n\t    function getStateParams() {\n\t      return _.chain($stateParams).omit(ignoreParams).omit(function (v) {\n\t        return _.isUndefined(v) || _.isNull(v);\n\t      }).value();\n\t    }\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\t\n\texports.default = cnFlexFormConfigProvider;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexFormTypesProvider() {\n\t\n\t  var fieldTypeRegister = [{\n\t    condition: function condition(field) {\n\t      return field.type === 'hidden';\n\t    },\n\t    type: 'hidden'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('radios');\n\t    },\n\t    type: 'cn-radios'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('radiobuttons');\n\t    },\n\t    type: 'cn-radiobuttons'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery;\n\t    },\n\t    type: 'cn-autocomplete'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'cn-datetimepicker' || field.type === 'datetime-local' || field.type === 'time-minutes';\n\t    },\n\t    type: 'cn-datetimepicker'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'help';\n\t    },\n\t    type: 'help'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type.includes('display');\n\t    },\n\t    type: 'cn-display'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.schema && field.schema.format && field.schema.format.includes('currency');\n\t    },\n\t    type: 'cn-currency'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.schema && field.schema.format === 'percentage';\n\t    },\n\t    type: 'cn-percentage'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'toggle' || field.type === 'boolean';\n\t    },\n\t    type: 'cn-toggle'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'mediaupload';\n\t    },\n\t    type: 'cn-mediaupload'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'csvupload';\n\t    },\n\t    type: 'cn-csvupload'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'reusable';\n\t    },\n\t    type: 'cn-reusable'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'table';\n\t    },\n\t    type: 'cn-table'\n\t  }, {\n\t    condition: function condition(field) {\n\t      return field.type === 'array';\n\t    },\n\t    type: 'array'\n\t  }];\n\t\n\t  return {\n\t    registerFieldType: registerFieldType,\n\t    $get: cnFlexFormTypes\n\t  };\n\t\n\t  ////////\n\t\n\t  function registerFieldType(fieldType) {\n\t    fieldTypeRegister.unshift(fieldType);\n\t  }\n\t\n\t  function cnFlexFormTypes() {\n\t    return {\n\t      fieldTypeRegister: fieldTypeRegister,\n\t      getFieldType: getFieldType\n\t    };\n\t\n\t    /////////\n\t\n\t    function getFieldType(field) {\n\t      for (var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n\t        if (fieldTypeRegister[i].condition(field)) {\n\t          return fieldTypeRegister[i].type;\n\t        }\n\t      }\n\t      return field.type || field.schema && field.schema.type;\n\t    }\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\t\n\texports.default = cnFlexFormTypesProvider;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tcnFlexFormRoutesProvider.$inject = [\"$stateProvider\"];\n\tcnFlexFormRoutes.$inject = [\"$stateProvider\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction cnFlexFormRoutesProvider($stateProvider) {\n\t  'ngInject';\n\t\n\t  return {\n\t    addStates: addStates,\n\t    $get: $get\n\t  };\n\t\n\t  ////////////\n\t\n\t  function $get() {\n\t    // nothing to do here, but required\n\t  }\n\t\n\t  function addStates(_ref) {\n\t    var permissions = _ref.permissions,\n\t        name = _ref.name;\n\t\n\t    var shared = {\n\t      controller: 'FlexFormModalLoader',\n\t      controllerAs: 'vm',\n\t      permissions: permissions\n\t    };\n\t    $stateProvider.state(name + '.page.modal', _extends({\n\t      url: '/~:modal/:modalId'\n\t    }, shared)).state(name + '.page.modalParams', _extends({\n\t      url: '/~:modal/:modalId/:restParams'\n\t    }, shared));\n\t  }\n\t}\n\t\n\tfunction cnFlexFormRoutes($stateProvider) {\n\t  'ngInject';\n\t\n\t  $stateProvider.state('flex-form-sandbox', {\n\t    url: '/flex-form/sandbox',\n\t    controller: 'FlexFormSandbox',\n\t    controllerAs: 'vm',\n\t    templateUrl: 'app/components/cn-flex-form/sandbox.html'\n\t  });\n\t}\n\t\n\texports.cnFlexFormRoutes = cnFlexFormRoutes;\n\texports.cnFlexFormRoutesProvider = cnFlexFormRoutesProvider;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tschemaFormConfig.$inject = [\"cnFlexFormServiceProvider\"];\n\taddTemplates.$inject = [\"$templateCache\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t//angular.module('cn.flex-form')\n\t//.config(schemaFormConfig)\n\t//.run(addTemplates);\n\t\n\tfunction schemaFormConfig(cnFlexFormServiceProvider) {\n\t  'ngInject';\n\t\n\t  tv4.addFormat({\n\t    'url': function url(data) {\n\t      return _.isString(data) && !/^(https?:\\/\\/.{2}|$)/.test(data) && 'invalid url';\n\t    }\n\t  });\n\t\n\t  var extensions = ['cn-fieldset', 'cn-toggle', 'cn-datetimepicker', 'cn-autocomplete', 'cn-autocomplete-detailed', 'cn-currency', 'cn-radios', 'cn-radiobuttons', 'cn-percentage', 'cn-display', 'cn-mediaupload', 'cn-csvupload', 'cn-reusable', 'cn-table'];\n\t\n\t  _.each(extensions, function (extension) {\n\t    cnFlexFormServiceProvider.registerField({\n\t      type: extension,\n\t      templateUrl: 'app/components/cn-flex-form/forms/' + extension + '.html'\n\t    });\n\t  });\n\t}\n\t\n\tfunction addTemplates($templateCache) {\n\t  'ngInject';\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-toggle.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n        <div class=\"clearfix\">\\n          <cn-toggle-switch\\n            class=\"pull-left\"\\n            ng-show=\"form.key\"\\n            ng-model-options=\"form.ngModelOptions\"\\n            ng-model=\"$$value$$\"\\n            sf-changed=\"form\"\\n            schema-validate=\"form\"\\n            on-value=\"form.onValue\"\\n            off-value=\"form.offValue\"\\n            read-only=\"form.readonly\"\\n            undefined-class=\"form.undefinedClass\"/>\\n          <span ng-show=\"form.onText && form.offText\">\\n            {{$$value$$ === form.onValue ? form.onText : form.offText}}\\n          </span>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-datetimepicker.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               for=\"{{form.key.join(\\'.\\')}}\"\\n               ng-show=\"showTitle()\">{{form.title}}</label>\\n        <cn-datetimepicker\\n          ng-show=\"form.key\"\\n          ng-model=\"$$value$$\"\\n          ng-model-options=\"form.ngModelOptions\"\\n          is-disabled=\"form.readonly\"\\n          sf-changed=\"form\"\\n          schema-validate=\"form\"\\n          input-id=\"{{form.key.join(\\'.\\')}}\"\\n          min-date=\"form.minDate\"\\n          max-date=\"form.maxDate\"\\n          max-view=\"{{form.maxView}}\"\\n          cn-date-required=\"form.required\"\\n          placeholder=\"{{form.placeholder}}\"\\n          model-type=\"{{form.schema.type}}\"\\n          model-formatter=\"form.modelFormatter\"\\n          model-parser=\"form.modelParser\"\\n          view-formatter=\"form.viewFormatter\"\\n          view-parser=\"form.viewParser\"\\n          format-string={{form.dateFormat}}\\n          icon-class={{form.iconClass}}>\\n        </cn-datetimepicker>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  var sharedAutocompleteTpl = '\\n        <tags-input\\n          ng-show=\"form.key\"\\n          ng-model=\"$$value$$\"\\n          ng-model-options=\"form.ngModelOptions\"\\n          ng-disabled=\"form.readonly\"\\n          sf-changed=\"form\"\\n          schema-validate=\"form\"\\n          input-id=\"{{form.key.join(\\'.\\')}}\"\\n          display-property=\"{{form.displayProperty || \\'name\\'}}\"\\n          value-property=\"{{form.valueProperty}}\"\\n          placeholder=\"{{form.placeholder || \\' \\'}}\"\\n          clear-on-blur=\"true\"\\n          add-on-comma=\"false\"\\n          add-from-autocomplete-only=\"{{!form.allowNew}}\"\\n          on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\\n          on-init=\"form.onInit($tag, form, $event, $setter)\"\\n          model-type=\"{{form.getSchemaType()}}\"\\n          array-value-type=\"{{form.schema.items.type}}\"\\n          hide-tags=\"{{form.detailedList}}\"\\n          tags-style=\"{{form.selectionStyle}}\"\\n          required=\"{{form.required}}\"\\n          min-length=\"{{form.minLength}}\"\\n          allowed-tags-pattern=\".*\"\\n          dropdown-icon=\"true\"\\n          item-formatter=\"form.itemFormatter\"\\n          min-tags=\"{{form.schema.minItems}}\"\\n          max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== \\'array\\' ? 1 : 0}}\"\\n          allow-bulk=\"{{form.bulkAdd}}\"\\n          bulk-delimiter=\"{{form.bulkDelimiter}}\"\\n          bulk-placeholder=\"{{form.bulkPlaceholder}}\"\\n          show-clear-all=\"{{form.showClearAll}}\"\\n          show-button=\"true\">\\n          <auto-complete\\n            source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\\n            skip-filtering=\"{{form.titleQuery ? true : false}}\"\\n            min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\\n          </auto-complete>\\n        </tags-input>';\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               for=\"{{form.key.join(\\'.\\')}}-input\"\\n               ng-show=\"showTitle()\">{{form.title}}</label>\\n        ' + sharedAutocompleteTpl + '\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete-detailed.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               for=\"{{form.key.join(\\'.\\')}}-input\"\\n               ng-show=\"showTitle()\">{{form.title}}</label>\\n        <div sf-array=\"form\">\\n          <ol class=\"list-group cn-autocomplete-list\"\\n              ng-if=\"modelArray.length\"\\n              ng-model=\"modelArray\">\\n            <li class=\"list-group-item {{form.fieldHtmlClass}}\"\\n                ng-repeat=\"item in modelArray\">\\n              <button ng-hide=\"form.readonly || form.remove === null\"\\n                      ng-click=\"deleteFromArray($index)\"\\n                      type=\"button\" class=\"close pull-right\">\\n                <span aria-hidden=\"true\">&times;</span>\\n              </button>\\n              <sf-decorator form=\"copyWithIndex($index)\"/>\\n            </li>\\n          </ol>\\n        </div>\\n        ' + sharedAutocompleteTpl + '\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-currency.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\n        <div class=\"{{form.fieldClass}} input-group\">\\n          <label class=\"input-group-addon\"\\n                 ng-disabled=\"form.readonly\"\\n                 for=\"{{form.key.join(\\'.\\')}}\">$</label>\\n          <input class=\"form-control\"\\n                 cn-currency-format=\"{{form.currencyFormat}}\"\\n                 cn-currency-placeholder=\"{{form.placeholder}}\"\\n                 ng-show=\"form.key\"\\n                 ng-model-options=\"form.ngModelOptions\"\\n                 ng-disabled=\"form.readonly\"\\n                 sf-changed=\"form\"\\n                 schema-validate=\"form\"\\n                 type=\"text\"\\n                 step=\"any\"\\n                 min=\"{{form.min}}\"\\n                 max=\"{{form.max}}\"\\n                 id=\"{{form.key.join(\\'.\\')}}\"\\n                 name=\"{{form.key.join(\\'.\\')}}\"\\n                 ng-model=\"$$value$$\">\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-radios.html', '<div class=\"form-group {{form.htmlClass}}\"\\n            ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n         <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n         <div class=\"btn-group clearfix\">\\n           <label class=\"radio radio-block\"\\n                  ng-repeat=\"item in form.titleMap\">\\n             <input type=\"radio\"\\n                    sf-changed=\"form\"\\n                    ng-disabled=\"form.readonly\"\\n                    ng-model=\"$$value$$\"\\n                    ng-model-options=\"form.ngModelOptions\"\\n                    schema-validate=\"form\"\\n                    ff-validate=\"form\"\\n                    ng-value=\"item.value\"\\n                    name=\"{{form.key.join(\\'.\\')}}\">\\n             <span class=\"radio-block-icon\" ng-if=\"item.iconClass\">\\n               <i class=\"fa fa-{{item.iconClass}} fa-lg\"></i>\\n             </span>\\n             <span ng-bind-html=\"item.name\"></span>\\n           </label>\\n         </div>\\n         <span class=\"help-block\" sf-message=\"form.description\"></span>\\n       </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-radiobuttons.html', '\\n      <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n        <div class=\"btn-group clearfix\">\\n          <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? \\'active\\' : \\'\\'}}\"\\n                 ng-repeat=\"item in form.titleMap\">\\n            <input type=\"radio\"\\n                   class=\"{{form.fieldHtmlClass}} hide\"\\n                   sf-changed=\"form\"\\n                   ng-disabled=\"form.readonly\"\\n                   ng-model=\"$$value$$\"\\n                   ng-model-options=\"form.ngModelOptions\"\\n                   schema-validate=\"form\"\\n                   ff-validate=\"form\"\\n                   ng-value=\"item.value\"\\n                   name=\"{{form.key.join(\\'.\\')}}\">\\n            <i class=\"fa fa-{{item.value}} fa-lg\"></i>\\n            <span ng-bind-html=\"item.name\"></span>\\n          </label>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-percentage.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n        <div class=\"{{form.fieldClass}} input-group\">\\n          <input class=\"form-control\"\\n                 cn-percentage-format\\n                 ng-show=\"form.key\"\\n                 ng-model-options=\"form.ngModelOptions\"\\n                 ng-disabled=\"form.readonly\"\\n                 sf-changed=\"form\"\\n                 schema-validate=\"form\"\\n                 type=\"number\"\\n                 step=\"any\"\\n                 min=\"{{form.min}}\"\\n                 max=\"{{form.max}}\"\\n                 id=\"{{form.key && form.key[0]}}\"\\n                 name=\"{{form.key && form.key[0]}}\"\\n                 ng-model=\"$$value$$\">\\n           <div class=\"input-group-addon\"\\n                  ng-disabled=\"form.readonly\"\\n                  for=\"{{form.key && form.key[0]}}\">%</div>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-display.html', '\\n      <div class=\"form-group cn-display{{form.htmlClass}}\">\\n        <input ng-show=\"form.key\"\\n               class=\"form-control\"\\n               id=\"{{form.key.join(\\'.\\')}}\"\\n               name=\"{{form.key.join(\\'.\\')}}\"\\n               ng-disabled=\"true\"\\n               value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-fieldset.html', '\\n      <fieldset \\n        ng-disabled=\"form.readonly\"\\n        class=\"schema-form-fieldset {{form.htmlClass}}\"\\n        ng-class=\"{\\'borderless\\': form.pos === 0}\">\\n        <legend ng-click=\"form.toggleCollapse(form)\"\\n                ng-class=\"{\\'sr-only\\': !showTitle(), collapsible: form.collapsible}\"\\n                ng-mouseenter=\"form.render = true\">\\n          <i ng-show=\"form.collapsible\"\\n             class=\"fa fa-caret-{{form.collapsed ? \\'right\\' : \\'down\\'}}\"></i>\\n          {{ form.title }}\\n        </legend>\\n        <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\\n        <div uib-collapse=\"form.collapsed\">\\n          <div ng-if=\"form.render\">\\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\n          </div>\\n        </div>\\n      </fieldset>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-mediaupload.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n        <media-upload ng-model=\"$$value$$\"\\n                      cn-disabled=\"form.readonly\"\\n                      cn-file-type=\"form.fileType\"\\n                      cn-upload-path=\"form.uploadPath\"\\n                      cn-data=\"form.data\"\\n                      cn-preview-path=\"form.previewPath\"\\n                      cn-model-value-key=\"form.modelValueKey\"\\n                      cn-existing-preview=\"form.existingPreview\"\\n                      ng-model-options=\"form.ngModelOptions\"\\n                      sf-changed=\"form\"\\n                      schema-validate=\"form\"\\n                      ff-form=\"form\"\\n                      class=\"clearfix\">\\n        </media-upload>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n     </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-csvupload.html', '\\n      <div class=\"form-group {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n        <csv-upload ng-model=\"$$value$$\"\\n                      cn-upload-path=\"form.uploadPath\"\\n                      ng-model-options=\"form.ngModelOptions\"\\n                      sf-changed=\"form\"\\n                      schema-validate=\"form\"\\n                      ff-form=\"form\"\\n                      class=\"clearfix\">\\n        </csv-upload>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n     </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-reusable.html', '\\n      <div class=\"form-group cn-reusable {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <label class=\"control-label\"\\n               ng-show=\"showTitle()\"\\n               for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\n        <cn-select-or\\n          ng-show=\"form.key\"\\n          select-from=\"form.library\"\\n          ng-model=\"$$value$$\"\\n          ng-model-options=\"form.ngModelOptions\"\\n          sf-changed=\"form\"\\n          schema-validate=\"form\"\\n          ff-form=\"form\"\\n          directiveId=\"form.directiveId\"\\n          item-template=\"form.itemTemplate\"\\n          toggle-text=\"form.toggleText\"\\n          disabled=\"form.readonly\"\\n          view=\"form.view\">\\n          <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\n        </cn-select-or>\\n        <p ng-if=\"form.loadMore && form.view === \\'list\\'\">\\n          <a ng-click=\"form.loadMore()\"\\n             class=\"btn btn-default btn-block\">Load More</a>\\n        </p>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t\n\t  $templateCache.put('app/components/cn-flex-form/forms/cn-table.html', '\\n      <div class=\"form-group cn-ff-table {{form.htmlClass}}\"\\n           ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n        <h6>{{form.title}}</h6>\\n        <div class=\"row\">\\n          <div ng-repeat=\"col in form.columns\" class=\"{{col.columnWidth}}\">\\n            <p class=\"column-header\">{{col.columnHeader}}</p>\\n          </div>\\n        </div>\\n        <div class=\"row\" ng-repeat=\"row in form.items\">\\n          <div ng-repeat=\"col in row.items\" class=\"{{col.columnWidth}}\">\\n            <sf-decorator form=\"col\"></sf-decorator>\\n          </div>\\n        </div>\\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\\n      </div>');\n\t}\n\t\n\texports.schemaFormConfig = schemaFormConfig;\n\texports.addTemplates = addTemplates;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tcnFlexFormServiceProvider.$inject = [\"schemaFormDecoratorsProvider\", \"cnFlexFormTypesProvider\"];\n\tCNFlexFormService.$inject = [\"Api\", \"$parse\", \"cnFlexFormConfig\", \"cnFlexFormTypes\", \"sfPath\", \"$interpolate\", \"$rootScope\", \"$timeout\", \"cnUtil\", \"$stateParams\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\t// Need these modules for test bundle\n\tvar _ = typeof window !== 'undefined' && window._ || __webpack_require__(6);\n\tvar ObjectPath = typeof window !== 'undefined' && window.ObjectPath || __webpack_require__(7);\n\t\n\tvar fieldTypeHandlers = {\n\t  'fieldset': 'processFieldset',\n\t  'cn-radios': 'processRadios',\n\t  'cn-radiobuttons': 'processRadiobuttons',\n\t  'cn-autocomplete': 'processSelect',\n\t  'cn-datetimepicker': 'processDate',\n\t  'help': 'processHelp',\n\t  'cn-display': 'processDisplay',\n\t  'cn-currency': 'processCurrency',\n\t  'cn-percentage': 'processPercentage',\n\t  'cn-mediaupload': 'processMediaUpload',\n\t  'cn-csvupload': 'processCsvUpload',\n\t  'cn-reusable': 'processReusable',\n\t  'cn-toggle': 'processToggle',\n\t  'cn-table': 'processTable',\n\t  'component': 'processComponent',\n\t  'section': 'processSection',\n\t  'tabarray': 'processSection',\n\t  'array': 'processArray'\n\t};\n\t\n\tvar fieldPropHandlers = [{\n\t  prop: 'resolve',\n\t  handler: function handler(field, service) {\n\t    return service.processResolve(field);\n\t  }\n\t}, {\n\t  prop: 'selectDisplay',\n\t  handler: function handler(field, service) {\n\t    return service.processSelectDisplay(field);\n\t  }\n\t}, {\n\t  prop: 'default',\n\t  handler: function handler(field, service) {\n\t    return service.processDefault(field);\n\t  }\n\t}, {\n\t  prop: 'schema',\n\t  handler: function handler(field, service) {\n\t    return _.isUndefined(field.default) && !_.isUndefined(field.schema.default) && service.processDefault(field);\n\t  }\n\t}, {\n\t  prop: 'watch',\n\t  handler: function handler(field, service) {\n\t    return field.watch && service.processFieldWatch(field);\n\t  }\n\t}, {\n\t  prop: 'type',\n\t  handler: function handler(field, service, secondPass) {\n\t    return service.processFieldType(field, secondPass);\n\t  }\n\t}, {\n\t  prop: 'conditionals',\n\t  handler: function handler(field, service) {\n\t    return service.processConditional(field);\n\t  }\n\t}, {\n\t  prop: 'updateSchema',\n\t  handler: function handler(field, service) {\n\t    return service.processFieldUpdatedSchema(field);\n\t  }\n\t}];\n\t\n\tfunction cnFlexFormServiceProvider(schemaFormDecoratorsProvider, cnFlexFormTypesProvider) {\n\t  'ngInject';\n\t\n\t  return {\n\t    registerField: registerField,\n\t    $get: CNFlexFormService\n\t  };\n\t\n\t  //////////\n\t\n\t  function registerField(fieldType) {\n\t    if (fieldType.condition) {\n\t      cnFlexFormTypesProvider.registerFieldType({\n\t        condition: fieldType.condition,\n\t        type: fieldType.type\n\t      });\n\t    }\n\t\n\t    if (fieldType.handler) {\n\t      fieldTypeHandlers[fieldType.type] = fieldType.handler;\n\t    }\n\t\n\t    if (fieldType.templateUrl) {\n\t      schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', fieldType.type, fieldType.templateUrl);\n\t      schemaFormDecoratorsProvider.createDirective(fieldType.type, fieldType.templateUrl);\n\t    }\n\t  }\n\t}\n\t\n\tfunction CNFlexFormService(Api, $parse, cnFlexFormConfig, cnFlexFormTypes, sfPath, $interpolate, $rootScope, $timeout, cnUtil, $stateParams) {\n\t  'ngInject';\n\t\n\t  var services = [];\n\t  var prototype = {\n\t    compile: compile,\n\t    addArrayCopy: addArrayCopy,\n\t    addToDataCache: addToDataCache,\n\t    addToFormCache: addToFormCache,\n\t    addToScopeCache: addToScopeCache,\n\t    broadcastErrors: broadcastErrors,\n\t    buildError: buildError,\n\t    cleanup: cleanup,\n\t    deregisterHandlers: deregisterHandlers,\n\t    deregisterArrayHandlers: deregisterArrayHandlers,\n\t    getArrayCopy: getArrayCopy,\n\t    getArrayCopies: getArrayCopies,\n\t    getArrayCopiesFor: getArrayCopiesFor,\n\t    getArrayScopes: getArrayScopes,\n\t    getDefault: getDefault,\n\t    getFromDataCache: getFromDataCache,\n\t    getFromFormCache: getFromFormCache,\n\t    getFromScopeCache: getFromScopeCache,\n\t    getFormsToProcess: getFormsToProcess,\n\t    getKey: getKey,\n\t    getSchema: getSchema,\n\t    getWatchables: getWatchables,\n\t    handleResolve: handleResolve,\n\t    incrementUpdates: incrementUpdates,\n\t    initArrayCopyWatch: initArrayCopyWatch,\n\t    initModelWatch: initModelWatch,\n\t    initSchemaParams: initSchemaParams,\n\t    isCompiled: isCompiled,\n\t    onModelWatch: onModelWatch,\n\t    parseCondition: parseCondition,\n\t    parseExpression: parseExpression,\n\t    processArray: processArray,\n\t    processDefault: processDefault,\n\t    processDisplay: processDisplay,\n\t    processField: processField,\n\t    processFieldset: processFieldset,\n\t    processFieldProps: processFieldProps,\n\t    processFieldType: processFieldType,\n\t    processFieldUpdatedSchema: processFieldUpdatedSchema,\n\t    processFieldWatch: processFieldWatch,\n\t    processComponent: processComponent,\n\t    processConditional: processConditional,\n\t    processCurrency: processCurrency,\n\t    processPercentage: processPercentage,\n\t    processDate: processDate,\n\t    processHelp: processHelp,\n\t    processRadios: processRadios,\n\t    processRadiobuttons: processRadiobuttons,\n\t    processReusable: processReusable,\n\t    processSchema: processSchema,\n\t    processSelectDisplay: processSelectDisplay,\n\t    processResolve: processResolve,\n\t    processSection: processSection,\n\t    processSelect: processSelect,\n\t    processTable: processTable,\n\t    processTemplate: processTemplate,\n\t    processToggle: processToggle,\n\t    processUpdatedSchema: processUpdatedSchema,\n\t    processMediaUpload: processMediaUpload,\n\t    processCsvUpload: processCsvUpload,\n\t    registerArrayHandlers: registerArrayHandlers,\n\t    registerHandler: registerHandler,\n\t    registerResolve: registerResolve,\n\t    replaceArrayIndex: replaceArrayIndex,\n\t    reprocessField: reprocessField,\n\t    resolveNestedExpressions: resolveNestedExpressions,\n\t    setArrayIndex: setArrayIndex,\n\t    setupConfig: setupConfig,\n\t    setupArraySelectDisplay: setupArraySelectDisplay,\n\t    setupSelectDisplay: setupSelectDisplay,\n\t    setupSchemaRefresh: setupSchemaRefresh,\n\t    silenceListeners: silenceListeners,\n\t    skipDefaults: skipDefaults\n\t  };\n\t\n\t  function getService(fn) {\n\t    return _.find(services, fn);\n\t  }\n\t\n\t  function destroyService(fn) {\n\t    var service = getService(fn);\n\t    if (service) {\n\t      service.cleanup();\n\t      _.empty(service);\n\t      _.remove(services, function (s) {\n\t        return s === service;\n\t      });\n\t    }\n\t  }\n\t\n\t  function CNFlexFormConstructor() {\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    if (args.length > 1) {\n\t      var schema = args[0],\n\t          model = args[1],\n\t          config = args[2];\n\t    } else {\n\t      var _args$ = args[0],\n\t          schema = _args$.schema,\n\t          model = _args$.model,\n\t          config = _args$.config;\n\t    }\n\t\n\t    var curService = getService(function (service) {\n\t      return service.model === model;\n\t    });\n\t    if (curService) {\n\t      if (schema) {\n\t        curService.compile(schema, model, config);\n\t      }\n\t      return curService;\n\t    }\n\t\n\t    var newService = new CNFlexForm(schema, model, config);\n\t    services.push(newService);\n\t    return newService;\n\t  }\n\t\n\t  function CNFlexForm(schema, model, config) {\n\t\n\t    if ($stateParams.debug) {\n\t      window.services = services;\n\t    }\n\t\n\t    this.arrayCopies = {};\n\t    this.arrayListeners = {};\n\t    this.dataCache = {};\n\t    this.defaults = {};\n\t    this.errors = [];\n\t    this.events = [];\n\t    this.formCache = {};\n\t    this.scopeCache = {};\n\t    this.listeners = {};\n\t    this.resolveRegister = {};\n\t    this.model = model;\n\t    this.updates = 0;\n\t    this.skipDefault = {};\n\t\n\t    this.params = cnFlexFormConfig.getStateParams();\n\t\n\t    this._ = _;\n\t\n\t    this.compile(schema, model, config);\n\t  }\n\t\n\t  _.extend(CNFlexForm.prototype, prototype);\n\t  _.extend(CNFlexFormConstructor, prototype, { getService: getService, destroyService: destroyService });\n\t\n\t  return CNFlexFormConstructor;\n\t\n\t  //////////////\n\t\n\t  function compile(schema, model, config) {\n\t    var service = this;\n\t\n\t    service.schema = schema;\n\t    service.model = model;\n\t\n\t    if (!service.isCompiled()) {\n\t      service.setupConfig(config);\n\t\n\t      if (schema.forms) {\n\t        _.each(schema.forms, function (form) {\n\t          _.each(form.form, service.processField.bind(service));\n\t        });\n\t      } else {\n\t        _.each(schema.form, service.processField.bind(service));\n\t      }\n\t\n\t      service.initModelWatch();\n\t      service.initArrayCopyWatch();\n\t      service.isCompiled(true);\n\t    }\n\t\n\t    service.broadcastErrors();\n\t  }\n\t\n\t  function isCompiled(setValue) {\n\t    var service = this;\n\t    if (setValue) {\n\t      service.schema.compiled = setValue;\n\t    }\n\t    return service.schema && service.schema.compiled;\n\t  }\n\t\n\t  function setupConfig(config) {\n\t    var service = this;\n\t    if (config) {\n\t      if (config.formCtrl) service.formCtrl = config.formCtrl;\n\t      if (config.updateSchema) service.updateSchema = config.updateSchema;\n\t      if (config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n\t    }\n\t  }\n\t\n\t  function processSchema(field) {\n\t    var service = this;\n\t    var schema = field.schema;\n\t\n\t\n\t    field.getSchemaType = function () {\n\t      return _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n\t    };\n\t    if (!field.type) field.type = field.getSchemaType && field.getSchemaType();\n\t  }\n\t\n\t  function processDefault(field) {\n\t    var service = this;\n\t    var schema = field.schema;\n\t\n\t    var curDefault = field.default || schema.default;\n\t    var key = service.getKey(field.key);\n\t\n\t    if (service.skipDefault[key]) {\n\t      delete service.skipDefault[key];\n\t      return;\n\t    }\n\t\n\t    // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n\t    //if(service.updates || field.default) {\n\t    if (!_.isUndefined(curDefault)) {\n\t      if (key.includes && key.includes('[]')) return;\n\t      var model = service.parseExpression(field.key, service.model);\n\t      var modelValue = model.get();\n\t      // if there's an existing default and it's the same as the current value\n\t      // update the current value to the new default\n\t      if (_.isUndefined(modelValue) || (_.has(service.defaults, key) ? angular.equals(modelValue, service.defaults[key]) : _.isTrulyEmpty(modelValue)) && !angular.equals(modelValue, curDefault)) {\n\t        //if ((\n\t        //(!_.has(service.defaults, key) && _.isTrulyEmpty(modelValue)) ||\n\t        //(_.has(service.defaults, key) && angular.equals(modelValue, service.defaults[key]))\n\t        //) && !angular.equals(modelValue, curDefault)) {\n\t        model.set(angular.copy(curDefault));\n\t      }\n\t    }\n\t    service.defaults[key] = angular.copy(curDefault);\n\t\n\t    if (schema.format === 'url' && !field.validationMessage) {\n\t      if (!field.type) field.type = 'url';\n\t      field.validationMessage = 'Must be a valid url (https://...)';\n\t    }\n\t  }\n\t\n\t  function processFieldset(fieldset) {\n\t    var service = this;\n\t\n\t    fieldset.type = 'cn-fieldset';\n\t    fieldset.items.forEach(service.processField.bind(service));\n\t\n\t    if (_.has(fieldset, 'pos') && fieldset.pos === 0) {\n\t      fieldset.htmlClass = (fieldset.htmlClass || '') + ' borderless';\n\t    }\n\t    if (fieldset.collapsible) {\n\t      fieldset.toggleCollapse = function (fieldset) {\n\t        if (fieldset.collapsible) {\n\t          fieldset.collapsed = !fieldset.collapsed;\n\t        }\n\t      };\n\t\n\t      fieldset.render = !fieldset.collapsed;\n\t    } else {\n\t      fieldset.render = true;\n\t    }\n\t  }\n\t\n\t  function processFieldType(field, secondPass) {\n\t    var service = this;\n\t    var fieldType = cnFlexFormTypes.getFieldType(field);\n\t    var handler = fieldTypeHandlers[fieldType];\n\t    if (_.isString(handler)) {\n\t      service[handler](field, secondPass);\n\t    } else if (_.isFunction(handler)) {\n\t      handler.call(service, field, secondPass);\n\t    }\n\t  }\n\t\n\t  function getOgKeys(field) {\n\t    return _.reject(_.keys(field), function (key) {\n\t      return (/^key$|^htmlClass$|^_/.test(key)\n\t      );\n\t    });\n\t  }\n\t\n\t  function processField(field, pos) {\n\t    var service = this;\n\t\n\t    if (angular.isDefined(pos)) {\n\t      field.pos = pos;\n\t    }\n\t\n\t    if (!field._ogKeys) {\n\t      field._ogKeys = getOgKeys(field);\n\t    }\n\t\n\t    var key = service.getKey(field.key);\n\t\n\t    if (key) {\n\t      service.addToFormCache(field, key);\n\t      var schema = service.getSchema(key);\n\t\n\t      if (schema) {\n\t        field.schema = schema;\n\t        if (schema.description) field.description = schema.description;\n\t        if (field.readonly && !schema.readonly) field.readonly = false;\n\t        if (schema.type === 'array' && !('showClearAll' in field)) field.showClearAll = true;\n\t      }\n\t\n\t      service.processSchema(field);\n\t    }\n\t\n\t    service.processFieldProps(field);\n\t\n\t    if (key) {\n\t      (function (key) {\n\t        if (_.find(service.errors, { key: key })) {\n\t          service.errors = _.reject(service.errors, { key: key });\n\t          $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n\t          $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n\t        }\n\t      })(getDotKey(key));\n\t\n\t      if (field.error) {\n\t        service.errors.push(service.buildError(field));\n\t        if (_.isEmpty(field.ngModelOptions)) {\n\t          field.ngModelOptions = {\n\t            allowInvalid: true\n\t          };\n\t        } else {\n\t          field.ngModelOptions.allowInvalid = true;\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function processFieldProps(field, secondPass) {\n\t    var service = this;\n\t    fieldPropHandlers.forEach(function (_ref) {\n\t      var prop = _ref.prop,\n\t          handler = _ref.handler;\n\t      return _.has(field, prop) && handler(field, service, secondPass);\n\t    });\n\t  }\n\t\n\t  function getKey(key) {\n\t    if (_.isArray(key)) {\n\t      key = _.reduce(key, function (total, next) {\n\t        return (/^(-?\\d*)$/.test(next) ? total + '[' + next + ']' : total + '.' + next\n\t        );\n\t      });\n\t    }\n\t    return key;\n\t  }\n\t\n\t  function getSchema(key, depth) {\n\t    var service = this;\n\t    if (!key) return;\n\t\n\t    key = ObjectPath.parse(service.getKey(key));\n\t    depth = depth || service.schema.schema.properties;\n\t\n\t    var first = void 0,\n\t        next = void 0;\n\t\n\t    while (key.length > 1) {\n\t      first = key[0];\n\t      next = key[1];\n\t      if (/^-?\\d*$/.test(next)) {\n\t        if (key.length === 2) {\n\t          depth = depth = depth[key.shift()];\n\t        } else {\n\t          depth = depth[key.shift()].items.properties;\n\t          key.shift();\n\t        }\n\t      } else {\n\t        depth = depth[key.shift()].properties;\n\t      }\n\t    }\n\t\n\t    // if array item\n\t    first = key[0] || 'items';\n\t\n\t    return depth[first];\n\t  }\n\t\n\t  function getDefault(field) {\n\t    var service = this;\n\t    field = field.key ? field : service.getFromFormCache(field);\n\t    return field && (angular.isDefined(field.default) ? field.default : field.schema && field.schema.default);\n\t  }\n\t\n\t  function getWatchables(exp) {\n\t    var watchables = [];\n\t    var nested = matchNestedExpression(exp);\n\t    var replaceStr = '';\n\t\n\t    while (nested) {\n\t      if (/^-?\\d+$/.test(nested[1]) || /^(\"|').*(\"|')$/.test(nested[1])) {\n\t        replaceStr = nested[0];\n\t        exp = exp.replace(nested[0], 'ff_replace_ff');\n\t      } else {\n\t        watchables.push(nested[1].replace(/ff_replace_ff/g, replaceStr));\n\t        replaceStr = '';\n\t        exp = exp.replace(nested[0], '');\n\t      }\n\t      nested = matchNestedExpression(exp);\n\t    }\n\t\n\t    return [].concat(watchables, [exp.replace(/ff_replace_ff/g, replaceStr)]);\n\t  }\n\t\n\t  function processResolve(field) {\n\t    var service = this;\n\t    var key = service.getKey(field.key);\n\t\n\t    _.each(field.resolve, function (dataProp, fieldProp) {\n\t      dataProp = replaceArrayIndex(dataProp, key || field.arrayIndex);\n\t      if (dataProp.includes('[arrayIndex]')) return;\n\t\n\t      service.handleResolve(field, fieldProp, dataProp, true);\n\t\n\t      getWatchables(dataProp).forEach(function (watchable) {\n\t        var _ref2 = watchable.match(/(schema\\.data\\.|model\\.)(\\S+)/) || [],\n\t            _ref3 = _slicedToArray(_ref2, 3),\n\t            base = _ref3[1],\n\t            exp = _ref3[2];\n\t\n\t        if (base) {\n\t          if (base === 'schema.data.') {\n\t            service.registerResolve(field, fieldProp, exp, dataProp);\n\t          } else if (base === 'model.') {\n\t            service.registerHandler(exp, function () {\n\t              service.handleResolve(field, fieldProp, dataProp);\n\t            });\n\t          }\n\t        }\n\t      });\n\t    });\n\t\n\t    return field;\n\t  }\n\t\n\t  function handleResolve(field, fieldProp, exp, skipPropHandlers) {\n\t    var service = this;\n\t    var data = void 0;\n\t    // does declarative/functional outweigh performance?\n\t    if (exp.includes(' || ')) {\n\t      var eithers = exp.split(' || ');\n\t      for (var i = 0, l = eithers.length; i < l; i++) {\n\t        var x = service.parseExpression(eithers[i]).get();\n\t        if (angular.isDefined(x)) {\n\t          data = x;\n\t          break;\n\t        }\n\t      }\n\t    } else if (exp.includes(' && ')) {\n\t      var all = exp.split(' && ');\n\t      for (var _i = 0, _l = all.length; _i < _l; _i++) {\n\t        var _x = service.parseExpression(all[_i]).get();\n\t        if (angular.isDefined(_x)) data = _x;else {\n\t          data = undefined;\n\t          break;\n\t        }\n\t      }\n\t    } else {\n\t      data = service.parseExpression(exp).get();\n\t    }\n\t\n\t    // if we're resolving from model but defaults haven't been applied yet, resolve from default itself\n\t    if (!data && exp.indexOf('model.') === 0) {\n\t      (function () {\n\t        var key = exp.replace('model.', '');\n\t        var genericKey = stripIndexes(key);\n\t        var cachedField = service.getFromFormCache(key) || service.getFromFormCache(genericKey);\n\t\n\t        data = function () {\n\t          if (cachedField && cachedField.default) return cachedField.default;\n\t          if (angular.isDefined(field.default)) return field.default;\n\t          var schema = service.getSchema(genericKey);\n\t          if (schema) return schema.default;\n\t        }();\n\t      })();\n\t    }\n\t\n\t    if (data && data.cursor) {\n\t      field.loadMore = function () {\n\t        var dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n\t        service.refreshSchema('data:' + dataProp + ':' + data.cursor);\n\t      };\n\t    } else {\n\t      delete field.loadMore;\n\t    }\n\t\n\t    var val = data && data.data ? data.data : data;\n\t    service.parseExpression(fieldProp, field).set(val);\n\t\n\t    if (!skipPropHandlers) {\n\t      fieldPropHandlers.forEach(function (_ref4) {\n\t        var prop = _ref4.prop,\n\t            handler = _ref4.handler;\n\t        return prop === fieldProp && handler(field, service);\n\t      });\n\t    }\n\t  }\n\t\n\t  function registerResolve(field, fieldProp, dataProp, exp) {\n\t    var service = this;\n\t\n\t    var fieldKey = service.getKey(field.key);\n\t    service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\t\n\t    var register = service.resolveRegister[dataProp];\n\t    register[fieldKey] = register[fieldKey] || [];\n\t    register[fieldKey].push({ field: field, prop: fieldProp, exp: exp });\n\t  }\n\t\n\t  function processConditional(field) {\n\t    var service = this;\n\t\n\t    _.each(field.conditionals, function (condition, key) {\n\t      var handler = function handler(val, prev) {\n\t        field[key] = service.parseCondition(condition);\n\t        var scope = service.getFromScopeCache(service.getKey(field.key));\n\t        if (key === 'required' && scope) {\n\t          $rootScope.$broadcast('schemaFormValidate');\n\t        }\n\t      };\n\t      field.conditionals[key].match(/model\\.([^\\s]+)/g).map(function (path) {\n\t        return path.match(/model\\.([^\\s]+)/)[1];\n\t      }).forEach(function (key) {\n\t        service.registerHandler(key, handler);\n\t      });\n\t      handler();\n\t    });\n\t  }\n\t\n\t  function processFieldWatch(field) {\n\t    var service = this;\n\t    if (!field.watch) return;\n\t\n\t    var schema = field.schema;\n\t    field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\t\n\t    _.each(field.watch, function (watch) {\n\t      if (watch.resolution) {\n\t        var adjustment;\n\t\n\t        (function () {\n\t          var condition = watch.condition;\n\t          var resolution = watch.resolution;\n\t          var handler = void 0;\n\t\n\t          if (_.isFunction(resolution)) {\n\t            handler = function handler(cur, prev) {\n\t              if (!condition || service.parseCondition(condition)) {\n\t                resolution(cur, prev);\n\t              }\n\t            };\n\t          } else {\n\t            adjustment = {};\n\t\n\t\n\t            adjustment.date = resolution.match(/\\+ ?(\\d+) (days|hours)/);\n\t\n\t            if (adjustment.date) {\n\t              adjustment.date = {\n\t                val: adjustment.date[1],\n\t                units: adjustment.date[2]\n\t              };\n\t              resolution = resolution.replace(adjustment.date.val, '').trim();\n\t            } else {\n\t              adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\t\n\t              if (adjustment.math) {\n\t                adjustment.operator = {\n\t                  '+': 'add',\n\t                  '-': 'subtract',\n\t                  '*': 'multiply',\n\t                  '/': 'divide'\n\t                }[adjustment.math[1]];\n\t\n\t                adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n\t              }\n\t            }\n\t\n\t            resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n\t\n\t            handler = function handler(val, prev, key, trigger) {\n\t              var curCondition = condition && replaceArrayIndex(condition, key);\n\t              var updatePath = replaceArrayIndex(resolution[1], key);\n\t              var fromPath = replaceArrayIndex(resolution[2], key);\n\t\n\t              var update = service.parseExpression(updatePath);\n\t\n\t              // avoid loop where two watches keep triggering each other\n\t              if (trigger === update.path().key) return;\n\t              trigger = update.path().key;\n\t\n\t              var from = service.parseExpression(fromPath);\n\t\n\t              if (!condition || service.parseCondition(curCondition)) {\n\t                if (adjustment.date) {\n\t                  update.set(moment(from.get()).add(adjustment.date.val, adjustment.date.units).toDate());\n\t                } else if (adjustment.math) {\n\t                  //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n\t                  //let result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n\t                  var result = $parse(from.get() + adjustment.math[1] + adjustment.adjuster.get())();\n\t                  schema = schema || field.items && (field.items[0].schema || field.items[0].items && field.items[0].items[0].schema);\n\t                  if (field.type === 'cn-currency') {\n\t                    var p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\t\n\t                    if (adjustment.math[1] === '*') {\n\t                      result = _.floor(result, p);\n\t                    } else if (adjustment.math[1] === '/') {\n\t                      result = _.ceil(result, p);\n\t                    } else {\n\t                      result = _.round(result, p);\n\t                    }\n\t                  }\n\t                  //service.listeners[update.path().key].prev = result;\n\t                  if (service.listeners[trigger]) {\n\t                    service.listeners[trigger].trigger = key;\n\t                  }\n\t                  update.set(result || 0);\n\t                } else {\n\t                  update.set(from.get());\n\t                }\n\t              }\n\t            };\n\t          }\n\t\n\t          service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n\t        })();\n\t      }\n\t    });\n\t  }\n\t\n\t  function parseCondition(condition) {\n\t    var service = this;\n\t    if (condition.startsWith(\"_\")) {\n\t      var exp = /^_\\.(.*?)\\((.*?),[\\s(]*(.*?)\\)?\\s*=>[{\\s]*(?:return)?(.*?)\\}?\\)$/;\n\t\n\t      var _condition$match = condition.match(exp),\n\t          _condition$match2 = _slicedToArray(_condition$match, 5),\n\t          fn = _condition$match2[1],\n\t          list = _condition$match2[2],\n\t          predicateParams = _condition$match2[3],\n\t          predicateBody = _condition$match2[4];\n\t\n\t      return _[fn]($parse(list)(service), generatePredicate(predicateParams, predicateBody));\n\t    } else {\n\t      return $parse(condition)(service);\n\t    }\n\t  }\n\t\n\t  function generatePredicate(params, body) {\n\t    return function () {\n\t      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t        args[_key2] = arguments[_key2];\n\t      }\n\t\n\t      return $parse(body)(params.replace(/\\s/g, '').split(',').reduce(function (acc, cur, i) {\n\t        acc[cur] = args[i];return acc;\n\t      }, {}));\n\t    };\n\t  }\n\t\n\t  function processFieldUpdatedSchema(field) {\n\t    var service = this;\n\t    var key = service.getKey(field.key);\n\t    if (!service.updates && field.updateSchema && !service.schema.params[key]) {\n\t      // by this point defaults should be processed so we can get value directly from model\n\t      var curVal = service.parseExpression(key, service.model).get();\n\t      if (!_.isUndefined(curVal)) service.schema.params[key] = curVal;\n\t    }\n\t    service.registerHandler(field, null, field.updateSchema);\n\t  }\n\t\n\t  function registerHandler(key, handler, updateSchema, runHandler) {\n\t    var service = this;\n\t\n\t    // if field is passed instead of key\n\t    if (_.isObject(key) && !_.isArray(key)) {\n\t      if (!key.key && key.items) {\n\t        _.each(key.items, function (field) {\n\t          service.registerHandler(field, handler, field.updateSchema);\n\t        });\n\t        return;\n\t      } else {\n\t        key = key.key;\n\t      }\n\t    }\n\t\n\t    key = service.getKey(key);\n\t    var arrMatch = key.match(/(.*)\\[]\\.?(.*)/);\n\t\n\t    if (arrMatch) {\n\t      service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n\t      return;\n\t    }\n\t\n\t    var cur = service.parseExpression(key, service.model).get();\n\t    var defaultValue = _.get(service.getSchema(key), 'default');\n\t\n\t    if (!service.listeners[key]) {\n\t      var prev = angular.copy(cur);\n\t      service.listeners[key] = {\n\t        handlers: [],\n\t        updateSchema: updateSchema,\n\t        prev: prev\n\t      };\n\t    }\n\t\n\t    if (handler) {\n\t      service.listeners[key].handlers.push(handler);\n\t      if (runHandler) handler(cur, null, key);\n\t    }\n\t  }\n\t\n\t  function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n\t    var service = this;\n\t    var onArray = function onArray(cur, prev, reorder) {\n\t\n\t      if (!prev && prev !== 0 && (cur | 0) < 1) return;\n\t      var i, l, key;\n\t\n\t      if (prev > cur || reorder) {\n\t        var lastKey = fieldKey ? arrKey + '[' + (prev - 1) + '].' + fieldKey : arrKey + '[' + (prev - 1) + ']';\n\t\n\t        // only deregister handlers once each time an element is removed\n\t        if (service.listeners[lastKey]) {\n\t          for (i = 0, l = prev; i < l; i++) {\n\t            key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t            service.deregisterHandlers(key);\n\t          }\n\t        }\n\t        for (i = 0, l = cur; i < l; i++) {\n\t          key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t          service.registerHandler(key, handler, updateSchema);\n\t          //no need to call if just reregisering handlers\n\t          //if(runHandler) handler(null, null, key);\n\t        }\n\t      } else if (cur > (prev || 0)) {\n\t        for (i = prev | 0, l = cur; i < l; i++) {\n\t          key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t          service.registerHandler(key, handler, updateSchema, runHandler);\n\t          //if(runHandler) handler(null, null, key);\n\t        }\n\t      }\n\t    };\n\t\n\t    var arrVal = service.parseExpression(arrKey, service.model).get();\n\t    _.each(arrVal, function (field, i) {\n\t      var key = fieldKey ? arrKey + '[' + i + '].' + fieldKey : arrKey + '[' + i + ']';\n\t\n\t      service.registerHandler(key, handler, updateSchema);\n\t      if (runHandler) handler(null, null, key);\n\t    });\n\t\n\t    var listenerKey = arrKey + '.length';\n\t    if (service.arrayListeners[listenerKey]) {\n\t      service.arrayListeners[listenerKey].handlers.push(onArray);\n\t    } else {\n\t      service.arrayListeners[listenerKey] = {\n\t        handlers: [onArray],\n\t        prev: arrVal ? arrVal.length : 0\n\t      };\n\t    }\n\t  }\n\t\n\t  function deregisterHandlers(key) {\n\t    var service = this;\n\t\n\t    key = service.getKey(key);\n\t\n\t    var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\t\n\t    if (arrMatch) {\n\t      service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n\t      return;\n\t    }\n\t\n\t    if (service.listeners[key]) service.listeners[key].handlers = [];\n\t    //if(service.listeners[key]) delete service.listeners[key];\n\t  }\n\t\n\t  function deregisterArrayHandlers(arrKey, fieldKey) {\n\t    var service = this;\n\t\n\t    service.parseExpression(arrKey, service.model).get().forEach(function (item, i) {\n\t      fieldKey ? service.deregisterHandlers(arrKey + '[' + i + '].' + fieldKey) : service.deregisterHandlers(arrKey + '[' + i + ']');\n\t    });\n\t  }\n\t\n\t  function initModelWatch() {\n\t    var service = this;\n\t    if (service.watching) return;\n\t    if (service.modelWatch) service.modelWatch();\n\t\n\t    service.modelWatch = $rootScope.$watch(function () {\n\t      return service.model;\n\t    }, service.onModelWatch.bind(service), true);\n\t\n\t    service.initSchemaParams();\n\t    service.watching = true;\n\t    service.firstUpdate = true;\n\t  }\n\t\n\t  function onModelWatch(cur, prev) {\n\t    var service = this;\n\t    // we always run through the listeners on the first update because angular seems to mess up\n\t    // when the defaults are applied and uses the same object for both cur and prev\n\t    if (service.firstUpdate || !angular.equals(cur, prev)) {\n\t      service.firstUpdate = false;\n\t      cnUtil.cleanModel(service.model);\n\t\n\t      service.prevParams = angular.copy(service.params);\n\t\n\t      _.each(service.arrayListeners, function (listener, key) {\n\t        var val = service.parseExpression(key, service.model).get();\n\t        if (!angular.equals(val, listener.prev)) {\n\t          listener.handlers.forEach(function (handler) {\n\t            return handler(val, listener.prev);\n\t          });\n\t          listener.prev = angular.copy(val);\n\t        }\n\t      });\n\t\n\t      _.each(service.listeners, function (listener, key) {\n\t        if (listener) {\n\t          (function () {\n\t            var val = service.parseExpression(key, service.model).get();\n\t            var isInitArray = angular.equals(val, []) && !listener.prev;\n\t            if (!angular.equals(val, listener.prev) && !isInitArray) {\n\t              listener.handlers.forEach(function (handler) {\n\t                handler(val, listener.prev, key, listener.trigger);\n\t              });\n\t              listener.trigger = null;\n\t              listener.prev = angular.copy(val);\n\t            }\n\t            if (listener.updateSchema && !angular.isUndefined(val) && !isInitArray && val !== null /* &&\n\t                                                                                                   !angular.equals(val, service.getDefault(key))*/) {\n\t                service.params[key] = val;\n\t              } else {\n\t              delete service.params[key];\n\t            }\n\t          })();\n\t        }\n\t      });\n\t\n\t      if (!angular.equals(service.params, service.prevParams)) {\n\t        if (service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n\t          service.incrementUpdates();\n\t        } else {\n\t          if (_.isFunction(service.refreshSchema)) {\n\t            service.refreshSchema();\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function initSchemaParams() {\n\t    var service = this;\n\t    _.each(service.listeners, function (listener, key) {\n\t      if (listener) {\n\t        var val = service.parseExpression(key, service.model).get();\n\t        if (listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n\t          service.params[key] = val;\n\t        }\n\t      }\n\t    });\n\t  }\n\t\n\t  function stripIndexes(key) {\n\t    return key.replace(/\\[\\d+]/g, '[]');\n\t  }\n\t\n\t  function initArrayCopyWatch() {\n\t    var service = this;\n\t\n\t    service.events.push($rootScope.$on('schemaFormPropagateFormController', function (event, scope) {\n\t      var form = scope.form;\n\t\n\t      if (!form.key) {\n\t        form.cacheKey = form.type + '-' + _.uniqueId();\n\t      }\n\t      var key = form.cacheKey || service.getKey(form.key);\n\t\n\t      if (_.isNumber(scope.arrayIndex)) {\n\t        var genericKey = stripIndexes(key);\n\t        var index = scope.arrayIndex;\n\t        form.arrayIndex = index;\n\t\n\t        if (!service.getArrayCopy(genericKey, index)) {\n\t          service.processFieldProps(form, true);\n\t        }\n\t\n\t        if (!form.condition) form.condition = 'true';else if (form.condition.includes(\"arrayIndex\")) {\n\t          form.condition = service.replaceArrayIndex(form.condition, key);\n\t        }\n\t\n\t        service.addArrayCopy(scope, genericKey, index);\n\t        scope.$emit('flexFormArrayCopyAdded', genericKey);\n\t      } else {\n\t        service.addToScopeCache(scope, key);\n\t      }\n\t    }));\n\t\n\t    service.events.push($rootScope.$on('schemaFormDeleteFormController', function (event, scope, index) {\n\t      var key = service.getKey(scope.form.key);\n\t      var listener = service.listeners[key];\n\t      if (listener) listener.handlers = [];\n\t\n\t      var unindexedKey = stripIndexes(key);\n\t\n\t      // TODO -- not sure if getArrayCopiesFor is actually necessary\n\t      // we should look into where this function might be needed and\n\t      // potentially remove it\n\t      var copies = service.getArrayCopiesFor(unindexedKey);\n\t      if (!copies.length) copies.push(service.getArrayScopes(unindexedKey) || []);\n\t\n\t      copies.forEach(function (list) {\n\t        return list && list.splice(scope.arrayIndex, 1);\n\t      });\n\t\n\t      if (scope.form.link) {\n\t        var list = service.parseExpression(scope.form.link, service.model).get();\n\t        list.splice(index, 1);\n\t      }\n\t    }));\n\t  }\n\t\n\t  function addArrayCopy(form, key, index) {\n\t    var service = this;\n\t    if (!index || index < 0) index = 0;\n\t    if (!service.arrayCopies[key]) service.arrayCopies[key] = [];\n\t    service.arrayCopies[key][index] = form;\n\t    //service.arrayCopies[key].push(form);\n\t  }\n\t\n\t  function getArrayCopy(key, index) {\n\t    var service = this;\n\t    var copies = service.arrayCopies[key];\n\t    return copies && copies[index];\n\t  }\n\t\n\t  function getArrayCopies(key) {\n\t    var service = this;\n\t    return _.pluck(service.getArrayScopes(key), 'form');\n\t  }\n\t\n\t  function getArrayCopiesFor(keyStart) {\n\t    var service = this;\n\t    keyStart += '[]';\n\t\n\t    return _.filter(service.arrayCopies, function (copy, key) {\n\t      return key.includes(keyStart);\n\t    });\n\t  }\n\t\n\t  function getArrayScopes(key) {\n\t    var service = this;\n\t    return service.arrayCopies[key];\n\t  }\n\t\n\t  function addToScopeCache(scope, key) {\n\t    var service = this;\n\t    if (service.scopeCache[key]) {\n\t      console.warn('caching duplicate scope for', key);\n\t    }\n\t    return service.scopeCache[key] = scope;\n\t  }\n\t\n\t  function getFromScopeCache(key) {\n\t    var service = this;\n\t    return service.scopeCache[key];\n\t  }\n\t\n\t  function addToFormCache(field, key) {\n\t    var service = this;\n\t    key = key || service.getKey(field.key);\n\t    if (!service.getFromFormCache(key)) service.formCache[key] = field;\n\t  }\n\t\n\t  function getFromFormCache(key) {\n\t    var service = this;\n\t    return service.formCache[key];\n\t  }\n\t\n\t  function addToDataCache(key, modelValue) {\n\t    var service = this;\n\t\n\t    if (key) {\n\t      service.dataCache[key] = modelValue;\n\t    }\n\t  }\n\t\n\t  function getFromDataCache(key) {\n\t    var service = this;\n\t\n\t    return service.dataCache[key];\n\t  }\n\t\n\t  function matchIntStrIndex(exp) {\n\t    return exp.match(/\\[(-?\\d+|\".*\"|'.*')]/);\n\t  }\n\t\n\t  function matchNestedExpression(exp) {\n\t    var _ref5 = matchIntStrIndex(exp) || [],\n\t        _ref6 = _slicedToArray(_ref5, 1),\n\t        toReplace = _ref6[0];\n\t\n\t    var replaced = [];\n\t\n\t    while (toReplace) {\n\t      replaced.push(toReplace);\n\t      exp = exp.replace(toReplace, 'ff_r' + (replaced.length - 1) + '_ff');\n\t\n\t      var _ref7 = matchIntStrIndex(exp) || [];\n\t\n\t      var _ref8 = _slicedToArray(_ref7, 1);\n\t\n\t      toReplace = _ref8[0];\n\t    }\n\t\n\t    var match = exp.match(/\\[([^[\\]]+)]([^[\\]]*)/);\n\t\n\t    return match && replaced.length ? match.map(function (exp) {\n\t      var _ref9 = exp.match(/ff_r(\\d+)_ff/) || [],\n\t          _ref10 = _slicedToArray(_ref9, 2),\n\t          toReplace = _ref10[0],\n\t          index = _ref10[1];\n\t\n\t      while (toReplace) {\n\t        exp = exp.replace(toReplace, replaced[index]);\n\t\n\t        var _ref11 = exp.match(/ff_r(\\d+)_ff/) || [];\n\t\n\t        var _ref12 = _slicedToArray(_ref11, 2);\n\t\n\t        toReplace = _ref12[0];\n\t        index = _ref12[1];\n\t      }\n\t      return exp;\n\t    }) : match;\n\t  }\n\t\n\t  function resolveNestedExpressions(exp, depth) {\n\t    var service = this;\n\t\n\t    var _ref13 = matchNestedExpression(exp) || [],\n\t        _ref14 = _slicedToArray(_ref13, 2),\n\t        nested = _ref14[1];\n\t\n\t    while (nested) {\n\t      var parsed = service.parseExpression(nested, depth).get();\n\t      var keyVal = _.isUndefined(parsed) ? '' : _.isString(parsed) ? '\"' + parsed + '\"' : parsed;\n\t      exp = exp.replace('[' + nested + ']', '[' + keyVal + ']');\n\t\n\t      var _ref15 = matchNestedExpression(exp) || [];\n\t\n\t      var _ref16 = _slicedToArray(_ref15, 2);\n\t\n\t      nested = _ref16[1];\n\t    }\n\t\n\t    return exp;\n\t  }\n\t\n\t  function parseExpression(exp, depth) {\n\t    var service = this;\n\t\n\t    if (!_.isString(exp) && !_.isArray(exp)) {\n\t      return { get: function get() {\n\t          return exp;\n\t        } };\n\t    }\n\t\n\t    // if expression is specific value\n\t    if (/^(null|false|true|undefined|'[^\\']*'|\"[^\\\"]*\"|-?[0-9.]+|\\[]|\\{})$/.test(exp)) {\n\t      return {\n\t        \"get\": function get() {\n\t          if (!exp) return exp;\n\t          var isStr = exp.match(/\"([^\\\"]*)\"/) || exp.match(/'([^\\']*)'/);\n\t          if (isStr) return isStr[1];\n\t          switch (exp) {\n\t            case 'null':\n\t              return null;\n\t            case 'false':\n\t              return false;\n\t            case 'true':\n\t              return true;\n\t            case 'undefined':\n\t              return;\n\t            case '[]':\n\t              return [];\n\t            case '{}':\n\t              return {};\n\t            default:\n\t              return parseFloat(exp);\n\t          }\n\t        }\n\t      };\n\t    }\n\t\n\t    exp = service.getKey(exp);\n\t\n\t    var match = exp.match(/^(model\\.)?(\\S+)$/);\n\t\n\t    var modelValue = {\n\t      get: function get() {\n\t        var resolved = service.resolveNestedExpressions(exp, depth);\n\t        var path = ObjectPath.parse(resolved);\n\t        var start = depth || service;\n\t\n\t        while (start && path.length > 1) {\n\t          start = start[path.shift()];\n\t        }\n\t\n\t        return start && start[path[0]];\n\t      },\n\t      getAssignable: function getAssignable() {\n\t        var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t            noConstruction = _ref17.noConstruction;\n\t\n\t        var resolved = service.resolveNestedExpressions(exp, depth);\n\t        var path = ObjectPath.parse(resolved);\n\t        var progress = [];\n\t        var start = depth || service;\n\t\n\t        while (start && path.length > 1) {\n\t          var key = path.shift();\n\t          progress.push(key);\n\t          if (!start[key]) {\n\t            if (noConstruction) {\n\t              return null;\n\t            }\n\t            if (/^\\d?$/.test(path[0])) {\n\t              start[key] = [];\n\t            } else {\n\t              start[key] = {};\n\t            }\n\t          }\n\t          start = start[key];\n\t        }\n\t\n\t        return {\n\t          obj: start,\n\t          key: path[0],\n\t          path: service.getKey(progress),\n\t          fullPath: service.getKey(progress.concat(path.slice(0, 1)))\n\t        };\n\t      },\n\t      set: function set(val) {\n\t        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t        var resolved = service.resolveNestedExpressions(exp, depth);\n\t        var path = ObjectPath.parse(resolved);\n\t        if (val === 'remove') {\n\t          var _ref18 = this.getAssignable({ noConstruction: true }) || {},\n\t              obj = _ref18.obj,\n\t              key = _ref18.key;\n\t\n\t          delete service.defaults[resolved.replace('model.', '')];\n\t          if (obj) {\n\t            delete obj[key];\n\t          }\n\t        } else {\n\t          var _getAssignable = this.getAssignable(),\n\t              _obj = _getAssignable.obj,\n\t              _key3 = _getAssignable.key;\n\t\n\t          _obj[_key3] = val;\n\t        }\n\t        if (options.silent) {\n\t          service.silenceListeners(resolved, depth);\n\t          service.skipDefaults(resolved);\n\t        }\n\t        return val;\n\t      },\n\t      path: function path() {\n\t        return {\n\t          exp: exp,\n\t          depth: depth,\n\t          key: match[2]\n\t        };\n\t      }\n\t    };\n\t\n\t    return modelValue;\n\t  }\n\t\n\t  function silenceListeners(keyStart, depth) {\n\t    var service = this;\n\t    _.each(service.listeners, function (listener, key) {\n\t      if (key.indexOf(keyStart) === 0) {\n\t        listener.prev = angular.copy(service.parseExpression(key, depth).get());\n\t      }\n\t    });\n\t  }\n\t\n\t  function skipDefaults(keyStart) {\n\t    var service = this;\n\t    var index = keyStart.match(/\\[\\d*\\]/) ? getArrayIndex(keyStart) : null;\n\t    var ks = stripIndexes(keyStart);\n\t    var keys = _.filter(_.keys(service.formCache), function (k) {\n\t      return k.startsWith(ks);\n\t    });\n\t    var skipKeys = [];\n\t    _.each(keys, function (key) {\n\t      var indexedKey = service.setArrayIndex(key, index);\n\t      var model = service.parseExpression(indexedKey, service.model).get();\n\t      if (_.isArray(model)) {\n\t        var childKeys = _.filter(_.keys(service.formCache), function (k) {\n\t          return k.startsWith(key);\n\t        });\n\t\n\t        var _loop = function _loop(i) {\n\t          _.each(childKeys, function (k) {\n\t            skipKeys.push(k);\n\t            var indexedChildKey = service.setArrayIndex(k, [index, i]);\n\t            service.skipDefault[indexedChildKey] = true;\n\t          });\n\t        };\n\t\n\t        for (var i = 0; i < model.length; i++) {\n\t          _loop(i);\n\t        }\n\t      } else if (!skipKeys.includes(key)) {\n\t        service.skipDefault[indexedKey] = true;\n\t      }\n\t    });\n\t  }\n\t\n\t  function processArray(array) {\n\t    var service = this;\n\t    var key = service.getKey(array.key);\n\t\n\t    array.sortOptions = {\n\t      update: function update(e, ui) {\n\t        var listener = service.arrayListeners[key + '.length'];\n\t        listener.handlers.forEach(function (handler) {\n\t          handler(listener.prev, listener.prev, true);\n\t        });\n\t      }\n\t    };\n\t\n\t    service.processSection(array);\n\t  }\n\t\n\t  function processSection(section, secondPass) {\n\t    var service = this;\n\t    // if we're here because a parent's scope was emitted,\n\t    // scope for this section will soon be emitted, so can skip\n\t    if (secondPass) return;\n\t    _.each(section.items, service.processField.bind(service));\n\t  }\n\t\n\t  function processComponent(component) {\n\t    var service = this;\n\t\n\t    component.type = 'section';\n\t    component.htmlClass = 'row';\n\t\n\t    var cols = 12 / _.reject(component.items, 'hidden').length;\n\t\n\t    _.each(component.items, function (field, i) {\n\t      service.processField(field);\n\t      component.items[i] = {\n\t        type: 'section',\n\t        htmlClass: 'col-sm-' + cols,\n\t        items: [field]\n\t      };\n\t    });\n\t  }\n\t\n\t  function processCurrency(field) {\n\t    field.currencyFormat = {\n\t      'currency-dollars': 'dollars',\n\t      'currency-microcents': 'microcents',\n\t      'currency': 'cents'\n\t    }[field.schema.format];\n\t\n\t    field.type = 'cn-currency';\n\t  }\n\t\n\t  function processPercentage(field) {\n\t    field.type = 'cn-percentage';\n\t  }\n\t\n\t  function processReusable(field) {\n\t    var service = this;\n\t    field.type = 'cn-reusable';\n\t    field.view = field.view || 'new';\n\t    field.items.forEach(service.processField.bind(service));\n\t    field.items = [{\n\t      type: 'section',\n\t      items: field.items,\n\t      condition: '!model.' + service.getKey(field.key) + '.id'\n\t    }];\n\t  }\n\t\n\t  function processMediaUpload(field) {\n\t    var service = this;\n\t    field.type = 'cn-mediaupload';\n\t    if (!field.resolve) {\n\t      field.resolve = {};\n\t      _.each(field.data, function (exp, prop) {\n\t        return field.resolve['data.' + prop] = exp;\n\t      });\n\t    }\n\t    service.processResolve(field);\n\t  }\n\t\n\t  function processCsvUpload(field) {\n\t    var service = this;\n\t    field.type = 'cn-csvupload';\n\t  }\n\t\n\t  function processRadios(field) {\n\t    field.type = 'cn-radios';\n\t  }\n\t\n\t  function processRadiobuttons(radios) {\n\t    var service = this;\n\t    radios.type = 'cn-radiobuttons';\n\t    if (radios.fullWidth) {\n\t      radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n\t    }\n\t  }\n\t\n\t  function processDate(date) {\n\t    var service = this;\n\t    date.type = 'cn-datetimepicker';\n\t\n\t    if (date.schema.format === 'time-minutes') {\n\t      date.maxView = 'hour';\n\t      date.iconClass = 'fa fa-clock-o';\n\t\n\t      date.modelFormatter = function (val) {\n\t        if (!val) return;\n\t\n\t        var m = moment(val);\n\t\n\t        return _.add(_.multiply(m.hours(), 60), m.minutes());\n\t      };\n\t\n\t      date.modelParser = function (val) {\n\t        if (!val) return;\n\t\n\t        var d = parseInt(val);\n\t        var hours = _.floor(d / 60);\n\t        var minutes = d % 60;\n\t\n\t        return moment().startOf('day').add('hours', hours).add('minutes', minutes);\n\t      };\n\t\n\t      date.viewFormatter = function (val) {\n\t        if (!val) return;\n\t\n\t        return date.modelParser(val).format(date.dateFormat);\n\t      };\n\t\n\t      date.viewParser = function (val) {\n\t        if (!val) return;\n\t\n\t        var match = val.match(/^(\\d{1,2}):?(\\d{1,2})? (a|p)/);\n\t        if (!match) return;\n\t\n\t        var hours = _.add(match[1] === '12' ? 0 : match[1], match[3] === 'a' ? 0 : 12);\n\t        var minutes = match[2] || '00';\n\t\n\t        if (minutes.length === 1) minutes += '0';\n\t\n\t        return _.add(_.multiply(hours, 60), minutes);\n\t      };\n\t    }\n\t  }\n\t\n\t  function getSelectValProp(select) {\n\t    var isArray = select.getSchemaType() === 'array';\n\t    return select.valueProperty || (isArray ? select.schema.items.type : select.schema.type) !== 'object' && 'value';\n\t  }\n\t\n\t  function getAllowedSelectValue(select, val, titleMap) {\n\t    titleMap = titleMap || select.getTitleMap();\n\t    var valProp = getSelectValProp(select);\n\t    if (!valProp) return;\n\t\n\t    if (select.getSchemaType() === 'array') {\n\t      if (!val || !_.isArray(val)) return;\n\t\n\t      var mapVal = val.map(function (x) {\n\t        return _.find(titleMap, _defineProperty({}, valProp, x));\n\t      }).filter(function (x) {\n\t        return x !== undefined;\n\t      });\n\t\n\t      return mapVal;\n\t    } else {\n\t      return _.find(titleMap, _defineProperty({}, valProp, val));\n\t    }\n\t  }\n\t\n\t  function processSelect(select) {\n\t    var service = this,\n\t        schema = select.schema;\n\t\n\t    if (select.titleMapResolve || select.titleMap) {\n\t      select.getTitleMap = function () {\n\t        return select.titleMap || service.schema.data[select.titleMapResolve];\n\t      };\n\t\n\t      select.onInit = function (val, form, event, setter) {\n\t        // make sure we use correct value\n\t        var modelValue = service.parseExpression(form.key, service.model);\n\t        if (event === 'tag-init') {\n\t          var newVal = getAllowedSelectValue(select, modelValue.get());\n\t          if (newVal !== undefined) setter(newVal);\n\t        }\n\t      };\n\t    }\n\t\n\t    if (select.titleMapQuery) {\n\t      (function () {\n\t        var queryParams = select.titleMapQuery.params;\n\t        var paramsKeys = _.keys(queryParams);\n\t        select.showClearAll = true;\n\t        select.titleQuery = function (q) {\n\t          var params = _(paramsKeys).reduce(function (acc, key) {\n\t            if (key === 'q') {\n\t              acc[queryParams[key]] = q;\n\t            } else {\n\t              var val = service.parseExpression(queryParams[key]).get();\n\t              acc[key] = val;\n\t            }\n\t            return acc;\n\t          }, {});\n\t          return Api.get({\n\t            url: select.titleMapQuery.url,\n\t            params: params\n\t          });\n\t        };\n\t\n\t        // wrap in string so returns truthy when compiled, but converted to number within directive\n\t        if (!paramsKeys.length) select.minLookup = '0';\n\t\n\t        select.onInit = function (val, form, event, setter) {\n\t          if (event === 'tag-init') {\n\t            setter(val);\n\t          }\n\t        };\n\t      })();\n\t    }\n\t\n\t    if (schema.items) {\n\t      var defaults = [];\n\t      _.each(schema.items.properties, function (schema, key) {\n\t        if (angular.isDefined(schema.default)) {\n\t          defaults.push({\n\t            \"key\": key,\n\t            default: schema.default\n\t          });\n\t        }\n\t      });\n\t      if (defaults.length) {\n\t        select.onAdd = function (val, form, event) {\n\t          if (val.value && event === 'tag-added') {\n\t            _.each(defaults, function (prop) {\n\t              if (!val.value[prop.key]) val.value[prop.key] = prop.default;\n\t            });\n\t          }\n\t        };\n\t      }\n\t    }\n\t\n\t    if (select.displayFormat) {\n\t      select.itemFormatter = service.processTemplate(select.displayFormat);\n\t    }\n\t\n\t    if (!select.type.includes('cn-autocomplete')) {\n\t      if (select.items) {\n\t        select.detailedList = true;\n\t\n\t        if (select.items[0].type !== 'component') {\n\t          if (select.items.length > 1) {\n\t            _.each(select.items, function (i) {\n\t              return i.destroyStrategy = \"retain\";\n\t            });\n\t            select.items = [{\n\t              type: \"component\",\n\t              items: select.items\n\t            }];\n\t          }\n\t\n\t          service.processFieldset(select);\n\t        }\n\t\n\t        select.type = 'cn-autocomplete-detailed';\n\t        select.destroyStrategy = 'retain';\n\t      } else {\n\t        if (!select.selectionStyle) {\n\t          select.selectionStyle = select.key === 'tags' ? 'tags' : select.getSchemaType() === 'array' && select.schema.maxItems !== 1 ? 'list' : 'select';\n\t        }\n\t        select.type = 'cn-autocomplete';\n\t      }\n\t\n\t      if (select.titleMapResolve) {\n\t        $rootScope.$on('cnFlexFormDiff:data', function (e, data) {\n\t          if (data[select.titleMapResolve]) {\n\t            var modelValue = service.parseExpression(select.key, service.model);\n\t            var val = modelValue.get();\n\t            if (val !== undefined) {\n\t              var valid = getAllowedSelectValue(select, val, data[select.titleMapResolve]);\n\t              if (valid === undefined) modelValue.set();\n\t            }\n\t          }\n\t        });\n\t      }\n\t\n\t      service.registerHandler(select.key, function (val) {\n\t        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n\t        if (form && form.$setDirty) form.$setDirty();\n\t      }, select.updateSchema);\n\t    }\n\t  }\n\t\n\t  function processToggle(toggle) {\n\t    toggle.type = 'cn-toggle';\n\t  }\n\t\n\t  function processHelp(help) {\n\t    help.htmlClass = 'help-block';\n\t  }\n\t\n\t  function processDisplay(display) {\n\t    var service = this;\n\t    display.type = 'cn-display';\n\t    display.getDisplay = service.processTemplate(display.displayFormat, true);\n\t  }\n\t\n\t  function processTemplate(tpl, parseScope) {\n\t    var service = this;\n\t    //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n\t    var processor = $interpolate;\n\t    return function (scope, arrayIndex) {\n\t      if (parseScope) {\n\t        if (angular.isDefined(arrayIndex)) {\n\t          scope = _.map(scope, function (key) {\n\t            return key === 'arrayIndex' ? arrayIndex : key;\n\t          });\n\t        }\n\t        scope = service.parseExpression(scope, service.model).get();\n\t      }\n\t      return processor(tpl)(scope);\n\t    };\n\t  }\n\t\n\t  function processTable(table) {\n\t    var service = this;\n\t    table.type = 'cn-table';\n\t    table.items.forEach(function (row) {\n\t      for (var i = 0; i < table.columns.length; i++) {\n\t        _.extend(row.items[i], table.columns[i]);\n\t        //if(row.columns[i].key) row.columns[i].key = ObjectPath.parse(row.columns[i].key);\n\t        service.processField(row.items[i]);\n\t      }\n\t    });\n\t  }\n\t\n\t  function processSelectDisplay(selectDisplay) {\n\t    var service = this,\n\t        schema = service.getSchema(selectDisplay.key),\n\t        selectField = _.find(selectDisplay.items, 'selectField'),\n\t        handler;\n\t\n\t    if (schema && schema.type === 'array') {\n\t      handler = service.setupArraySelectDisplay(selectDisplay, selectField);\n\t    } else {\n\t      handler = service.setupSelectDisplay(selectDisplay, selectField);\n\t    }\n\t\n\t    selectDisplay.selectDisplay = false;\n\t    service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n\t    //service.processField(selectDisplay);\n\t  }\n\t\n\t  function setupArraySelectDisplay(selectDisplay, selectField) {\n\t    var service = this;\n\t    _.each(selectDisplay.items, function (item) {\n\t      if (item.condition !== 'false') {\n\t        item.condition = 'true';\n\t      }\n\t    });\n\t    var handler = function handler(val, prev, key) {\n\t      var index = getArrayIndex(key);\n\t      _.each(selectDisplay.items, function (item) {\n\t        var selectKey = service.getKey(selectField.key);\n\t        var key = service.getKey(item.key);\n\t        var splitKey = ObjectPath.parse(key);\n\t        if (selectKey === key) return;\n\t        var indexedSelectKey = service.setArrayIndex(selectKey, index);\n\t        var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n\t        var formCopies = service.getArrayCopies(key);\n\t        if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n\t          _.each(formCopies, function (copy) {\n\t            if (getArrayIndex(copy) == index) {\n\t              copy.condition = 'true';\n\t            }\n\t          });\n\t        } else {\n\t          _.each(formCopies, function (copy) {\n\t            if (getArrayIndex(copy) == index) {\n\t              copy.condition = 'false';\n\t              service.parseExpression(service.getKey(copy.key), service.model).set();\n\t            }\n\t          });\n\t        }\n\t      });\n\t    };\n\t    // handle legacy objects that don't have values set in the selectField\n\t    var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n\t    _.each(selectDisplay.items, function (item) {\n\t      var key = service.getKey(item.key);\n\t      var selectKey = service.getKey(selectField.key);\n\t      if (key === selectKey) return;\n\t      _.each(model, function (elem, i) {\n\t        var indexedKey = service.setArrayIndex(key, i);\n\t        var splitIndexedKey = ObjectPath.parse(indexedKey);\n\t        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n\t        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n\t        var selectValue = selectModel.get();\n\t        var itemValue = service.parseExpression(indexedKey, service.model).get();\n\t        if (itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n\t          if (!selectValue) {\n\t            selectValue = [];\n\t          }\n\t          selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n\t          selectModel.set(selectValue);\n\t        }\n\t      });\n\t    });\n\t    // handle new objects with values set in defaults\n\t    var defaults = service.getSchema(selectDisplay.key).default;\n\t    _.each(defaults, function (elem, i) {\n\t      var selectKey = service.getKey(selectField.key);\n\t      var indexedSelectKey = service.setArrayIndex(selectKey, i);\n\t      var selectModel = service.parseExpression(indexedSelectKey, service.model);\n\t      var selectValue = selectModel.get();\n\t      _.each(elem, function (val, key) {\n\t        if (!selectValue) {\n\t          selectValue = [];\n\t        }\n\t        selectValue.push(key);\n\t        selectModel.set(selectValue);\n\t      });\n\t    });\n\t    // run handler once all arrayCopies have been instantiated\n\t    var count = 0;\n\t    var keyMap = _.pluck(_.reject(selectDisplay.items, { \"condition\": \"false\" }), 'key');\n\t    var once = $rootScope.$on('flexFormArrayCopyAdded', function (event, key) {\n\t      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n\t      if (model) {\n\t        var total = model.length * keyMap.length;\n\t        if (_.includes(keyMap, key)) {\n\t          count++;\n\t        }\n\t        if (count === total) {\n\t          for (var i = 0; i < model.length; i++) {\n\t            handler(null, null, '[' + i + ']');\n\t          }\n\t          count = 0;\n\t        }\n\t      }\n\t    });\n\t    var resetCount = $rootScope.$on('flexForm.updatePage', function () {\n\t      count = 0;\n\t    });\n\t    service.events.push(once);\n\t    service.events.push(resetCount);\n\t    return handler;\n\t  }\n\t\n\t  function setupSelectDisplay(selectDisplay, selectField) {\n\t    var service = this;\n\t    var handler = function handler() {\n\t      var selectKey = service.getKey(selectField.key);\n\t      _.each(selectDisplay.items, function (item) {\n\t        var key = service.getKey(item.key);\n\t        var splitKey = ObjectPath.parse(key);\n\t        if (selectKey === key) return;\n\t        var selectValue = service.parseExpression(selectKey, service.model).get();\n\t        if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n\t          item.condition = 'true';\n\t        } else {\n\t          item.condition = 'false';\n\t          service.parseExpression(key, service.model).set();\n\t        }\n\t      });\n\t    };\n\t    // handle legacy objects that don't have values set in the selectField\n\t    var selectKey = service.getKey(selectField.key);\n\t    var selectModel = service.parseExpression(selectKey, service.model);\n\t    var selectValue = selectModel.get();\n\t    _.each(selectDisplay.items, function (item) {\n\t      var key = service.getKey(item.key);\n\t      if (selectKey === key) return;\n\t      var splitKey = ObjectPath.parse(key);\n\t      var itemValue = service.parseExpression(key, service.model).get();\n\t      if (itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n\t        if (!selectValue) {\n\t          selectValue = [];\n\t        }\n\t        selectValue.push(splitKey[splitKey.length - 1]);\n\t        selectModel.set(selectValue);\n\t      }\n\t    });\n\t    // handle new objects with values set in the defaults\n\t    var defaults = service.getSchema(selectDisplay.key).default;\n\t    _.each(defaults, function (val, key) {\n\t      if (!selectValue) {\n\t        selectValue = [];\n\t      }\n\t      selectValue.push(key);\n\t      selectModel.set(selectValue);\n\t    });\n\t    // set default values here\n\t    var model = service.parseExpression(selectDisplay.key, service.model);\n\t    if (defaults && !model.get()) {\n\t      model.set(defaults);\n\t    }\n\t\n\t    return handler;\n\t  }\n\t\n\t  function setupSchemaRefresh(refresh) {\n\t    var service = this;\n\t    service.refreshSchema = _.debounce(function (updateSchema) {\n\t      var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n\t      var diff = _.omit(cnUtil.diff(service.schema.params, params, true), 'updates');\n\t      var keys;\n\t\n\t      if (!_.isEmpty(diff) || updateSchema) {\n\t        if (updateSchema) params.updateSchema = updateSchema;else {\n\t          keys = _.keys(diff);\n\t\n\t          if (keys.length > 1) {\n\t            diff = _.omit(diff, _.isNull);\n\t            keys = _.keys(diff);\n\t          }\n\t\n\t          params.updateSchema = _.first(keys);\n\t        }\n\t\n\t        if (!params.updateSchema) {\n\t          diff = cnUtil.diff(params, _.omit(service.schema.params, ['updateSchema', 'updates']));\n\t          keys = _.keys(diff);\n\t\n\t          params.updateSchema = _.first(keys);\n\t        }\n\t\n\t        refresh(params).then(function (schema) {\n\t          service.incrementUpdates();\n\t          //service.updateSchema(schema);\n\t          service.processUpdatedSchema(schema);\n\t        });\n\t      }\n\t    }, 100);\n\t\n\t    service.refreshData = _.debounce(function () {\n\t      refresh(_.extend(service.schema.params, { updateSchema: 'refreshData' })).then(function (schema) {\n\t        service.processUpdatedSchema(schema);\n\t      });\n\t    }, 100);\n\t\n\t    service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n\t  }\n\t\n\t  function processUpdatedSchema(schema) {\n\t    var service = this;\n\t    if (schema.diff) {\n\t      (function () {\n\t        service.schema.params = schema.params;\n\t\n\t        if (schema.diff.data) {\n\t          $rootScope.$broadcast('cnFlexFormDiff:data', schema.diff.data);\n\t          _.each(schema.diff.data, function (data, prop) {\n\t            if (data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n\t              data.data = service.schema.data[prop].data.concat(data.data);\n\t            }\n\t            service.schema.data[prop] = data;\n\t            if (service.resolveRegister[prop]) {\n\t              _.each(service.resolveRegister[prop], function (registers) {\n\t                registers.forEach(function (register) {\n\t                  service.handleResolve(register.field, register.prop, register.exp);\n\t                });\n\t              });\n\t            }\n\t          });\n\t        }\n\t\n\t        var keys = [];\n\t\n\t        if (schema.diff.schema) {\n\t          $rootScope.$broadcast('cnFlexFormDiff:schema', schema.diff.schema);\n\t          _.each(schema.diff.schema, function (schema, key) {\n\t            service.schema.schema.properties[key] = schema;\n\t            reprocessSchema(schema, key, keys);\n\t          });\n\t        }\n\t\n\t        if (schema.diff.form) {\n\t          $rootScope.$broadcast('cnFlexFormDiff:form', schema.diff.form);\n\t          _.each(schema.diff.form, function (form, key) {\n\t\n\t            if (!keys.includes(key)) {\n\t              keys.push(key);\n\t            }\n\t\n\t            // don't want to override key when extending cached objects\n\t            //var key = form.key;\n\t            //delete form.key;\n\t\n\t            _.each(service.getFormsToProcess(key), function (copy) {\n\t              return copy && service.reprocessField(copy, form);\n\t            });\n\t          });\n\t        }\n\t\n\t        if (keys.length) {\n\t          _.each(keys, function (key) {\n\t            _.each(service.getFormsToProcess(key), function (copy) {\n\t              return copy && service.processField(copy);\n\t            });\n\t          });\n\t        }\n\t\n\t        service.broadcastErrors();\n\t      })();\n\t    } else {\n\t      service.updateSchema(schema);\n\t    }\n\t  }\n\t\n\t  function getFormsToProcess(key) {\n\t    var service = this;\n\t\n\t    var _ref19 = key.match(/\\[(\\d)+]/) || [],\n\t        _ref20 = _slicedToArray(_ref19, 2),\n\t        arrayIndex = _ref20[1];\n\t\n\t    var copies = service.getArrayCopies(key.replace(/\\[\\d+]/g, '[]'));\n\t    if (_.isUndefined(arrayIndex)) {\n\t      var cached = service.getFromFormCache(key);\n\t      return [cached].concat(_toConsumableArray(copies));\n\t    }\n\t    return [copies[arrayIndex]];\n\t  }\n\t\n\t  function reprocessField(current, update, isChild) {\n\t    var service = this;\n\t    var key = service.getKey(current.key);\n\t\n\t    // other logic in the service will add conition = 'true' to force\n\t    // condition to eval true, so we set the update condition to 'true'\n\t    // before comparing\n\t    if (!update.condition && current.condition) update.condition = 'true';\n\t    var redraw = !isChild && current.condition !== update.condition;\n\t\n\t    _.extend(current, _.omit(update, 'items', 'key'));\n\t\n\t    current._ogKeys.forEach(function (prop) {\n\t      if (!update[prop]) {\n\t        delete current[prop];\n\t      }\n\t    });\n\t    current._ogKeys = getOgKeys(update);\n\t\n\t    service.deregisterHandlers(key);\n\t\n\t    $rootScope.$broadcast('cnFlexFormReprocessField', key);\n\t\n\t    // why do we redraw? If we're doing it to show error message\n\t    // that has been addressed from the angular-schema-form library\n\t    // if there's another issue, try triggering the specific action required\n\t    // instead of redrawing the whole form\n\t    if (redraw && current.redraw) {\n\t      console.log('TODO: see if this can be removed');\n\t      current.redraw();\n\t    }\n\t  }\n\t\n\t  function reprocessSchema(schema, key, keys) {\n\t    keys.push(key);\n\t    if (schema.properties) {\n\t      _.each(schema.properties, function (schema, subKey) {\n\t        reprocessSchema(schema, key + '.' + subKey, keys);\n\t      });\n\t    }\n\t    if (schema.items && schema.items.properties) {\n\t      _.each(schema.properties, function (schema, subKey) {\n\t        reprocessSchema(schema, key + '[].' + subKey, keys);\n\t      });\n\t    }\n\t  }\n\t\n\t  function getDotKey(key) {\n\t    return (_.isString(key) ? ObjectPath.parse(key) : key).join('.');\n\t  }\n\t\n\t  function buildError(field) {\n\t    return {\n\t      key: getDotKey(field.key),\n\t      message: field.error\n\t    };\n\t  }\n\t\n\t  function broadcastErrors() {\n\t    var service = this;\n\t    $timeout(function () {\n\t      if (_.get(service, 'errors')) {\n\t        service.errors.forEach(function (error) {\n\t          $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n\t        });\n\t      }\n\t    }, 1);\n\t  }\n\t\n\t  function replaceArrayIndex(resolve, key) {\n\t    while (resolve.includes('arrayIndex')) {\n\t      if (_.isNumber(key)) return resolve.replace(/arrayIndex/g, key);\n\t      var arrayIndexKey = /([^.[]*)\\[arrayIndex\\]/.exec(resolve);\n\t      var re = new RegExp(arrayIndexKey[1] + '\\\\[(-?\\\\d+)\\\\]');\n\t      var index = re.exec(key);\n\t      if (!index) return resolve;\n\t      resolve = resolve.replace(new RegExp(arrayIndexKey[0].replace(/(\\[|\\])/g, '\\\\$1'), 'g'), index[0]);\n\t    }\n\t    return resolve;\n\t  }\n\t\n\t  function getArrayIndex(key) {\n\t    if (_.isObject(key)) {\n\t      return _.find(key.key, function (key) {\n\t        return _.isNumber(key);\n\t      });\n\t    }\n\t    return (/\\[(\\d*)\\]/.exec(key)[1]\n\t    );\n\t  }\n\t\n\t  function setArrayIndex(key, index, asArray) {\n\t    var service = this;\n\t    var keyCopy = void 0;\n\t    if (!_.isArray(index)) {\n\t      index = [index];\n\t    }\n\t    if (_.isString(key)) {\n\t      keyCopy = ObjectPath.parse(key);\n\t    } else {\n\t      keyCopy = _.clone(key);\n\t    }\n\t    while (index.length && keyCopy.indexOf('') > -1) {\n\t      var indexOfIndex = keyCopy.indexOf('');\n\t      keyCopy[indexOfIndex] = index.shift();\n\t    }\n\t    if (asArray) {\n\t      return keyCopy;\n\t    } else {\n\t      return service.getKey(keyCopy);\n\t    }\n\t  }\n\t\n\t  function cleanup() {\n\t    var service = this;\n\t    _.each(service.events, function (listener) {\n\t      listener();\n\t    });\n\t  }\n\t\n\t  function incrementUpdates() {\n\t    var service = this;\n\t    ++service.updates;\n\t    service.params.updates = service.updates;\n\t  }\n\t}\n\t\n\t//angular\n\t//.module('cn.flex-form')\n\t//.provider('cnFlexFormService', cnFlexFormServiceProvider);\n\t\n\texports.default = cnFlexFormServiceProvider;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tcnFlexFormModalLoaderService.$inject = [\"$stateParams\", \"$q\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar modalMap = {};\n\tvar promiseMap = {};\n\t\n\tfunction getPromises(state) {\n\t  if (promiseMap[state]) return promiseMap[state];\n\t\n\t  var promise = {};\n\t  promiseMap[state] = promise;\n\t  return promise;\n\t}\n\t\n\tfunction getPromise(state, id, $q) {\n\t  var promises = getPromises(state);\n\t  if (promises[id]) return promises[id];\n\t\n\t  var promise = $q.defer();\n\t  promises[id] = promise;\n\t  return promise;\n\t}\n\t\n\tfunction cnFlexFormModalLoaderServiceProvider() {\n\t\n\t  parent.$inject = [\"$stateParams\", \"$q\"];\n\t  return {\n\t    addMapping: addMapping,\n\t    $get: cnFlexFormModalLoaderService\n\t  };\n\t\n\t  ////////////\n\t\n\t  function addMapping(state, def) {\n\t    def.resolve = { parent: parent };\n\t    modalMap[state] = def;\n\t  }\n\t\n\t  function parent($stateParams, $q) {\n\t    'ngInject';\n\t\n\t    return getPromise($stateParams.modal, $stateParams.modalId, $q).promise.then(function (_ref) {\n\t      var parent = _ref.parent;\n\t      return parent;\n\t    });\n\t  }\n\t}\n\t\n\tfunction cnFlexFormModalLoaderService($stateParams, $q) {\n\t  'ngInject';\n\t\n\t  return {\n\t    getMapping: getMapping,\n\t    resolveMapping: resolveMapping,\n\t    removeMapping: removeMapping\n\t  };\n\t\n\t  /////////////\n\t\n\t  function resolveMapping(state, id, parent) {\n\t    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\t\n\t    console.info(':: RESOLVE MAPPING CALLED ::');\n\t    var scope = options.scope;\n\t\n\t    if (scope) {\n\t      scope.options = scope.options || {};\n\t      scope.options.destroyStrategy = 'retain';\n\t      modalMap[state].scope = scope;\n\t    }\n\t    var d = getPromise(state, id, $q);\n\t    d.resolve({ parent: parent, options: options });\n\t    return d.promise;\n\t  }\n\t\n\t  function getMapping(state) {\n\t    var d = $q.defer();\n\t    getPromise($stateParams.modal, $stateParams.modalId, $q).promise.then(function (_ref2) {\n\t      var parent = _ref2.parent,\n\t          options = _ref2.options;\n\t\n\t      d.resolve({ state: modalMap[state], options: options });\n\t      return parent;\n\t    });\n\t    return d.promise;\n\t  }\n\t\n\t  // Holding on to scope references creates memory leaks\n\t  function removeMapping(state) {\n\t    modalMap[state] = null;\n\t    promiseMap[state] = null;\n\t  }\n\t}\n\t\n\texports.default = cnFlexFormModalLoaderServiceProvider;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlexFormModalLoader.$inject = [\"FlexFormModal\", \"$state\", \"$rootScope\", \"$stateParams\", \"$scope\"];\n\tFlexFormModal.$inject = [\"cnFlexFormModalLoaderService\", \"$uibModal\", \"$stateParams\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams, $scope) {\n\t  'ngInject';\n\t\n\t  function FFModalLoaderTag() {}\n\t  $scope.__tag = FFModalLoaderTag();\n\t\n\t  var vm = this;\n\t\n\t  activate();\n\t\n\t  //////////\n\t\n\t  function activate() {\n\t    FlexFormModal.open(vm).then(function (_ref) {\n\t      var modal = _ref.modal,\n\t          _ref$options = _ref.options,\n\t          onDismiss = _ref$options.onDismiss,\n\t          onAfterDismiss = _ref$options.onAfterDismiss;\n\t\n\t      vm.modal = modal;\n\t      vm.modal.result.finally(goBack);\n\t\n\t      if (onDismiss) vm.modal.result.catch(function () {\n\t        return onDismiss($stateParams.restParams);\n\t      });\n\t      vm.dismissEvent = $rootScope.$on('$stateChangeStart', dismissModal);\n\t    });\n\t  }\n\t\n\t  function goBack() {\n\t    if (!$state.transition) {\n\t      $state.go('^');\n\t    }\n\t  }\n\t\n\t  function dismissModal() {\n\t    // unbind event\n\t    vm.dismissEvent();\n\t    vm.modal.opened.then(function () {\n\t      return vm.modal.dismiss();\n\t    });\n\t  }\n\t}\n\t\n\tfunction FlexFormModal(cnFlexFormModalLoaderService, $uibModal, $stateParams) {\n\t  'ngInject';\n\t\n\t  return { open: open };\n\t\n\t  ////////////\n\t\n\t  function open() {\n\t    return cnFlexFormModalLoaderService.getMapping($stateParams.modal).then(function (_ref2) {\n\t      var state = _ref2.state,\n\t          options = _ref2.options;\n\t      return {\n\t        modal: $uibModal.open(state),\n\t        options: options\n\t      };\n\t    });\n\t  }\n\t}\n\t\n\texports.FlexFormModalLoader = FlexFormModalLoader;\n\texports.FlexFormModal = FlexFormModal;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\t\n\tFlexForm.$inject = [\"cnFlexFormService\", \"$scope\", \"$location\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexForm() {\n\t  return {\n\t    restrict: 'E',\n\t    template: '\\n      <div ng-if=\"vm.showForm()\">\\n        <ng-form\\n          class=\"clearfix\"\\n          name=\"{{vm.formName}}\"\\n          sf-schema=\"vm.config.schema.schema\"\\n          sf-form=\"vm.form\"\\n          sf-model=\"vm.model\">\\n        </ng-form>\\n        <!-- debug panel to display model -->\\n        <section ng-if=\"vm.debug\">\\n          <json-explorer json-data=\"vm.model || \\'...model not loaded yet\\'\"/>\\n        </section>\\n      </div>\\n    ',\n\t    scope: {\n\t      config: '=ffConfig',\n\t      model: '=ffModel',\n\t      formIndex: '=ffFormIndex',\n\t      formName: '=ffFormName',\n\t      delayForm: '=ffDelayForm',\n\t      cleanupEvent: '=ffCleanupEvent'\n\t    },\n\t    controller: FlexForm,\n\t    controllerAs: 'vm',\n\t    bindToController: true\n\t  };\n\t}\n\t\n\tfunction FlexForm(cnFlexFormService, $scope, $location) {\n\t  'ngInject';\n\t\n\t  function cnFlexFormTag() {}\n\t  $scope.__tag = new cnFlexFormTag();\n\t\n\t  var vm = this;\n\t  vm.service = undefined;\n\t  vm.events = [];\n\t\n\t  vm.activate = activate;\n\t  vm.cleanup = cleanup;\n\t  vm.process = process;\n\t  vm.showForm = showForm;\n\t\n\t  vm.events.push($scope.$watch(function () {\n\t    return vm.config.schema;\n\t  }, vm.process));\n\t\n\t  vm.activate();\n\t\n\t  $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\t\n\t  //////////\n\t\n\t  function activate() {\n\t    if (angular.isNumber(vm.formIndex)) {\n\t      vm.form = vm.config.schema.forms[vm.formIndex].form;\n\t    } else {\n\t      vm.form = vm.config.schema.form;\n\t    }\n\t\n\t    // debug\n\t    if ($location.search().debug) {\n\t      vm.debug = true;\n\t    }\n\t  }\n\t\n\t  function process(cur, prev) {\n\t    if (vm.form) {\n\t      if (!vm.service) {\n\t        vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n\t          formCtrl: vm.config.formCtrl,\n\t          getSchema: vm.config.getSchema,\n\t          updateSchema: updateSchema\n\t        });\n\t      } else {\n\t        vm.service.compile(vm.config.schema, vm.model);\n\t      }\n\t    }\n\t  }\n\t\n\t  function showForm() {\n\t    return !vm.delayForm && vm.service && vm.service.isCompiled();\n\t  }\n\t\n\t  function updateSchema(schema) {\n\t    vm.config.schema = schema;\n\t    vm.activate();\n\t  }\n\t\n\t  function cleanup() {\n\t    _.each(vm.events, function (listener) {\n\t      listener();\n\t    });\n\t\n\t    cnFlexFormService.destroyService(vm.service);\n\t  }\n\t}\n\t\n\texports.default = cnFlexForm;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlexFormHeader.$inject = [\"$scope\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction cnFlexFormHeader() {\n\t  return {\n\t    restrict: 'E',\n\t    scope: {\n\t      config: '=ffHeaderConfig',\n\t      submit: '&ffSubmit',\n\t      loadOffscreen: '&ffLoadOffscreen'\n\t    },\n\t    controller: FlexFormHeader,\n\t    bindToController: true,\n\t    controllerAs: 'vm',\n\t    template: '\\n        <div class=\"col-md-6\">\\n          <h5 ng-if=\"vm.title.lead\">{{::vm.title.lead}}</h5>\\n          <h1>\\n            <i ng-show=\"vm.title.icon\" class=\"{{vm.title.icon}}\"/>\\n            {{vm.title.main}}\\n          </h1>\\n          <h5 ng-if=\"vm.title.sub\">{{::vm.title.sub}}</h5>\\n        </div>\\n        <div class=\"{{vm.buttonContainerClass || \\'page-action-btns\\'}}\">\\n          <div class=\"btn-options\"\\n               ng-mouseover=\"vm.loadOffscreen()\">\\n            <a class=\"btn btn-{{vm.returnStyle ? vm.returnStyle : \\'default-dark\\'\"\\n               ng-if=\"vm.returnState\"\\n               ui-sref=\"{{vm.returnState}}\">\\n              {{vm.returnText || \\'Cancel\\'}}\\n            </a>\\n            <a class=\"btn btn-{{vm.closeButton.style ? vm.closeButton.style : \\'default-dark\\'}}\"\\n               ng-if=\"vm.closeButton\"\\n               ng-click=\"vm.closeButton.handler()\">\\n               Cancel\\n            </a>\\n            <span ng-repeat=\"button in vm.actions\">\\n              <span ng-class=\"{\\'btn-group\\': button.options}\">\\n                <a class=\"btn {{button.style ? \\'btn-\\'+button.style : ($index === vm.actions.length - 1 ? \\'btn-primary\\' : \\'btn-default-dark\\')}}\"\\n                   ng-disabled=\"vm.isDisabled(button)\"\\n                   ng-click=\"vm.submit({handler: button.handler})\"\\n                   uib-tooltip=\"{{button.helptext}}\"\\n                   uib-tooltip-placement=\"bottom\"\\n                   ng-bind-html=\"button.text || \\'Save\\'\">\\n                </a>\\n                <a class=\"btn {{button.style ? \\'btn-\\'+button.style : ($index === vm.actions.length - 1 ? \\'btn-primary\\' : \\'btn-default-dark\\')}} dropdown-toggle\"\\n                        ng-disabled=\"vm.isDisabled(button)\"\\n                        ng-show=\"button.options\"\\n                        data-toggle=\"dropdown\">\\n                  <span class=\"caret\"></span>\\n                </a>\\n                <ul class=\"dropdown-menu\" ng-if=\"button.options\">\\n                  <li ng-repeat=\"option in button.options\"\\n                      ng-disabled=\"vm.isDisabled(option)\">\\n                    <a ng-click=\"vm.submit({handler: option.handler})\"\\n                       ng-bind-html=\"option.text\">\\n                    </a>\\n                  </li>\\n                </ul>\\n              </span>\\n            </span>\\n          </div>\\n          <p class=\"data-updated-at text-right\"\\n             id=\"data-updated-at\"\\n             ng-hide=\"vm.config.noData\">\\n            <a ng-click=\"vm.updateData()\">Update Data</a>\\n          </p>\\n        </div>'\n\t  };\n\t}\n\t\n\tfunction FlexFormHeader($scope) {\n\t  'ngInject';\n\t\n\t  function ffHeaderTag() {}\n\t  $scope.__tag = new ffHeaderTag();\n\t\n\t  var vm = this;\n\t\n\t  vm.updateData = updateData;\n\t  vm.isDisabled = isDisabled;\n\t\n\t  //activate();\n\t  $scope.$watch('vm.config', activate, true);\n\t\n\t  ///////////\n\t\n\t  function activate() {\n\t    vm.title = vm.config.title;\n\t\n\t    var _ref = vm.config.actionConfig || {};\n\t\n\t    vm.returnState = _ref.returnState;\n\t    vm.returnStyle = _ref.returnStyle;\n\t    vm.returnText = _ref.returnText;\n\t    vm.closeButton = _ref.closeButton;\n\t    vm.actions = _ref.actions;\n\t  }\n\t\n\t  function updateData() {\n\t    $scope.$emit('ffRefreshData');\n\t  }\n\t\n\t  function isDisabled(btnConfig) {\n\t    if (vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n\t    return false;\n\t  }\n\t}\n\t\n\texports.default = cnFlexFormHeader;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tfunction ffValidate() {\n\t  return {\n\t    restrict: 'A',\n\t    scope: { form: '=ffValidate' },\n\t    require: 'ngModel',\n\t    link: link\n\t  };\n\t}\n\t\n\tfunction link($scope, elem, attrs, ngModel) {\n\t  function ffValidateTag() {}\n\t  $scope.__tag = new ffValidateTag();\n\t\n\t  if ($scope.form && $scope.form.required) {\n\t    $scope.$watch(function () {\n\t      return ngModel.$viewValue;\n\t    }, function (value) {\n\t      // override schemaForm validation\n\t      ngModel.$setValidity('schemaForm', true);\n\t      ngModel.$setValidity('tv4-302', value);\n\t    });\n\t  }\n\t}\n\t\n\texports.default = ffValidate;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// all.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap de227322bd8c52cccd54","import cnFlexFormConfigProvider from './cn-flex-form-config.service';\nimport cnFlexFormTypesProvider from './cn-flex-form-types.service';\nimport { cnFlexFormRoutesProvider, cnFlexFormRoutes } from './cn-flex-form.routes';\nimport { schemaFormConfig, addTemplates } from './schema-form-extensions';\nimport cnFlexFormServiceProvider from './cn-flex-form.service';\nimport cnFlexFormModalLoaderServiceProvider from './cn-flex-form-modal-loader.service';\nimport { FlexFormModalLoader, FlexFormModal } from './cn-flex-form-modal-loader';\nimport cnFlexForm from './cn-flex-form.directive';\nimport cnFlexFormHeader from './cn-flex-form-header.directive';\nimport ffValidate from './cn-flex-form-validate.directive';\n\nexport default angular\n  .module('cn.flex-form', [\n    'ui.router',\n    'schemaForm',\n    'ui.bootstrap.datetimepicker',\n    'cnTagsInput',\n    'cn.util'\n  ])\n  .provider('cnFlexFormConfig', cnFlexFormConfigProvider)\n  .provider('cnFlexFormTypes', cnFlexFormTypesProvider)\n  .provider('cnFlexFormRoutes', cnFlexFormRoutesProvider)\n  .config(cnFlexFormRoutes)\n  .config(schemaFormConfig)\n  .run(addTemplates)\n  .provider('cnFlexFormService', cnFlexFormServiceProvider)\n  .provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider)\n  .factory('FlexFormModal', FlexFormModal)\n  .controller('FlexFormModalLoader', FlexFormModalLoader)\n  .directive('cnFlexForm', cnFlexForm)\n  .directive('cnFlexFormHeader', cnFlexFormHeader)\n  .directive('ffValidate', ffValidate)\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./src/_cn-flex-form.module.js","function cnFlexFormConfigProvider() {\n\n  const ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\n  return {\n    addIgnoreParam,\n    $get: cnFlexFormConfig\n  };\n\n  ////////\n\n  function addIgnoreParam(param) {\n    ignoreParams.push(param);\n  }\n\n  function cnFlexFormConfig($stateParams) {\n    'ngInject';\n\n    return {\n      getStateParams,\n      ignoreParams\n    };\n\n    ////////\n\n    function getStateParams() {\n      return _\n          .chain($stateParams)\n          .omit(ignoreParams)\n          .omit(function(v) {\n            return _.isUndefined(v) || _.isNull(v);\n          })\n          .value();\n    }\n  }\n\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\nexport default cnFlexFormConfigProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-config.service.js","function cnFlexFormTypesProvider() {\n\n  var fieldTypeRegister = [{\n    condition: field => field.type === 'hidden',\n    type: 'hidden'\n  }, {\n    condition: field => field.type.includes('radios'),\n    type: 'cn-radios'\n  }, {\n    condition: field => field.type.includes('radiobuttons'),\n    type: 'cn-radiobuttons'\n  }, {\n    condition: field => field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery,\n    type: 'cn-autocomplete'\n  }, {\n    condition: field => field.type === 'cn-datetimepicker' || field.type === 'datetime-local' || field.type === 'time-minutes',\n    type: 'cn-datetimepicker'\n  }, {\n    condition: field => field.type === 'help',\n    type: 'help'\n  }, {\n    condition: field => field.type.includes('display'),\n    type: 'cn-display'\n  }, {\n    condition: field => field.schema && field.schema.format && field.schema.format.includes('currency'),\n    type: 'cn-currency'\n  }, {\n    condition: field => field.schema && field.schema.format === 'percentage',\n    type: 'cn-percentage'\n  }, {\n    condition: field => field.type === 'toggle' || field.type === 'boolean',\n    type: 'cn-toggle'\n  }, {\n    condition: field => field.type === 'mediaupload',\n    type: 'cn-mediaupload'\n  }, {\n    condition: field => field.type === 'csvupload',\n    type: 'cn-csvupload'\n  }, {\n    condition: field => field.type === 'reusable',\n    type: 'cn-reusable'\n  }, {\n    condition: field => field.type === 'table',\n    type: 'cn-table'\n  }, {\n    condition: field => field.type === 'array',\n    type: 'array'\n  }];\n\n  return {\n    registerFieldType: registerFieldType,\n    $get: cnFlexFormTypes\n  };\n\n  ////////\n\n  function registerFieldType(fieldType) {\n    fieldTypeRegister.unshift(fieldType);\n  }\n\n  function cnFlexFormTypes() {\n    return {\n      fieldTypeRegister: fieldTypeRegister,\n      getFieldType: getFieldType\n    };\n\n    /////////\n\n    function getFieldType(field) {\n      for(var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n        if(fieldTypeRegister[i].condition(field)) {\n          return fieldTypeRegister[i].type;\n        }\n      }\n      return field.type || field.schema && field.schema.type;\n    }\n  }\n\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\nexport default cnFlexFormTypesProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-types.service.js","function cnFlexFormRoutesProvider($stateProvider) {\n  'ngInject';\n\n  return {\n    addStates,\n    $get\n  };\n\n  ////////////\n\n  function $get() {\n    // nothing to do here, but required\n  }\n\n  function addStates({ permissions, name }) {\n    const shared = {\n      controller: 'FlexFormModalLoader',\n      controllerAs: 'vm',\n      permissions\n    };\n    $stateProvider\n        .state(`${name}.page.modal`, {\n          url: '/~:modal/:modalId',\n          ...shared\n        })\n        .state(`${name}.page.modalParams`, {\n          url: '/~:modal/:modalId/:restParams',\n          ...shared\n        });\n  }\n}\n\nfunction cnFlexFormRoutes($stateProvider) {\n  'ngInject';\n\n  $stateProvider\n      .state('flex-form-sandbox', {\n        url: '/flex-form/sandbox',\n        controller: 'FlexFormSandbox',\n        controllerAs: 'vm',\n        templateUrl: 'app/components/cn-flex-form/sandbox.html'\n      });\n}\n\nexport { cnFlexFormRoutes, cnFlexFormRoutesProvider };\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form.routes.js","//angular.module('cn.flex-form')\n    //.config(schemaFormConfig)\n    //.run(addTemplates);\n\nfunction schemaFormConfig(cnFlexFormServiceProvider) {\n  'ngInject';\n\n  tv4.addFormat({\n    'url': data => _.isString(data) && !/^(https?:\\/\\/.{2}|$)/.test(data) && 'invalid url'\n  });\n\n  var extensions = [\n    'cn-fieldset',\n    'cn-toggle',\n    'cn-datetimepicker',\n    'cn-autocomplete',\n    'cn-autocomplete-detailed',\n    'cn-currency',\n    'cn-radios',\n    'cn-radiobuttons',\n    'cn-percentage',\n    'cn-display',\n    'cn-mediaupload',\n    'cn-csvupload',\n    'cn-reusable',\n    'cn-table'\n  ];\n\n  _.each(extensions, function(extension) {\n    cnFlexFormServiceProvider.registerField({\n      type: extension,\n      templateUrl: `app/components/cn-flex-form/forms/${extension}.html`\n    });\n  });\n}\n\nfunction addTemplates($templateCache) {\n  'ngInject';\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-toggle.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n        <div class=\"clearfix\">\n          <cn-toggle-switch\n            class=\"pull-left\"\n            ng-show=\"form.key\"\n            ng-model-options=\"form.ngModelOptions\"\n            ng-model=\"$$value$$\"\n            sf-changed=\"form\"\n            schema-validate=\"form\"\n            on-value=\"form.onValue\"\n            off-value=\"form.offValue\"\n            read-only=\"form.readonly\"\n            undefined-class=\"form.undefinedClass\"/>\n          <span ng-show=\"form.onText && form.offText\">\n            {{$$value$$ === form.onValue ? form.onText : form.offText}}\n          </span>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-datetimepicker.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               for=\"{{form.key.join('.')}}\"\n               ng-show=\"showTitle()\">{{form.title}}</label>\n        <cn-datetimepicker\n          ng-show=\"form.key\"\n          ng-model=\"$$value$$\"\n          ng-model-options=\"form.ngModelOptions\"\n          is-disabled=\"form.readonly\"\n          sf-changed=\"form\"\n          schema-validate=\"form\"\n          input-id=\"{{form.key.join('.')}}\"\n          min-date=\"form.minDate\"\n          max-date=\"form.maxDate\"\n          max-view=\"{{form.maxView}}\"\n          cn-date-required=\"form.required\"\n          placeholder=\"{{form.placeholder}}\"\n          model-type=\"{{form.schema.type}}\"\n          model-formatter=\"form.modelFormatter\"\n          model-parser=\"form.modelParser\"\n          view-formatter=\"form.viewFormatter\"\n          view-parser=\"form.viewParser\"\n          format-string={{form.dateFormat}}\n          icon-class={{form.iconClass}}>\n        </cn-datetimepicker>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  var sharedAutocompleteTpl = `\n        <tags-input\n          ng-show=\"form.key\"\n          ng-model=\"$$value$$\"\n          ng-model-options=\"form.ngModelOptions\"\n          ng-disabled=\"form.readonly\"\n          sf-changed=\"form\"\n          schema-validate=\"form\"\n          input-id=\"{{form.key.join('.')}}\"\n          display-property=\"{{form.displayProperty || 'name'}}\"\n          value-property=\"{{form.valueProperty}}\"\n          placeholder=\"{{form.placeholder || ' '}}\"\n          clear-on-blur=\"true\"\n          add-on-comma=\"false\"\n          add-from-autocomplete-only=\"{{!form.allowNew}}\"\n          on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\n          on-init=\"form.onInit($tag, form, $event, $setter)\"\n          model-type=\"{{form.getSchemaType()}}\"\n          array-value-type=\"{{form.schema.items.type}}\"\n          hide-tags=\"{{form.detailedList}}\"\n          tags-style=\"{{form.selectionStyle}}\"\n          required=\"{{form.required}}\"\n          min-length=\"{{form.minLength}}\"\n          allowed-tags-pattern=\".*\"\n          dropdown-icon=\"true\"\n          item-formatter=\"form.itemFormatter\"\n          min-tags=\"{{form.schema.minItems}}\"\n          max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== 'array' ? 1 : 0}}\"\n          allow-bulk=\"{{form.bulkAdd}}\"\n          bulk-delimiter=\"{{form.bulkDelimiter}}\"\n          bulk-placeholder=\"{{form.bulkPlaceholder}}\"\n          show-clear-all=\"{{form.showClearAll}}\"\n          show-button=\"true\">\n          <auto-complete\n            source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\n            skip-filtering=\"{{form.titleQuery ? true : false}}\"\n            min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\n          </auto-complete>\n        </tags-input>`;\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-autocomplete.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               for=\"{{form.key.join('.')}}-input\"\n               ng-show=\"showTitle()\">{{form.title}}</label>\n        ${sharedAutocompleteTpl}\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-autocomplete-detailed.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               for=\"{{form.key.join('.')}}-input\"\n               ng-show=\"showTitle()\">{{form.title}}</label>\n        <div sf-array=\"form\">\n          <ol class=\"list-group cn-autocomplete-list\"\n              ng-if=\"modelArray.length\"\n              ng-model=\"modelArray\">\n            <li class=\"list-group-item {{form.fieldHtmlClass}}\"\n                ng-repeat=\"item in modelArray\">\n              <button ng-hide=\"form.readonly || form.remove === null\"\n                      ng-click=\"deleteFromArray($index)\"\n                      type=\"button\" class=\"close pull-right\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n              <sf-decorator form=\"copyWithIndex($index)\"/>\n            </li>\n          </ol>\n        </div>\n        ${sharedAutocompleteTpl}\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-currency.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key.join('.')}}\">{{form.title}}</label>\n        <div class=\"{{form.fieldClass}} input-group\">\n          <label class=\"input-group-addon\"\n                 ng-disabled=\"form.readonly\"\n                 for=\"{{form.key.join('.')}}\">$</label>\n          <input class=\"form-control\"\n                 cn-currency-format=\"{{form.currencyFormat}}\"\n                 cn-currency-placeholder=\"{{form.placeholder}}\"\n                 ng-show=\"form.key\"\n                 ng-model-options=\"form.ngModelOptions\"\n                 ng-disabled=\"form.readonly\"\n                 sf-changed=\"form\"\n                 schema-validate=\"form\"\n                 type=\"text\"\n                 step=\"any\"\n                 min=\"{{form.min}}\"\n                 max=\"{{form.max}}\"\n                 id=\"{{form.key.join('.')}}\"\n                 name=\"{{form.key.join('.')}}\"\n                 ng-model=\"$$value$$\">\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-radios.html',\n      `<div class=\"form-group {{form.htmlClass}}\"\n            ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n         <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n         <div class=\"btn-group clearfix\">\n           <label class=\"radio radio-block\"\n                  ng-repeat=\"item in form.titleMap\">\n             <input type=\"radio\"\n                    sf-changed=\"form\"\n                    ng-disabled=\"form.readonly\"\n                    ng-model=\"$$value$$\"\n                    ng-model-options=\"form.ngModelOptions\"\n                    schema-validate=\"form\"\n                    ff-validate=\"form\"\n                    ng-value=\"item.value\"\n                    name=\"{{form.key.join('.')}}\">\n             <span class=\"radio-block-icon\" ng-if=\"item.iconClass\">\n               <i class=\"fa fa-{{item.iconClass}} fa-lg\"></i>\n             </span>\n             <span ng-bind-html=\"item.name\"></span>\n           </label>\n         </div>\n         <span class=\"help-block\" sf-message=\"form.description\"></span>\n       </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-radiobuttons.html',\n      `\n      <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n        <div class=\"btn-group clearfix\">\n          <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? 'active' : ''}}\"\n                 ng-repeat=\"item in form.titleMap\">\n            <input type=\"radio\"\n                   class=\"{{form.fieldHtmlClass}} hide\"\n                   sf-changed=\"form\"\n                   ng-disabled=\"form.readonly\"\n                   ng-model=\"$$value$$\"\n                   ng-model-options=\"form.ngModelOptions\"\n                   schema-validate=\"form\"\n                   ff-validate=\"form\"\n                   ng-value=\"item.value\"\n                   name=\"{{form.key.join('.')}}\">\n            <i class=\"fa fa-{{item.value}} fa-lg\"></i>\n            <span ng-bind-html=\"item.name\"></span>\n          </label>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-percentage.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n        <div class=\"{{form.fieldClass}} input-group\">\n          <input class=\"form-control\"\n                 cn-percentage-format\n                 ng-show=\"form.key\"\n                 ng-model-options=\"form.ngModelOptions\"\n                 ng-disabled=\"form.readonly\"\n                 sf-changed=\"form\"\n                 schema-validate=\"form\"\n                 type=\"number\"\n                 step=\"any\"\n                 min=\"{{form.min}}\"\n                 max=\"{{form.max}}\"\n                 id=\"{{form.key && form.key[0]}}\"\n                 name=\"{{form.key && form.key[0]}}\"\n                 ng-model=\"$$value$$\">\n           <div class=\"input-group-addon\"\n                  ng-disabled=\"form.readonly\"\n                  for=\"{{form.key && form.key[0]}}\">%</div>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-display.html',\n      `\n      <div class=\"form-group cn-display{{form.htmlClass}}\">\n        <input ng-show=\"form.key\"\n               class=\"form-control\"\n               id=\"{{form.key.join('.')}}\"\n               name=\"{{form.key.join('.')}}\"\n               ng-disabled=\"true\"\n               value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-fieldset.html',\n      `\n      <fieldset \n        ng-disabled=\"form.readonly\"\n        class=\"schema-form-fieldset {{form.htmlClass}}\"\n        ng-class=\"{'borderless': form.pos === 0}\">\n        <legend ng-click=\"form.toggleCollapse(form)\"\n                ng-class=\"{'sr-only': !showTitle(), collapsible: form.collapsible}\"\n                ng-mouseenter=\"form.render = true\">\n          <i ng-show=\"form.collapsible\"\n             class=\"fa fa-caret-{{form.collapsed ? 'right' : 'down'}}\"></i>\n          {{ form.title }}\n        </legend>\n        <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\n        <div uib-collapse=\"form.collapsed\">\n          <div ng-if=\"form.render\">\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\n          </div>\n        </div>\n      </fieldset>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-mediaupload.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n        <media-upload ng-model=\"$$value$$\"\n                      cn-disabled=\"form.readonly\"\n                      cn-file-type=\"form.fileType\"\n                      cn-upload-path=\"form.uploadPath\"\n                      cn-data=\"form.data\"\n                      cn-preview-path=\"form.previewPath\"\n                      cn-model-value-key=\"form.modelValueKey\"\n                      cn-existing-preview=\"form.existingPreview\"\n                      ng-model-options=\"form.ngModelOptions\"\n                      sf-changed=\"form\"\n                      schema-validate=\"form\"\n                      ff-form=\"form\"\n                      class=\"clearfix\">\n        </media-upload>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n     </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-csvupload.html',\n      `\n      <div class=\"form-group {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n        <csv-upload ng-model=\"$$value$$\"\n                      cn-upload-path=\"form.uploadPath\"\n                      ng-model-options=\"form.ngModelOptions\"\n                      sf-changed=\"form\"\n                      schema-validate=\"form\"\n                      ff-form=\"form\"\n                      class=\"clearfix\">\n        </csv-upload>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n     </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-reusable.html',\n      `\n      <div class=\"form-group cn-reusable {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <label class=\"control-label\"\n               ng-show=\"showTitle()\"\n               for=\"{{form.key.join('.')}}\">{{form.title}}</label>\n        <cn-select-or\n          ng-show=\"form.key\"\n          select-from=\"form.library\"\n          ng-model=\"$$value$$\"\n          ng-model-options=\"form.ngModelOptions\"\n          sf-changed=\"form\"\n          schema-validate=\"form\"\n          ff-form=\"form\"\n          directiveId=\"form.directiveId\"\n          item-template=\"form.itemTemplate\"\n          toggle-text=\"form.toggleText\"\n          disabled=\"form.readonly\"\n          view=\"form.view\">\n          <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\n        </cn-select-or>\n        <p ng-if=\"form.loadMore && form.view === 'list'\">\n          <a ng-click=\"form.loadMore()\"\n             class=\"btn btn-default btn-block\">Load More</a>\n        </p>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n\n  $templateCache.put(\n      'app/components/cn-flex-form/forms/cn-table.html',\n      `\n      <div class=\"form-group cn-ff-table {{form.htmlClass}}\"\n           ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n        <h6>{{form.title}}</h6>\n        <div class=\"row\">\n          <div ng-repeat=\"col in form.columns\" class=\"{{col.columnWidth}}\">\n            <p class=\"column-header\">{{col.columnHeader}}</p>\n          </div>\n        </div>\n        <div class=\"row\" ng-repeat=\"row in form.items\">\n          <div ng-repeat=\"col in row.items\" class=\"{{col.columnWidth}}\">\n            <sf-decorator form=\"col\"></sf-decorator>\n          </div>\n        </div>\n        <span class=\"help-block\" sf-message=\"form.description\"></span>\n      </div>`\n  );\n}\n\nexport { schemaFormConfig, addTemplates };\n\n\n\n// WEBPACK FOOTER //\n// ./src/schema-form-extensions.js","// Need these modules for test bundle\nvar _ = typeof window !== 'undefined' && window._ || require('lodash');\nvar ObjectPath = typeof window !== 'undefined' && window.ObjectPath || require('objectpath');\n\nconst fieldTypeHandlers = {\n  'fieldset': 'processFieldset',\n  'cn-radios': 'processRadios',\n  'cn-radiobuttons': 'processRadiobuttons',\n  'cn-autocomplete': 'processSelect',\n  'cn-datetimepicker': 'processDate',\n  'help': 'processHelp',\n  'cn-display': 'processDisplay',\n  'cn-currency': 'processCurrency',\n  'cn-percentage': 'processPercentage',\n  'cn-mediaupload': 'processMediaUpload',\n  'cn-csvupload': 'processCsvUpload',\n  'cn-reusable': 'processReusable',\n  'cn-toggle': 'processToggle',\n  'cn-table': 'processTable',\n  'component': 'processComponent',\n  'section': 'processSection',\n  'tabarray': 'processSection',\n  'array': 'processArray'\n};\n\nconst fieldPropHandlers = [{\n  prop: 'resolve',\n  handler: (field, service) => service.processResolve(field)\n}, {\n  prop: 'selectDisplay',\n  handler: (field, service) => service.processSelectDisplay(field)\n}, {\n  prop: 'default',\n  handler: (field, service) => service.processDefault(field)\n}, {\n  prop: 'schema',\n  handler: (field, service) => \n    _.isUndefined(field.default) && !_.isUndefined(field.schema.default) && service.processDefault(field)\n}, {\n  prop: 'watch',\n  handler: (field, service) => field.watch && service.processFieldWatch(field)\n}, {\n  prop: 'type',\n  handler: (field, service, secondPass) => service.processFieldType(field, secondPass)\n}, {\n  prop: 'conditionals',\n  handler: (field, service) => service.processConditional(field)\n}, {\n  prop: 'updateSchema',\n  handler: (field, service) => service.processFieldUpdatedSchema(field)\n}];\n\nfunction cnFlexFormServiceProvider(schemaFormDecoratorsProvider, cnFlexFormTypesProvider) {\n  'ngInject';\n\n  return {\n    registerField,\n    $get: CNFlexFormService\n  };\n\n  //////////\n\n  function registerField(fieldType) {\n    if(fieldType.condition) {\n      cnFlexFormTypesProvider.registerFieldType({\n        condition: fieldType.condition,\n        type: fieldType.type\n      });\n    }\n\n    if(fieldType.handler) {\n      fieldTypeHandlers[fieldType.type] = fieldType.handler;\n    }\n\n    if(fieldType.templateUrl) {\n      schemaFormDecoratorsProvider.addMapping(\n          'bootstrapDecorator',\n          fieldType.type,\n          fieldType.templateUrl\n      );\n      schemaFormDecoratorsProvider.createDirective(\n          fieldType.type,\n          fieldType.templateUrl\n      );\n    }\n  }\n}\n\nfunction CNFlexFormService(\n  Api,\n  $parse,\n  cnFlexFormConfig,\n  cnFlexFormTypes,\n  sfPath,\n  $interpolate,\n  $rootScope,\n  $timeout,\n  cnUtil,\n  $stateParams\n) {\n  'ngInject';\n\n  const services = [];\n  const prototype = {\n    compile,\n    addArrayCopy,\n    addToDataCache,\n    addToFormCache,\n    addToScopeCache,\n    broadcastErrors,\n    buildError,\n    cleanup,\n    deregisterHandlers,\n    deregisterArrayHandlers,\n    getArrayCopy,\n    getArrayCopies,\n    getArrayCopiesFor,\n    getArrayScopes,\n    getDefault,\n    getFromDataCache,\n    getFromFormCache,\n    getFromScopeCache,\n    getFormsToProcess,\n    getKey,\n    getSchema,\n    getWatchables,\n    handleResolve,\n    incrementUpdates,\n    initArrayCopyWatch,\n    initModelWatch,\n    initSchemaParams,\n    isCompiled,\n    onModelWatch,\n    parseCondition,\n    parseExpression,\n    processArray,\n    processDefault,\n    processDisplay,\n    processField,\n    processFieldset,\n    processFieldProps,\n    processFieldType,\n    processFieldUpdatedSchema,\n    processFieldWatch,\n    processComponent,\n    processConditional,\n    processCurrency,\n    processPercentage,\n    processDate,\n    processHelp,\n    processRadios,\n    processRadiobuttons,\n    processReusable,\n    processSchema,\n    processSelectDisplay,\n    processResolve,\n    processSection,\n    processSelect,\n    processTable,\n    processTemplate,\n    processToggle,\n    processUpdatedSchema,\n    processMediaUpload,\n    processCsvUpload,\n    registerArrayHandlers,\n    registerHandler,\n    registerResolve,\n    replaceArrayIndex,\n    reprocessField,\n    resolveNestedExpressions,\n    setArrayIndex,\n    setupConfig,\n    setupArraySelectDisplay,\n    setupSelectDisplay,\n    setupSchemaRefresh,\n    silenceListeners,\n    skipDefaults\n  };\n\n  function getService(fn) {\n    return _.find(services, fn);\n  }\n\n  function destroyService(fn) {\n    const service = getService(fn);\n    if (service) {\n      service.cleanup();\n      _.empty(service);\n      _.remove(services, (s) => s === service);\n    }\n  }\n\n\n  function CNFlexFormConstructor(...args) {\n    if(args.length > 1) {\n      var [ schema, model, config ] = args;\n    }\n    else {\n      var { schema, model, config } = args[0];\n    }\n\n    const curService = getService((service) => service.model === model);\n    if(curService) {\n      if(schema) {\n        curService.compile(schema, model, config);\n      }\n      return curService;\n    }\n\n    const newService = new CNFlexForm(schema, model, config);\n    services.push(newService);\n    return newService;\n  }\n\n  function CNFlexForm(schema, model, config) {\n\n    if($stateParams.debug) {\n      window.services = services;\n    }\n\n    this.arrayCopies = {};\n    this.arrayListeners = {};\n    this.dataCache = {};\n    this.defaults = {};\n    this.errors = [];\n    this.events = [];\n    this.formCache = {};\n    this.scopeCache = {};\n    this.listeners = {};\n    this.resolveRegister = {};\n    this.model = model;\n    this.updates = 0;\n    this.skipDefault = {};\n\n    this.params = cnFlexFormConfig.getStateParams();\n\n    this._ = _;\n\n    this.compile(schema, model, config);\n  }\n\n  _.extend(CNFlexForm.prototype, prototype);\n  _.extend(CNFlexFormConstructor, prototype, { getService, destroyService });\n\n  return CNFlexFormConstructor;\n\n  //////////////\n\n  function compile(schema, model, config) {\n    var service = this;\n\n    service.schema = schema;\n    service.model = model;\n\n    if(!service.isCompiled()) {\n      service.setupConfig(config);\n\n      if(schema.forms) {\n        _.each(schema.forms, function(form) {\n          _.each(form.form, service.processField.bind(service));\n        });\n      }\n      else {\n        _.each(schema.form, service.processField.bind(service));\n      }\n\n      service.initModelWatch();\n      service.initArrayCopyWatch();\n      service.isCompiled(true);\n    }\n\n    service.broadcastErrors();\n  }\n\n  function isCompiled(setValue) {\n    var service = this;\n    if(setValue) {\n      service.schema.compiled = setValue;\n    }\n    return service.schema && service.schema.compiled;\n  }\n\n  function setupConfig(config) {\n    var service = this;\n    if(config) {\n      if(config.formCtrl) service.formCtrl = config.formCtrl;\n      if(config.updateSchema) service.updateSchema = config.updateSchema;\n      if(config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n    }\n  }\n\n  function processSchema(field) {\n    const service = this;\n    const { schema } = field;\n\n    field.getSchemaType = () => _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n    if(!field.type) field.type = field.getSchemaType && field.getSchemaType();\n  }\n\n  function processDefault(field) {\n    const service = this;\n    const { schema } = field;\n    const curDefault = field.default || schema.default;\n    const key = service.getKey(field.key);\n\n    if (service.skipDefault[key]) {\n      delete service.skipDefault[key];\n      return;\n    }\n\n    // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n    //if(service.updates || field.default) {\n    if(!_.isUndefined(curDefault)) {\n      if(key.includes && key.includes('[]')) return;\n      const model = service.parseExpression(field.key, service.model);\n      const modelValue = model.get();\n      // if there's an existing default and it's the same as the current value\n      // update the current value to the new default\n      if(_.isUndefined(modelValue) || (\n        (_.has(service.defaults, key) ? angular.equals(modelValue, service.defaults[key]) : _.isTrulyEmpty(modelValue)) &&\n        !angular.equals(modelValue, curDefault)\n      )) {\n      //if ((\n        //(!_.has(service.defaults, key) && _.isTrulyEmpty(modelValue)) ||\n        //(_.has(service.defaults, key) && angular.equals(modelValue, service.defaults[key]))\n      //) && !angular.equals(modelValue, curDefault)) {\n        model.set(angular.copy(curDefault));\n      }\n    }\n    service.defaults[key] = angular.copy(curDefault);\n\n    if(schema.format === 'url' && !field.validationMessage) {\n      if(!field.type) field.type = 'url';\n      field.validationMessage = 'Must be a valid url (https://...)';\n    }\n  }\n\n  function processFieldset(fieldset) {\n    var service = this;\n\n    fieldset.type = 'cn-fieldset';\n    fieldset.items.forEach(service.processField.bind(service));\n\n    if(_.has(fieldset, 'pos') && fieldset.pos === 0) {\n      fieldset.htmlClass = (fieldset.htmlClass || '') + ' borderless';\n    }\n    if(fieldset.collapsible) {\n      fieldset.toggleCollapse = (fieldset) => {\n        if(fieldset.collapsible) {\n          fieldset.collapsed = !fieldset.collapsed;\n        }\n      };\n\n      fieldset.render = !fieldset.collapsed;\n    }\n    else {\n      fieldset.render = true;\n    }\n  }\n\n  function processFieldType(field, secondPass) {\n    const service = this;\n    const fieldType = cnFlexFormTypes.getFieldType(field);\n    const handler = fieldTypeHandlers[fieldType];\n    if(_.isString(handler)) {\n      service[handler](field, secondPass);\n    }\n    else if(_.isFunction(handler)) {\n      handler.call(service, field, secondPass);\n    }\n  }\n\n  function getOgKeys(field) {\n    return _.reject(\n      _.keys(field),\n      (key) => /^key$|^htmlClass$|^_/.test(key)\n    );\n  }\n\n  function processField(field, pos) {\n    const service = this;\n\n    if(angular.isDefined(pos)) {\n      field.pos = pos;\n    }\n\n    if(!field._ogKeys) {\n      field._ogKeys = getOgKeys(field);\n    }\n\n    const key = service.getKey(field.key);\n\n    if(key) {\n      service.addToFormCache(field, key);\n      const schema = service.getSchema(key);\n\n      if(schema) {\n        field.schema = schema;\n        if(schema.description) field.description = schema.description;\n        if(field.readonly && !schema.readonly) field.readonly = false;\n        if(schema.type === 'array' && !('showClearAll' in field)) field.showClearAll = true;\n      }\n\n      service.processSchema(field);\n    }\n\n    service.processFieldProps(field);\n\n    if(key) {\n      ((key) => {\n        if(_.find(service.errors, { key })) {\n          service.errors = _.reject(service.errors, { key });\n          $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n          $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n        }\n      })(getDotKey(key));\n\n      if(field.error) {\n        service.errors.push(service.buildError(field));\n        if(_.isEmpty(field.ngModelOptions)) {\n          field.ngModelOptions = {\n            allowInvalid: true\n          };\n        } else {\n          field.ngModelOptions.allowInvalid = true;\n        }\n      }\n    }\n  }\n\n  function processFieldProps(field, secondPass) {\n    const service = this;\n    fieldPropHandlers.forEach(({ prop, handler }) =>\n        _.has(field, prop) && handler(field, service, secondPass)\n    );\n  }\n\n  function getKey(key) {\n    if(_.isArray(key)) {\n      key = _.reduce(key, (total, next) =>\n          /^(-?\\d*)$/.test(next) ? total + '[' + next + ']' : total + '.' + next);\n    }\n    return key;\n  }\n\n  function getSchema(key, depth) {\n    var service = this;\n    if(!key) return;\n\n    key = ObjectPath.parse(service.getKey(key));\n    depth = depth || service.schema.schema.properties;\n\n    let first, next;\n\n    while(key.length > 1) {\n      first = key[0];\n      next = key[1];\n      if(/^-?\\d*$/.test(next)) {\n        if(key.length === 2) {\n          depth = depth = depth[key.shift()];\n        }\n        else {\n          depth = depth[key.shift()].items.properties;\n          key.shift();\n        }\n      }\n      else {\n        depth = depth[key.shift()].properties;\n      }\n    }\n\n    // if array item\n    first = key[0] || 'items';\n\n    return depth[first];\n  }\n\n  function getDefault(field) {\n    const service = this;\n    field = field.key ? field : service.getFromFormCache(field);\n    return field && (angular.isDefined(field.default) ? field.default : field.schema && field.schema.default);\n  }\n\n  function getWatchables(exp) {\n    const watchables = [];\n    let nested = matchNestedExpression(exp);\n    let replaceStr = '';\n\n    while(nested) {\n      if(/^-?\\d+$/.test(nested[1]) || /^(\"|').*(\"|')$/.test(nested[1])) {\n        replaceStr = nested[0];\n        exp = exp.replace(nested[0], 'ff_replace_ff');\n      }\n      else {\n        watchables.push(nested[1].replace(/ff_replace_ff/g, replaceStr));\n        replaceStr = '';\n        exp = exp.replace(nested[0], '');\n      }\n      nested = matchNestedExpression(exp);\n    }\n\n    return [...watchables, exp.replace(/ff_replace_ff/g, replaceStr)];\n  }\n\n  function processResolve(field) {\n    const service = this;\n    const key = service.getKey(field.key);\n\n    _.each(field.resolve, function(dataProp, fieldProp) {\n      dataProp = replaceArrayIndex(dataProp, key || field.arrayIndex);\n      if(dataProp.includes('[arrayIndex]')) return;\n\n      service.handleResolve(field, fieldProp, dataProp, true);\n\n      getWatchables(dataProp).forEach((watchable) => {\n        const [, base, exp] = watchable.match(/(schema\\.data\\.|model\\.)(\\S+)/) || [];\n\n        if(base) {\n          if(base === 'schema.data.') {\n            service.registerResolve(field, fieldProp, exp, dataProp);\n          }\n          else if(base === 'model.') {\n            service.registerHandler(exp, () => {\n              service.handleResolve(field, fieldProp, dataProp);\n            });\n          }\n        }\n      });\n    });\n\n    return field;\n  }\n\n  function handleResolve(field, fieldProp, exp, skipPropHandlers) {\n    const service = this;\n    let data;\n    // does declarative/functional outweigh performance?\n    if(exp.includes(' || ')) {\n      let eithers = exp.split(' || ');\n      for(let i = 0, l = eithers.length; i < l; i++) {\n        const x = service.parseExpression(eithers[i]).get();\n        if(angular.isDefined(x)) {\n          data = x;\n          break;\n        }\n      }\n    }\n    else if(exp.includes(' && ')) {\n      let all = exp.split(' && ');\n      for(let i = 0, l = all.length; i < l; i++) {\n        const x = service.parseExpression(all[i]).get();\n        if(angular.isDefined(x)) data = x;\n        else {\n          data = undefined;\n          break;\n        }\n      }\n    }\n    else {\n      data = service.parseExpression(exp).get();\n    }\n\n    // if we're resolving from model but defaults haven't been applied yet, resolve from default itself\n    if(!data && exp.indexOf('model.') === 0) {\n      const key = exp.replace('model.', '');\n      const genericKey = stripIndexes(key);\n      const cachedField = service.getFromFormCache(key) || service.getFromFormCache(genericKey);\n\n      data = (() => {\n        if(cachedField && cachedField.default)\n          return cachedField.default;\n        if(angular.isDefined(field.default))\n          return field.default;\n        const schema = service.getSchema(genericKey);\n        if(schema) return schema.default;\n      })();\n    }\n\n    if(data && data.cursor) {\n      field.loadMore = function() {\n        const dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n        service.refreshSchema(`data:${dataProp}:${data.cursor}`);\n      };\n    }\n    else {\n      delete field.loadMore;\n    }\n\n    const val = (data && data.data) ? data.data : data;\n    service.parseExpression(fieldProp, field).set(val);\n\n    if(!skipPropHandlers) {\n      fieldPropHandlers.forEach(({ prop, handler }) =>\n          prop === fieldProp && handler(field, service)\n      );\n    }\n  }\n\n  function registerResolve(field, fieldProp, dataProp, exp) {\n    var service = this;\n\n    let fieldKey = service.getKey(field.key);\n    service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\n    let register = service.resolveRegister[dataProp];\n    register[fieldKey] = register[fieldKey] || [];\n    register[fieldKey].push({ field, prop: fieldProp, exp });\n  }\n\n  function processConditional(field) {\n    const service = this;\n\n    _.each(field.conditionals, (condition, key) => {\n      const handler = (val, prev) => {\n        field[key] = service.parseCondition(condition);\n        const scope = service.getFromScopeCache(service.getKey(field.key));\n        if(key === 'required' && scope) {\n          $rootScope.$broadcast('schemaFormValidate');\n        }\n      };\n      field\n          .conditionals[key]\n          .match(/model\\.([^\\s]+)/g)\n          .map(path => path.match(/model\\.([^\\s]+)/)[1])\n          .forEach(key => {\n            service.registerHandler(key, handler);\n          });\n      handler();\n    });\n  }\n\n  function processFieldWatch(field) {\n    const service = this;\n    if(!field.watch) return;\n\n    let schema = field.schema;\n    field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\n    _.each(field.watch, function(watch) {\n      if(watch.resolution) {\n        let condition = watch.condition;\n        let resolution = watch.resolution;\n        let handler;\n\n        if(_.isFunction(resolution)) {\n          handler = function(cur, prev) {\n            if(!condition || service.parseCondition(condition)) {\n              resolution(cur, prev);\n            }\n          };\n        }\n        else {\n          var adjustment = {};\n\n          adjustment.date = resolution.match(/\\+ ?(\\d+) (days|hours)/);\n\n          if(adjustment.date) {\n            adjustment.date = {\n              val: adjustment.date[1],\n              units: adjustment.date[2]\n            };\n            resolution = resolution.replace(adjustment.date.val, '').trim();\n          }\n          else {\n            adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\n            if(adjustment.math) {\n              adjustment.operator = {\n                '+': 'add',\n                '-': 'subtract',\n                '*': 'multiply',\n                '/': 'divide'\n              }[adjustment.math[1]];\n\n              adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n            }\n          }\n\n          resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n\n          handler = (val, prev, key, trigger) => {\n            let curCondition = condition && replaceArrayIndex(condition, key);\n            let updatePath = replaceArrayIndex(resolution[1], key);\n            let fromPath = replaceArrayIndex(resolution[2], key);\n\n            let update = service.parseExpression(updatePath);\n\n            // avoid loop where two watches keep triggering each other\n            if(trigger === update.path().key) return;\n            trigger = update.path().key;\n\n            let from = service.parseExpression(fromPath);\n\n            if(!condition || service.parseCondition(curCondition)) {\n              if(adjustment.date) {\n                update.set(moment(from.get())\n                            .add(adjustment.date.val, adjustment.date.units)\n                            .toDate());\n              }\n              else if(adjustment.math) {\n                //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n                //let result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n                let result = $parse(from.get() + adjustment.math[1] + adjustment.adjuster.get())();\n                schema = schema || field.items && (field.items[0].schema || (field.items[0].items && field.items[0].items[0].schema));\n                if(field.type === 'cn-currency') {\n                  let p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\n                  if(adjustment.math[1] === '*') {\n                    result = _.floor(result, p);\n                  }\n                  else if(adjustment.math[1] === '/') {\n                    result = _.ceil(result, p);\n                  }\n                  else {\n                    result = _.round(result, p);\n                  }\n                }\n                //service.listeners[update.path().key].prev = result;\n                if(service.listeners[trigger]) {\n                  service.listeners[trigger].trigger = key;\n                }\n                update.set(result || 0);\n              }\n              else {\n                update.set(from.get());\n              }\n            }\n          };\n        }\n\n        service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n      }\n    });\n  }\n\n  function parseCondition(condition) {\n    let service = this;\n    if(condition.startsWith(\"_\")) {\n      let exp = /^_\\.(.*?)\\((.*?),[\\s(]*(.*?)\\)?\\s*=>[{\\s]*(?:return)?(.*?)\\}?\\)$/;\n      let [, fn, list, predicateParams, predicateBody] = condition.match(exp);\n      return _[fn]($parse(list)(service), generatePredicate(predicateParams, predicateBody));\n    } else {\n      return $parse(condition)(service);\n    }\n  }\n\n  function generatePredicate(params, body) {\n    return (...args) =>\n      $parse(body)(params\n              .replace(/\\s/g, '')\n              .split(',')\n              .reduce((acc, cur, i) => { acc[cur] = args[i]; return acc; }, {})\n            );\n  }\n\n  function processFieldUpdatedSchema(field) {\n    const service = this;\n    const key = service.getKey(field.key);\n    if(!service.updates && field.updateSchema && !service.schema.params[key]) {\n      // by this point defaults should be processed so we can get value directly from model\n      const curVal = service.parseExpression(key, service.model).get();\n      if(!_.isUndefined(curVal)) service.schema.params[key] = curVal;\n    }\n    service.registerHandler(field, null, field.updateSchema);\n  }\n\n  function registerHandler(key, handler, updateSchema, runHandler) {\n    var service = this;\n\n    // if field is passed instead of key\n    if(_.isObject(key) && !_.isArray(key)) {\n      if(!key.key && key.items) {\n        _.each(key.items, function(field) {\n          service.registerHandler(field, handler, field.updateSchema);\n        });\n        return;\n      }\n      else {\n        key = key.key;\n      }\n    }\n\n    key = service.getKey(key);\n    var arrMatch = key.match(/(.*)\\[]\\.?(.*)/);\n\n    if(arrMatch) {\n      service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n      return;\n    }\n\n    var cur = service.parseExpression(key, service.model).get();\n    let defaultValue = _.get(service.getSchema(key), 'default');\n\n    if(!service.listeners[key]) {\n      var prev = angular.copy(cur);\n      service.listeners[key] = {\n        handlers: [],\n        updateSchema: updateSchema,\n        prev: prev\n      };\n    }\n\n    if(handler) {\n      service.listeners[key].handlers.push(handler);\n      if(runHandler) handler(cur, null, key);\n    }\n  }\n\n  function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n    const service = this;\n    const onArray = (cur, prev, reorder) => {\n\n      if(!prev && prev !== 0 && (cur | 0) < 1) return;\n      var i, l, key;\n\n      if(prev > cur || reorder) {\n        const lastKey = fieldKey ?\n          `${arrKey}[${prev - 1}].${fieldKey}` :\n          `${arrKey}[${prev - 1}]`;\n\n        // only deregister handlers once each time an element is removed\n        if(service.listeners[lastKey]) {\n          for(i = 0, l = prev; i < l; i++) {\n            key = fieldKey ?\n              `${arrKey}[${i}].${fieldKey}` :\n              `${arrKey}[${i}]`;\n\n            service.deregisterHandlers(key);\n          }\n        }\n        for(i = 0, l = cur; i < l; i++) {\n          key = fieldKey ?\n            `${arrKey}[${i}].${fieldKey}` :\n            `${arrKey}[${i}]`;\n\n          service.registerHandler(key, handler, updateSchema);\n          //no need to call if just reregisering handlers\n          //if(runHandler) handler(null, null, key);\n        }\n      }\n      else if(cur > (prev || 0)) {\n        for(i = prev | 0, l = cur; i < l; i++) {\n          key = fieldKey ?\n            `${arrKey}[${i}].${fieldKey}` :\n            `${arrKey}[${i}]`;\n\n          service.registerHandler(key, handler, updateSchema, runHandler);\n          //if(runHandler) handler(null, null, key);\n        }\n      }\n    };\n\n    const arrVal = service.parseExpression(arrKey, service.model).get();\n    _.each(arrVal, (field, i) => {\n      const key = fieldKey ?\n        `${arrKey}[${i}].${fieldKey}` :\n        `${arrKey}[${i}]`;\n\n      service.registerHandler(key, handler, updateSchema);\n      if(runHandler) handler(null, null, key);\n    });\n\n    const listenerKey = `${arrKey}.length`;\n    if(service.arrayListeners[listenerKey]) {\n      service.arrayListeners[listenerKey].handlers.push(onArray);\n    }\n    else {\n      service.arrayListeners[listenerKey] = {\n        handlers: [onArray],\n        prev: arrVal ? arrVal.length : 0\n      };\n    }\n  }\n\n  function deregisterHandlers(key) {\n    var service = this;\n\n    key = service.getKey(key);\n\n    var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\n    if(arrMatch) {\n      service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n      return;\n    }\n\n    if(service.listeners[key]) service.listeners[key].handlers = [];\n    //if(service.listeners[key]) delete service.listeners[key];\n  }\n\n  function deregisterArrayHandlers(arrKey, fieldKey) {\n    var service = this;\n\n    service.parseExpression(arrKey, service.model).get().forEach((item, i) => {\n      fieldKey ?\n        service.deregisterHandlers(`${arrKey}[${i}].${fieldKey}`) :\n        service.deregisterHandlers(`${arrKey}[${i}]`);\n    });\n  }\n\n  function initModelWatch() {\n    var service = this;\n    if(service.watching) return;\n    if(service.modelWatch) service.modelWatch();\n\n    service.modelWatch = $rootScope.$watch(\n      () => service.model,\n      service.onModelWatch.bind(service),\n      true\n    );\n\n    service.initSchemaParams();\n    service.watching = true;\n    service.firstUpdate = true;\n  }\n\n  function onModelWatch(cur, prev) {\n    var service = this;\n    // we always run through the listeners on the first update because angular seems to mess up\n    // when the defaults are applied and uses the same object for both cur and prev\n    if(service.firstUpdate || !angular.equals(cur, prev)) {\n      service.firstUpdate = false;\n      cnUtil.cleanModel(service.model);\n\n      service.prevParams = angular.copy(service.params);\n\n      _.each(service.arrayListeners, (listener, key) => {\n        let val = service.parseExpression(key, service.model).get();\n        if(!angular.equals(val, listener.prev)) {\n          listener.handlers.forEach(handler => handler(val, listener.prev));\n          listener.prev = angular.copy(val);\n        }\n      });\n\n      _.each(service.listeners, (listener, key) => {\n        if(listener) {\n          let val = service.parseExpression(key, service.model).get();\n          const isInitArray = angular.equals(val, []) && !listener.prev;\n          if(!angular.equals(val, listener.prev) && !isInitArray) {\n            listener.handlers.forEach(handler => {\n              handler(val, listener.prev, key, listener.trigger);\n            });\n            listener.trigger = null;\n            listener.prev = angular.copy(val);\n          }\n          if(listener.updateSchema &&\n            !angular.isUndefined(val) &&\n            !isInitArray &&\n            val !== null/* &&\n            !angular.equals(val, service.getDefault(key))*/) {\n            service.params[key] = val;\n          }\n          else {\n            delete service.params[key];\n          }\n        }\n      });\n\n      if(!angular.equals(service.params, service.prevParams)) {\n        if(service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n          service.incrementUpdates();\n        }\n        else {\n          if(_.isFunction(service.refreshSchema)) {\n            service.refreshSchema();\n          }\n        }\n      }\n    }\n  }\n\n  function initSchemaParams() {\n    var service = this;\n    _.each(service.listeners, function(listener, key) {\n      if(listener) {\n        var val = service.parseExpression(key, service.model).get();\n        if(listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n          service.params[key] = val;\n        }\n      }\n    });\n  }\n\n  function stripIndexes(key) {\n    return key.replace(/\\[\\d+]/g, '[]');\n  }\n\n  function initArrayCopyWatch() {\n    const service = this;\n\n    service.events.push($rootScope.$on('schemaFormPropagateFormController', (event, scope) => {\n      const { form } = scope;\n      if(!form.key) {\n        form.cacheKey = `${form.type}-${_.uniqueId()}`;\n      }\n      const key = form.cacheKey || service.getKey(form.key);\n\n      if(_.isNumber(scope.arrayIndex)) {\n        const genericKey = stripIndexes(key);\n        const index = scope.arrayIndex;\n        form.arrayIndex = index;\n\n        if(!service.getArrayCopy(genericKey, index)) {\n          service.processFieldProps(form, true);\n        }\n\n        if(!form.condition) form.condition = 'true';\n        else if (form.condition.includes(\"arrayIndex\")) {\n          form.condition = service.replaceArrayIndex(form.condition, key);\n        }\n\n        service.addArrayCopy(scope, genericKey, index);\n        scope.$emit('flexFormArrayCopyAdded', genericKey);\n      }\n      else {\n        service.addToScopeCache(scope, key);\n      }\n    }));\n\n    service.events.push($rootScope.$on('schemaFormDeleteFormController', (event, scope, index) => {\n      const key = service.getKey(scope.form.key);\n      const listener = service.listeners[key];\n      if(listener) listener.handlers = [];\n\n      const unindexedKey = stripIndexes(key);\n\n      // TODO -- not sure if getArrayCopiesFor is actually necessary\n      // we should look into where this function might be needed and\n      // potentially remove it\n      const copies = service.getArrayCopiesFor(unindexedKey);\n      if(!copies.length) copies.push(service.getArrayScopes(unindexedKey) || []);\n\n      copies.forEach((list) => list && list.splice(scope.arrayIndex, 1));\n\n      if(scope.form.link) {\n        var list = service.parseExpression(scope.form.link, service.model).get();\n        list.splice(index, 1);\n      }\n    }));\n  }\n\n  function addArrayCopy(form, key, index) {\n    const service = this;\n    if(!index || index < 0) index = 0;\n    if(!service.arrayCopies[key]) service.arrayCopies[key] = [];\n    service.arrayCopies[key][index] = form;\n    //service.arrayCopies[key].push(form);\n  }\n\n  function getArrayCopy(key, index) {\n    const service = this;\n    const copies = service.arrayCopies[key];\n    return copies && copies[index];\n  }\n\n  function getArrayCopies(key) {\n    const service = this;\n    return _.pluck(service.getArrayScopes(key), 'form');\n  }\n\n  function getArrayCopiesFor(keyStart) {\n    const service = this;\n    keyStart += '[]';\n\n    return _.filter(service.arrayCopies, (copy, key) => key.includes(keyStart));\n  }\n\n  function getArrayScopes(key) {\n    var service = this;\n    return service.arrayCopies[key];\n  }\n\n  function addToScopeCache(scope, key) {\n    const service = this;\n    if(service.scopeCache[key]) {\n      console.warn('caching duplicate scope for', key);\n    }\n    return service.scopeCache[key] = scope;\n  }\n\n  function getFromScopeCache(key) {\n    const service = this;\n    return service.scopeCache[key];\n  }\n\n  function addToFormCache(field, key) {\n    var service = this;\n    key = key || service.getKey(field.key);\n    if(!service.getFromFormCache(key)) service.formCache[key] = field;\n  }\n\n  function getFromFormCache(key) {\n    var service = this;\n    return service.formCache[key];\n  }\n\n  function addToDataCache(key, modelValue) {\n    var service = this;\n\n    if(key) {\n      service.dataCache[key] = modelValue;\n    }\n  }\n\n  function getFromDataCache(key) {\n    var service = this;\n\n    return service.dataCache[key];\n  }\n\n  function matchIntStrIndex(exp) {\n    return exp.match(/\\[(-?\\d+|\".*\"|'.*')]/);\n  }\n\n  function matchNestedExpression(exp) {\n    let [toReplace] = matchIntStrIndex(exp) || [];\n    const replaced = [];\n\n    while(toReplace) {\n      replaced.push(toReplace);\n      exp = exp.replace(toReplace, `ff_r${replaced.length - 1}_ff`);\n      [toReplace] = matchIntStrIndex(exp) || [];\n    }\n\n    const match = exp.match(/\\[([^[\\]]+)]([^[\\]]*)/);\n\n    return match &&\n      replaced.length ?\n      match.map((exp) => {\n        let [toReplace, index] = exp.match(/ff_r(\\d+)_ff/) || [];\n        while(toReplace) {\n          exp = exp.replace(toReplace, replaced[index]);\n          [toReplace, index] = exp.match(/ff_r(\\d+)_ff/) || [];\n        }\n        return exp;\n      }) :\n      match;\n  }\n\n  function resolveNestedExpressions(exp, depth) {\n    const service = this;\n    let [, nested] = matchNestedExpression(exp) || [];\n\n    while(nested) {\n      const parsed = service.parseExpression(nested, depth).get();\n      const keyVal = _.isUndefined(parsed) ?\n        '' :\n        _.isString(parsed) ?\n          `\"${parsed}\"` :\n          parsed;\n      exp = exp.replace(`[${nested}]`, `[${keyVal}]`);\n      [, nested] = matchNestedExpression(exp) || [];\n    }\n\n    return exp;\n  }\n\n  function parseExpression(exp, depth) {\n    const service = this;\n\n    if(!_.isString(exp) && !_.isArray(exp)) {\n      return { get: () => exp };\n    }\n\n    // if expression is specific value\n    if(/^(null|false|true|undefined|'[^\\']*'|\"[^\\\"]*\"|-?[0-9.]+|\\[]|\\{})$/.test(exp)) {\n      return {\n        \"get\": function() {\n          if(!exp) return exp;\n          const isStr = exp.match(/\"([^\\\"]*)\"/) || exp.match(/'([^\\']*)'/);\n          if(isStr) return isStr[1];\n          switch(exp) {\n            case 'null': return null;\n            case 'false': return false;\n            case 'true': return true;\n            case 'undefined': return;\n            case '[]': return [];\n            case '{}': return {};\n            default: return parseFloat(exp);\n          }\n        }\n      };\n    }\n\n    exp = service.getKey(exp);\n\n    const match = exp.match(/^(model\\.)?(\\S+)$/);\n\n    const modelValue = {\n      get() {\n        let resolved = service.resolveNestedExpressions(exp, depth);\n        let path = ObjectPath.parse(resolved);\n        let start = depth || service;\n\n        while(start && path.length > 1) {\n          start = start[path.shift()];\n        }\n\n        return start && start[path[0]];\n      },\n\n      getAssignable({ noConstruction } = {}) {\n        let resolved = service.resolveNestedExpressions(exp, depth);\n        let path = ObjectPath.parse(resolved);\n        let progress = [];\n        let start = depth || service;\n\n        while(start && path.length > 1) {\n          let key = path.shift();\n          progress.push(key);\n          if(!start[key]) {\n            if(noConstruction) {\n              return null;\n            }\n            if(/^\\d?$/.test(path[0])) {\n              start[key] = [];\n            }\n            else {\n              start[key] = {};\n            }\n          }\n          start = start[key];\n        }\n\n        return {\n          obj: start,\n          key: path[0],\n          path: service.getKey(progress),\n          fullPath: service.getKey(progress.concat(path.slice(0, 1)))\n        };\n      },\n\n      set(val, options = {}) {\n        let resolved = service.resolveNestedExpressions(exp, depth);\n        let path = ObjectPath.parse(resolved);\n        if(val === 'remove') {\n          let { obj, key } = this.getAssignable({ noConstruction: true }) || {};\n          delete service.defaults[resolved.replace('model.', '')];\n          if(obj) {\n            delete obj[key];\n          }\n        }\n        else {\n          let { obj, key } = this.getAssignable();\n          obj[key] = val;\n        }\n        if(options.silent) {\n          service.silenceListeners(resolved, depth);\n          service.skipDefaults(resolved);\n        }\n        return val;\n      },\n\n      path() {\n        return {\n          exp: exp,\n          depth: depth,\n          key: match[2]\n        };\n      }\n    };\n\n    return modelValue;\n  }\n\n  function silenceListeners(keyStart, depth) {\n    const service = this;\n    _.each(service.listeners, (listener, key) => {\n      if(key.indexOf(keyStart) === 0) {\n        listener.prev = angular.copy(service.parseExpression(key, depth).get());\n      }\n    });\n  }\n\n  function skipDefaults(keyStart) {\n    const service = this;\n    const index = keyStart.match(/\\[\\d*\\]/) ? getArrayIndex(keyStart) : null;\n    const ks = stripIndexes(keyStart);\n    const keys = _.filter(_.keys(service.formCache), (k) => k.startsWith(ks));\n    let skipKeys = [];\n    _.each(keys, (key) => {\n      const indexedKey = service.setArrayIndex(key, index); \n      const model = service.parseExpression(indexedKey, service.model).get();\n      if (_.isArray(model)) {\n        const childKeys = _.filter(_.keys(service.formCache), (k) => k.startsWith(key));\n        for (let i = 0; i < model.length; i++) {\n          _.each(childKeys, (k) => {\n            skipKeys.push(k);\n            const indexedChildKey = service.setArrayIndex(k, [index, i]);\n            service.skipDefault[indexedChildKey] = true;\n          });\n        }\n      } else if (!skipKeys.includes(key)) {\n        service.skipDefault[indexedKey] = true;\n      }\n    });\n  }\n\n  function processArray(array) {\n    var service = this;\n    var key = service.getKey(array.key);\n\n    array.sortOptions = {\n      update: function(e, ui) {\n        let listener = service.arrayListeners[`${key}.length`];\n        listener.handlers.forEach(handler => {\n          handler(listener.prev, listener.prev, true);\n        });\n      }\n    };\n\n    service.processSection(array);\n  }\n\n  function processSection(section, secondPass) {\n    var service = this;\n    // if we're here because a parent's scope was emitted,\n    // scope for this section will soon be emitted, so can skip\n    if(secondPass) return;\n    _.each(section.items, service.processField.bind(service));\n  }\n\n  function processComponent(component) {\n    var service = this;\n\n    component.type = 'section';\n    component.htmlClass = 'row';\n\n    var cols = 12 / _.reject(component.items, 'hidden').length;\n\n    _.each(component.items, function(field, i) {\n      service.processField(field);\n      component.items[i] = {\n        type: 'section',\n        htmlClass: 'col-sm-' + cols,\n        items: [field]\n      };\n    });\n  }\n\n  function processCurrency(field) {\n    field.currencyFormat = {\n      'currency-dollars': 'dollars',\n      'currency-microcents': 'microcents',\n      'currency': 'cents'\n    }[field.schema.format];\n\n    field.type = 'cn-currency';\n  }\n\n  function processPercentage(field) {\n    field.type = 'cn-percentage';\n  }\n\n  function processReusable(field) {\n    var service = this;\n    field.type = 'cn-reusable';\n    field.view = field.view || 'new';\n    field.items.forEach(service.processField.bind(service));\n    field.items = [{\n      type: 'section',\n      items: field.items,\n      condition: '!model.' + service.getKey(field.key) + '.id'\n    }];\n  }\n\n  function processMediaUpload(field) {\n    var service = this;\n    field.type = 'cn-mediaupload';\n    if(!field.resolve) {\n      field.resolve = { };\n      _.each(field.data, (exp, prop) =>\n          field.resolve[`data.${prop}`] = exp\n      );\n    }\n    service.processResolve(field);\n  }\n\n  function processCsvUpload(field) {\n    var service = this;\n    field.type = 'cn-csvupload';\n  }\n\n  function processRadios(field) {\n    field.type = 'cn-radios';\n  }\n\n  function processRadiobuttons(radios) {\n    var service = this;\n    radios.type = 'cn-radiobuttons';\n    if(radios.fullWidth) {\n      radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n    }\n  }\n\n  function processDate(date) {\n    var service = this;\n    date.type = 'cn-datetimepicker';\n\n    if(date.schema.format === 'time-minutes') {\n      date.maxView = 'hour';\n      date.iconClass = 'fa fa-clock-o';\n\n      date.modelFormatter = val => {\n        if(!val) return;\n\n        let m = moment(val);\n\n        return _.add(_.multiply(m.hours(), 60), m.minutes());\n      };\n\n      date.modelParser = val => {\n        if(!val) return;\n\n        let d = parseInt(val);\n        let hours = _.floor(d / 60);\n        let minutes = d % 60;\n\n        return moment().startOf('day').add('hours', hours).add('minutes', minutes);\n      };\n\n      date.viewFormatter = val => {\n        if(!val) return;\n\n        return date.modelParser(val).format(date.dateFormat);\n      };\n\n      date.viewParser = val => {\n        if(!val) return;\n\n        let match = val.match(/^(\\d{1,2}):?(\\d{1,2})? (a|p)/);\n        if(!match) return;\n\n        let hours = _.add(match[1] === '12' ? 0 : match[1], match[3] === 'a' ? 0 : 12);\n        let minutes = match[2] || '00';\n\n        if(minutes.length === 1) minutes += '0';\n\n        return _.add(_.multiply(hours, 60), minutes);\n      };\n    }\n  }\n\n  function getSelectValProp(select) {\n    let isArray = select.getSchemaType() === 'array';\n    return select.valueProperty ||\n      (isArray ? select.schema.items.type : select.schema.type) !== 'object' && 'value';\n  }\n\n  function getAllowedSelectValue(select, val, titleMap) {\n    titleMap = titleMap || select.getTitleMap();\n    let valProp = getSelectValProp(select);\n    if(!valProp) return;\n\n    if(select.getSchemaType() === 'array') {\n      if(!val || !_.isArray(val)) return;\n\n      let mapVal = val.map(x => _.find(titleMap, {[valProp]: x})).filter(x => x !== undefined);\n\n      return mapVal;\n    }\n    else {\n      return _.find(titleMap, {[valProp]: val});\n    }\n  }\n\n  function processSelect(select) {\n    var service = this,\n        schema = select.schema;\n\n    if(select.titleMapResolve || select.titleMap) {\n      select.getTitleMap = () =>\n        select.titleMap || service.schema.data[select.titleMapResolve];\n\n      select.onInit = function(val, form, event, setter) {\n        // make sure we use correct value\n        var modelValue = service.parseExpression(form.key, service.model);\n        if(event === 'tag-init') {\n          let newVal = getAllowedSelectValue(select, modelValue.get());\n          if(newVal !== undefined) setter(newVal);\n        }\n      };\n    }\n\n    if(select.titleMapQuery) {\n      const queryParams = select.titleMapQuery.params;\n      const paramsKeys = _.keys(queryParams);\n      select.showClearAll = true;\n      select.titleQuery = function(q) {\n        const params = _(paramsKeys)\n          .reduce((acc, key) => {\n            if (key === 'q') {\n              acc[queryParams[key]] = q;\n            } else {\n              const val = service.parseExpression(queryParams[key]).get();\n              acc[key] = val;\n            }\n            return acc;\n          }, {});\n        return Api.get({\n          url: select.titleMapQuery.url,\n          params\n        });\n      };\n\n      // wrap in string so returns truthy when compiled, but converted to number within directive\n      if(!paramsKeys.length) select.minLookup = '0';\n\n      select.onInit = function(val, form, event, setter) {\n        if(event === 'tag-init') {\n          setter(val);\n        }\n      };\n    }\n\n    if(schema.items) {\n      var defaults = [];\n      _.each(schema.items.properties, function(schema, key) {\n        if(angular.isDefined(schema.default)) {\n          defaults.push({\n            \"key\": key,\n            default: schema.default\n          });\n        }\n      });\n      if(defaults.length) {\n        select.onAdd = function(val, form, event) {\n          if(val.value && event === 'tag-added') {\n            _.each(defaults, function(prop) {\n              if(!val.value[prop.key]) val.value[prop.key] = prop.default;\n            });\n          }\n        };\n      }\n    }\n\n    if(select.displayFormat) {\n      select.itemFormatter = service.processTemplate(select.displayFormat);\n    }\n\n    if(!select.type.includes('cn-autocomplete')) {\n      if(select.items) {\n        select.detailedList = true;\n\n        if(select.items[0].type !== 'component') {\n          if(select.items.length > 1) {\n            _.each(select.items, (i) => i.destroyStrategy = \"retain\");\n            select.items = [{\n              type: \"component\",\n              items: select.items\n            }];\n          }\n\n          service.processFieldset(select);\n        }\n\n        select.type = 'cn-autocomplete-detailed';\n        select.destroyStrategy = 'retain';\n      }\n      else {\n        if(!select.selectionStyle) {\n          select.selectionStyle = select.key === 'tags' ?\n            'tags' : (select.getSchemaType() === 'array' && select.schema.maxItems !== 1) ?\n              'list' : 'select';\n        }\n        select.type = 'cn-autocomplete';\n      }\n\n      if(select.titleMapResolve) {\n        $rootScope.$on('cnFlexFormDiff:data', (e, data) => {\n          if(data[select.titleMapResolve]) {\n            let modelValue = service.parseExpression(select.key, service.model);\n            let val = modelValue.get();\n            if(val !== undefined) {\n              let valid = getAllowedSelectValue(select, val, data[select.titleMapResolve]);\n              if(valid === undefined) modelValue.set();\n            }\n          }\n        });\n      }\n\n      service.registerHandler(select.key, function(val) {\n        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n        if(form && form.$setDirty) form.$setDirty();\n      }, select.updateSchema);\n    }\n  }\n\n  function processToggle(toggle) {\n    toggle.type = 'cn-toggle';\n  }\n\n  function processHelp(help) {\n    help.htmlClass = 'help-block';\n  }\n\n  function processDisplay(display) {\n    var service = this;\n    display.type = 'cn-display';\n    display.getDisplay = service.processTemplate(display.displayFormat, true);\n  }\n\n  function processTemplate(tpl, parseScope) {\n    var service = this;\n    //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n    var processor = $interpolate;\n    return function(scope, arrayIndex) {\n      if(parseScope) {\n        if(angular.isDefined(arrayIndex)) {\n          scope = _.map(scope, function(key) {\n            return key === 'arrayIndex' ? arrayIndex : key;\n          });\n        }\n        scope = service.parseExpression(scope, service.model).get();\n      }\n      return processor(tpl)(scope);\n    };\n  }\n\n  function processTable(table) {\n    var service = this;\n    table.type = 'cn-table';\n    table.items.forEach(function(row) {\n      for (var i = 0; i < table.columns.length; i++) {\n        _.extend(row.items[i], table.columns[i]);\n        //if(row.columns[i].key) row.columns[i].key = ObjectPath.parse(row.columns[i].key);\n        service.processField(row.items[i]);\n      }\n    });\n  }\n\n  function processSelectDisplay(selectDisplay) {\n    var service = this,\n        schema = service.getSchema(selectDisplay.key),\n        selectField = _.find(selectDisplay.items, 'selectField'),\n        handler;\n\n    if(schema && schema.type === 'array') {\n      handler = service.setupArraySelectDisplay(selectDisplay, selectField);\n    } else {\n      handler = service.setupSelectDisplay(selectDisplay, selectField);\n    }\n\n    selectDisplay.selectDisplay = false;\n    service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n    //service.processField(selectDisplay);\n  }\n\n  function setupArraySelectDisplay(selectDisplay, selectField) {\n    var service = this;\n    _.each(selectDisplay.items, function(item) {\n      if(item.condition !== 'false') {\n        item.condition = 'true';\n      }\n    });\n    var handler = function(val, prev, key) {\n      var index = getArrayIndex(key);\n      _.each(selectDisplay.items, function(item) {\n        var selectKey = service.getKey(selectField.key);\n        var key = service.getKey(item.key);\n        var splitKey = ObjectPath.parse(key);\n        if(selectKey === key) return;\n        var indexedSelectKey = service.setArrayIndex(selectKey, index);\n        var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n        var formCopies = service.getArrayCopies(key);\n        if(_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          _.each(formCopies, function(copy) {\n            if(getArrayIndex(copy) == index) {\n              copy.condition = 'true';\n            }\n          });\n        } else {\n          _.each(formCopies, function(copy) {\n            if(getArrayIndex(copy) == index) {\n              copy.condition = 'false';\n              service.parseExpression(service.getKey(copy.key), service.model).set();\n            }\n          });\n        }\n      });\n    };\n    // handle legacy objects that don't have values set in the selectField\n    var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n    _.each(selectDisplay.items, function(item) {\n      var key = service.getKey(item.key);\n      var selectKey = service.getKey(selectField.key);\n      if(key === selectKey) return;\n      _.each(model, function(elem, i) {\n        var indexedKey = service.setArrayIndex(key, i);\n        var splitIndexedKey = ObjectPath.parse(indexedKey);\n        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n        var selectValue = selectModel.get();\n        var itemValue = service.parseExpression(indexedKey, service.model).get();\n        if(itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n          if(!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n          selectModel.set(selectValue);\n        }\n      });\n    });\n    // handle new objects with values set in defaults\n    var defaults = service.getSchema(selectDisplay.key).default;\n    _.each(defaults, function(elem, i) {\n      var selectKey = service.getKey(selectField.key);\n      var indexedSelectKey = service.setArrayIndex(selectKey, i);\n      var selectModel = service.parseExpression(indexedSelectKey, service.model);\n      var selectValue = selectModel.get();\n      _.each(elem, function(val, key) {\n        if(!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(key);\n        selectModel.set(selectValue);\n      });\n    });\n    // run handler once all arrayCopies have been instantiated\n    var count = 0;\n    var keyMap = _.pluck(_.reject(selectDisplay.items, {\"condition\":\"false\"}), 'key');\n    var once = $rootScope.$on('flexFormArrayCopyAdded', function(event, key) {\n      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n      if(model) {\n        var total = model.length * (keyMap.length);\n        if(_.includes(keyMap, key)) {\n          count++;\n        }\n        if(count === total) {\n          for (var i = 0; i < model.length; i++) {\n            handler(null, null, '[' + i + ']');\n          }\n          count = 0;\n        }\n      }\n    });\n    var resetCount = $rootScope.$on('flexForm.updatePage', function() {\n      count = 0;\n    });\n    service.events.push(once);\n    service.events.push(resetCount);\n    return handler;\n  }\n\n  function setupSelectDisplay(selectDisplay, selectField) {\n    var service = this;\n    var handler = function() {\n      var selectKey = service.getKey(selectField.key);\n      _.each(selectDisplay.items, function(item) {\n        var key = service.getKey(item.key);\n        var splitKey = ObjectPath.parse(key);\n        if(selectKey === key) return;\n        var selectValue = service.parseExpression(selectKey, service.model).get();\n        if(_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          item.condition = 'true';\n        } else {\n          item.condition = 'false';\n          service.parseExpression(key, service.model).set();\n        }\n      });\n    };\n    // handle legacy objects that don't have values set in the selectField\n    var selectKey = service.getKey(selectField.key);\n    var selectModel = service.parseExpression(selectKey, service.model);\n    var selectValue = selectModel.get();\n    _.each(selectDisplay.items, function(item) {\n      var key = service.getKey(item.key);\n      if(selectKey === key) return;\n      var splitKey = ObjectPath.parse(key);\n      var itemValue = service.parseExpression(key, service.model).get();\n      if(itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n        if(!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(splitKey[splitKey.length - 1]);\n        selectModel.set(selectValue);\n      }\n    });\n    // handle new objects with values set in the defaults\n    var defaults = service.getSchema(selectDisplay.key).default;\n    _.each(defaults, function(val, key) {\n      if(!selectValue) {\n        selectValue = [];\n      }\n      selectValue.push(key);\n      selectModel.set(selectValue);\n    });\n    // set default values here\n    var model = service.parseExpression(selectDisplay.key, service.model);\n    if(defaults && !model.get()) {\n      model.set(defaults);\n    }\n\n    return handler;\n  }\n\n  function setupSchemaRefresh(refresh) {\n    var service = this;\n    service.refreshSchema = _.debounce(function(updateSchema) {\n      var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n      var diff = _.omit(cnUtil.diff(service.schema.params, params, true), 'updates');\n      var keys;\n\n      if(!_.isEmpty(diff) || updateSchema) {\n        if(updateSchema) params.updateSchema = updateSchema;\n        else {\n          keys = _.keys(diff);\n\n          if(keys.length > 1) {\n            diff = _.omit(diff, _.isNull);\n            keys = _.keys(diff);\n          }\n\n          params.updateSchema = _.first(keys);\n        }\n\n        if(!params.updateSchema) {\n          diff = cnUtil.diff(params, _.omit(service.schema.params, ['updateSchema', 'updates']));\n          keys = _.keys(diff);\n\n          params.updateSchema = _.first(keys);\n        }\n\n        refresh(params).then(function(schema) {\n          service.incrementUpdates();\n          //service.updateSchema(schema);\n          service.processUpdatedSchema(schema);\n        });\n      }\n    }, 100);\n\n    service.refreshData = _.debounce(function() {\n      refresh(_.extend(service.schema.params, {updateSchema: 'refreshData'}))\n        .then(function(schema) {\n          service.processUpdatedSchema(schema);\n        });\n    }, 100);\n\n    service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n  }\n\n  function processUpdatedSchema(schema) {\n    var service = this;\n    if(schema.diff) {\n      service.schema.params = schema.params;\n\n      if(schema.diff.data) {\n        $rootScope.$broadcast('cnFlexFormDiff:data', schema.diff.data);\n        _.each(schema.diff.data, (data, prop) => {\n          if(data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n            data.data = service.schema.data[prop].data.concat(data.data);\n          }\n          service.schema.data[prop] = data;\n          if(service.resolveRegister[prop]) {\n            _.each(service.resolveRegister[prop], (registers) => {\n              registers.forEach(register => {\n                service.handleResolve(register.field, register.prop, register.exp);\n              });\n            });\n          }\n        });\n      }\n\n      const keys = [];\n\n      if(schema.diff.schema) {\n        $rootScope.$broadcast('cnFlexFormDiff:schema', schema.diff.schema);\n        _.each(schema.diff.schema, function(schema, key) {\n          service.schema.schema.properties[key] = schema;\n          reprocessSchema(schema, key, keys);\n        });\n      }\n\n      if(schema.diff.form) {\n        $rootScope.$broadcast('cnFlexFormDiff:form', schema.diff.form);\n        _.each(schema.diff.form, (form, key) => {\n\n          if(!keys.includes(key)) {\n            keys.push(key);\n          }\n\n          // don't want to override key when extending cached objects\n          //var key = form.key;\n          //delete form.key;\n\n          _.each(\n            service.getFormsToProcess(key),\n            (copy) => copy && service.reprocessField(copy, form)\n          );\n        });\n      }\n\n      if(keys.length) {\n        _.each(keys, (key) => {\n          _.each(\n            service.getFormsToProcess(key),\n            (copy) => copy && service.processField(copy)\n          );\n        });\n      }\n\n      service.broadcastErrors();\n    }\n    else {\n      service.updateSchema(schema);\n    }\n  }\n\n  function getFormsToProcess(key) {\n    const service = this;\n    const [ , arrayIndex ] = key.match(/\\[(\\d)+]/) || [];\n    const copies = service.getArrayCopies(key.replace(/\\[\\d+]/g, '[]'));\n    if(_.isUndefined(arrayIndex)) {\n      const cached = service.getFromFormCache(key);\n      return [ cached, ...copies ];\n    }\n    return [ copies[arrayIndex] ];\n  }\n\n  function reprocessField(current, update, isChild) {\n    const service = this;\n    const key = service.getKey(current.key);\n\n    // other logic in the service will add conition = 'true' to force\n    // condition to eval true, so we set the update condition to 'true'\n    // before comparing\n    if(!update.condition && current.condition) update.condition = 'true';\n    let redraw = !isChild && current.condition !== update.condition;\n\n    _.extend(current, _.omit(update, 'items', 'key'));\n\n    current._ogKeys.forEach((prop) => {\n      if(!update[prop]) {\n        delete current[prop];\n      }\n    });\n    current._ogKeys = getOgKeys(update);\n\n    service.deregisterHandlers(key);\n\n    $rootScope.$broadcast('cnFlexFormReprocessField', key);\n\n    // why do we redraw? If we're doing it to show error message\n    // that has been addressed from the angular-schema-form library\n    // if there's another issue, try triggering the specific action required\n    // instead of redrawing the whole form\n    if(redraw && current.redraw) {\n      console.log('TODO: see if this can be removed');\n      current.redraw();\n    }\n  }\n\n  function reprocessSchema(schema, key, keys) {\n    keys.push(key);\n    if(schema.properties) {\n      _.each(schema.properties, function(schema, subKey) {\n        reprocessSchema(schema, key + '.' + subKey, keys);\n      });\n    }\n    if(schema.items && schema.items.properties) {\n      _.each(schema.properties, function(schema, subKey) {\n        reprocessSchema(schema, key + '[].' + subKey, keys);\n      });\n    }\n  }\n\n  function getDotKey(key) {\n    return (_.isString(key) ? ObjectPath.parse(key) : key).join('.');\n  }\n\n  function buildError(field) {\n    return {\n      key: getDotKey(field.key),\n      message: field.error\n    };\n  }\n\n  function broadcastErrors() {\n    var service = this;\n    $timeout(function() {\n      if (_.get(service, 'errors')) {\n        service.errors.forEach(function(error) {\n          $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n        });\n      }\n    }, 1);\n  }\n\n  function replaceArrayIndex(resolve, key) {\n    while(resolve.includes('arrayIndex')) {\n      if(_.isNumber(key)) return resolve.replace(/arrayIndex/g, key);\n      const arrayIndexKey = /([^.[]*)\\[arrayIndex\\]/.exec(resolve);\n      const re = new RegExp(arrayIndexKey[1] + '\\\\[(-?\\\\d+)\\\\]');\n      const index = re.exec(key);\n      if(!index) return resolve;\n      resolve = resolve.replace(new RegExp(arrayIndexKey[0].replace(/(\\[|\\])/g, '\\\\$1'), 'g'), index[0]);\n    }\n    return resolve;\n  }\n\n  function getArrayIndex(key) {\n    if(_.isObject(key)) {\n      return _.find(key.key, function(key) {\n        return _.isNumber(key);\n      });\n    }\n    return /\\[(\\d*)\\]/.exec(key)[1];\n  }\n\n  function setArrayIndex(key, index, asArray) {\n    const service = this;\n    let keyCopy;\n    if (!_.isArray(index)) {\n      index = [index];\n    }\n    if(_.isString(key)) {\n      keyCopy = ObjectPath.parse(key);\n    } else {\n      keyCopy = _.clone(key);\n    }\n    while (index.length && keyCopy.indexOf('') > -1) {\n      let indexOfIndex = keyCopy.indexOf('');\n      keyCopy[indexOfIndex] = index.shift();\n    }\n    if(asArray) {\n      return keyCopy;\n    } else {\n      return service.getKey(keyCopy);\n    }\n  }\n\n  function cleanup() {\n    var service = this;\n    _.each(service.events, function(listener) {\n      listener();\n    });\n  }\n\n  function incrementUpdates() {\n    const service =  this;\n    ++service.updates;\n    service.params.updates = service.updates;\n  }\n}\n\n//angular\n    //.module('cn.flex-form')\n    //.provider('cnFlexFormService', cnFlexFormServiceProvider);\n\nexport default cnFlexFormServiceProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form.service.js","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"objectpath\"\n// module id = 7\n// module chunks = 0","const modalMap = {};\nconst promiseMap = {};\n\nfunction getPromises(state) {\n  if(promiseMap[state]) return promiseMap[state];\n\n  const promise = {};\n  promiseMap[state] = promise;\n  return promise;\n}\n\nfunction getPromise(state, id, $q) {\n  const promises = getPromises(state);\n  if(promises[id]) return promises[id];\n\n  const promise = $q.defer();\n  promises[id] = promise;\n  return promise;\n}\n\nfunction cnFlexFormModalLoaderServiceProvider() {\n\n  return {\n    addMapping,\n    $get: cnFlexFormModalLoaderService\n  };\n\n  ////////////\n\n  function addMapping(state, def) {\n    def.resolve = { parent };\n    modalMap[state] = def;\n  }\n\n  function parent($stateParams, $q) {\n    'ngInject';\n\n    return (\n      getPromise($stateParams.modal, $stateParams.modalId, $q)\n      .promise\n      .then(({ parent }) => parent)\n    );\n  }\n}\n\nfunction cnFlexFormModalLoaderService($stateParams, $q) {\n  'ngInject';\n\n  return {\n    getMapping,\n    resolveMapping,\n    removeMapping\n  };\n\n  /////////////\n\n  function resolveMapping(state, id, parent, options = {}) {\n    console.info(':: RESOLVE MAPPING CALLED ::');\n    const { scope } = options;\n    if(scope) {\n      scope.options = scope.options || {};\n      scope.options.destroyStrategy = 'retain';\n      modalMap[state].scope = scope;\n    }\n    const d = getPromise(state, id, $q);\n    d.resolve({ parent, options });\n    return d.promise;\n  }\n\n  function getMapping(state) {\n    const d = $q.defer();\n    getPromise($stateParams.modal, $stateParams.modalId, $q)\n      .promise\n      .then(({ parent, options }) => {\n        d.resolve({ state: modalMap[state], options });\n        return parent;\n      });\n    return d.promise;\n  }\n\n  // Holding on to scope references creates memory leaks\n  function removeMapping(state) {\n    modalMap[state] = null;\n    promiseMap[state] = null;\n  }\n}\n\nexport default cnFlexFormModalLoaderServiceProvider;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-modal-loader.service.js","function FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams, $scope) {\n  'ngInject';\n\n  function FFModalLoaderTag() {}\n  $scope.__tag = FFModalLoaderTag();\n\n  const vm = this;\n\n  activate();\n\n  //////////\n\n  function activate() {\n    FlexFormModal\n      .open(vm)\n      .then(({ modal, options: { onDismiss, onAfterDismiss } }) => {\n        vm.modal = modal;\n        vm.modal.result.finally(goBack);\n\n        if(onDismiss) vm.modal.result.catch(() => onDismiss($stateParams.restParams));\n        vm.dismissEvent = $rootScope.$on('$stateChangeStart', dismissModal);\n      });\n  }\n\n  function goBack() {\n    if(!$state.transition) {\n      $state.go('^');\n    }\n  }\n\n  function dismissModal() {\n    // unbind event\n    vm.dismissEvent();\n    vm.modal.opened.then(() =>\n        vm.modal.dismiss()\n    );\n  }\n}\n\nfunction FlexFormModal(cnFlexFormModalLoaderService, $uibModal, $stateParams) {\n  'ngInject';\n\n  return { open };\n\n  ////////////\n\n  function open() {\n    return (\n      cnFlexFormModalLoaderService\n        .getMapping($stateParams.modal)\n        .then(({ state, options }) => ({\n          modal: $uibModal.open(state),\n          options\n        }))\n    );\n  }\n\n}\n\nexport { FlexFormModalLoader, FlexFormModal };\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-modal-loader.js","function cnFlexForm() {\n  return {\n    restrict: 'E',\n    template: `\n      <div ng-if=\"vm.showForm()\">\n        <ng-form\n          class=\"clearfix\"\n          name=\"{{vm.formName}}\"\n          sf-schema=\"vm.config.schema.schema\"\n          sf-form=\"vm.form\"\n          sf-model=\"vm.model\">\n        </ng-form>\n        <!-- debug panel to display model -->\n        <section ng-if=\"vm.debug\">\n          <json-explorer json-data=\"vm.model || '...model not loaded yet'\"/>\n        </section>\n      </div>\n    `,\n    scope: {\n      config: '=ffConfig',\n      model: '=ffModel',\n      formIndex: '=ffFormIndex',\n      formName: '=ffFormName',\n      delayForm: '=ffDelayForm',\n      cleanupEvent: '=ffCleanupEvent'\n    },\n    controller: FlexForm,\n    controllerAs: 'vm',\n    bindToController: true\n  };\n}\n\nfunction FlexForm(cnFlexFormService, $scope, $location) {\n  'ngInject';\n\n  function cnFlexFormTag() {}\n  $scope.__tag = new cnFlexFormTag();\n\n  var vm = this;\n  vm.service = undefined;\n  vm.events = [];\n\n  vm.activate = activate;\n  vm.cleanup = cleanup;\n  vm.process = process;\n  vm.showForm = showForm;\n\n  vm.events.push($scope.$watch(function() { return vm.config.schema; }, vm.process));\n\n  vm.activate();\n\n  $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\n  //////////\n\n  function activate() {\n    if(angular.isNumber(vm.formIndex)) {\n      vm.form = vm.config.schema.forms[vm.formIndex].form;\n    }\n    else {\n      vm.form = vm.config.schema.form;\n    }\n\n    // debug\n    if($location.search().debug) {\n      vm.debug = true;\n    }\n  }\n\n  function process(cur, prev) {\n    if(vm.form) {\n      if(!vm.service) {\n        vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n          formCtrl: vm.config.formCtrl,\n          getSchema: vm.config.getSchema,\n          updateSchema: updateSchema\n        });\n      }\n      else {\n        vm.service.compile(vm.config.schema, vm.model);\n      }\n    }\n  }\n\n  function showForm() {\n    return !vm.delayForm && vm.service && vm.service.isCompiled();\n  }\n\n  function updateSchema(schema) {\n    vm.config.schema = schema;\n    vm.activate();\n  }\n\n  function cleanup() {\n    _.each(vm.events, function(listener) {\n      listener();\n    });\n\n    cnFlexFormService.destroyService(vm.service);\n  }\n\n}\n\nexport default cnFlexForm;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form.directive.js","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 11\n// module chunks = 0","function cnFlexFormHeader() {\n  return {\n    restrict: 'E',\n    scope: {\n      config: '=ffHeaderConfig',\n      submit: '&ffSubmit',\n      loadOffscreen: '&ffLoadOffscreen'\n    },\n    controller: FlexFormHeader,\n    bindToController: true,\n    controllerAs: 'vm',\n    template: `\n        <div class=\"col-md-6\">\n          <h5 ng-if=\"vm.title.lead\">{{::vm.title.lead}}</h5>\n          <h1>\n            <i ng-show=\"vm.title.icon\" class=\"{{vm.title.icon}}\"/>\n            {{vm.title.main}}\n          </h1>\n          <h5 ng-if=\"vm.title.sub\">{{::vm.title.sub}}</h5>\n        </div>\n        <div class=\"{{vm.buttonContainerClass || 'page-action-btns'}}\">\n          <div class=\"btn-options\"\n               ng-mouseover=\"vm.loadOffscreen()\">\n            <a class=\"btn btn-{{vm.returnStyle ? vm.returnStyle : 'default-dark'\"\n               ng-if=\"vm.returnState\"\n               ui-sref=\"{{vm.returnState}}\">\n              {{vm.returnText || 'Cancel'}}\n            </a>\n            <a class=\"btn btn-{{vm.closeButton.style ? vm.closeButton.style : 'default-dark'}}\"\n               ng-if=\"vm.closeButton\"\n               ng-click=\"vm.closeButton.handler()\">\n               Cancel\n            </a>\n            <span ng-repeat=\"button in vm.actions\">\n              <span ng-class=\"{'btn-group': button.options}\">\n                <a class=\"btn {{button.style ? 'btn-'+button.style : ($index === vm.actions.length - 1 ? 'btn-primary' : 'btn-default-dark')}}\"\n                   ng-disabled=\"vm.isDisabled(button)\"\n                   ng-click=\"vm.submit({handler: button.handler})\"\n                   uib-tooltip=\"{{button.helptext}}\"\n                   uib-tooltip-placement=\"bottom\"\n                   ng-bind-html=\"button.text || 'Save'\">\n                </a>\n                <a class=\"btn {{button.style ? 'btn-'+button.style : ($index === vm.actions.length - 1 ? 'btn-primary' : 'btn-default-dark')}} dropdown-toggle\"\n                        ng-disabled=\"vm.isDisabled(button)\"\n                        ng-show=\"button.options\"\n                        data-toggle=\"dropdown\">\n                  <span class=\"caret\"></span>\n                </a>\n                <ul class=\"dropdown-menu\" ng-if=\"button.options\">\n                  <li ng-repeat=\"option in button.options\"\n                      ng-disabled=\"vm.isDisabled(option)\">\n                    <a ng-click=\"vm.submit({handler: option.handler})\"\n                       ng-bind-html=\"option.text\">\n                    </a>\n                  </li>\n                </ul>\n              </span>\n            </span>\n          </div>\n          <p class=\"data-updated-at text-right\"\n             id=\"data-updated-at\"\n             ng-hide=\"vm.config.noData\">\n            <a ng-click=\"vm.updateData()\">Update Data</a>\n          </p>\n        </div>`\n  };\n}\n\nfunction FlexFormHeader($scope) {\n  'ngInject';\n\n  function ffHeaderTag() {}\n  $scope.__tag = new ffHeaderTag();\n\n  const vm = this;\n\n  vm.updateData = updateData;\n  vm.isDisabled = isDisabled;\n\n  //activate();\n  $scope.$watch('vm.config', activate, true);\n\n  ///////////\n\n  function activate() {\n    ({ title: vm.title } = vm.config);\n    ({\n      returnState: vm.returnState,\n      returnStyle: vm.returnStyle,\n      returnText: vm.returnText,\n      closeButton: vm.closeButton,\n      actions: vm.actions\n    } = vm.config.actionConfig || {});\n  }\n\n  function updateData() {\n    $scope.$emit('ffRefreshData');\n  }\n\n  function isDisabled(btnConfig) {\n    if(vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n    return false;\n  }\n}\n\nexport default cnFlexFormHeader;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-header.directive.js","function ffValidate() {\n  return {\n    restrict: 'A',\n    scope: { form: '=ffValidate' },\n    require: 'ngModel',\n    link: link\n  };\n}\n\nfunction link($scope, elem, attrs, ngModel) {\n  function ffValidateTag() {}\n  $scope.__tag = new ffValidateTag();\n\n  if($scope.form && $scope.form.required) {\n    $scope.$watch(function() { return ngModel.$viewValue; }, function(value) {\n      // override schemaForm validation\n      ngModel.$setValidity('schemaForm', true);\n      ngModel.$setValidity('tv4-302', value);\n    });\n  }\n}\n\nexport default ffValidate;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-flex-form-validate.directive.js"],"sourceRoot":""}