{"version":3,"sources":["all.min.js","_cn-flex-form.module.js","cn-flex-form-config.service.js","cn-flex-form-header.directive.js","cn-flex-form-modal-loader.js","cn-flex-form-modal-loader.service.js","cn-flex-form-types.service.js","cn-flex-form-validate.directive.js","cn-flex-form.directive.js","cn-flex-form.routes.js","cn-flex-form.service.js","sandbox.js","schema-form-extensions.js"],"names":["angular","module","cnFlexFormConfigProvider","addIgnoreParam","param","ignoreParams","push","cnFlexFormConfig","$stateParams","getStateParams","_","chain","omit","v","isUndefined","isNull","value","$inject","$get","provider","cnFlexFormHeader","restrict","scope","config","submit","loadOffscreen","controller","FlexFormHeader","bindToController","controllerAs","template","$scope","updateData","console","log","$emit","isDisabled","btnConfig","vm","this","directive","FlexFormModalLoader","FlexFormModal","$state","$rootScope","activate","modal","open","result","goBack","dismiss","$on","dismissModal","go","arguments","cnFlexFormModalLoaderService","$modal","openModal","currentModal","getMapping","instance","factory","getPromises","state","promises","promiseMap","getPromise","id","$q","promise","defer","cnFlexFormModalLoaderServiceProvider","addMapping","def","resolve","parent","modalMap","modalId","resolveMapping","d","service","cnFlexFormTypesProvider","registerFieldType","fieldType","fieldTypeRegister","unshift","cnFlexFormTypes","getFieldType","field","i","l","length","condition","type","schema","includes","titleMap","titleMapResolve","titleMapQuery","format","ffValidate","form","require","link","elem","attrs","ngModel","required","$watch","$viewValue","$setValidity","cnFlexForm","model","formIndex","formName","delayForm","cleanupEvent","FlexForm","cnFlexFormService","$location","isNumber","forms","search","debug","process","cur","prev","isCompiled","compile","formCtrl","getSchema","updateSchema","showForm","cleanup","each","events","listener","undefined","cnFlexFormRoutesProvider","$stateProvider","addStates","options","name","url","permissions","cnFlexFormRoutes","templateUrl","cnFlexFormServiceProvider","schemaFormDecoratorsProvider","registerField","handler","fieldTypeHandlers","createDirective","CNFlexFormService","Api","$parse","$interpolate","$timeout","cnUtil","CNFlexFormConstructor","services","CNFlexForm","window","arrayCopies","arrayListeners","dataCache","defaults","errors","formCache","listeners","resolveRegister","updates","params","setupConfig","processField","bind","initModelWatch","initArrayCopyWatch","broadcastErrors","setValue","compiled","getSchemaForm","setupSchemaRefresh","processSchema","getSchemaType","isArray","first","processDefault","key","getKey","parseExpression","modelValue","get","equals","set","copy","processFieldset","fieldset","items","collapsible","toggleCollapse","collapsed","render","selectDisplay","processSelectDisplay","_ogKeys","without","keys","addToFormCache","description","readonly","processResolve","watch","processFieldWatch","processSection","processComponent","isString","isFunction","call","registerHandler","error","buildError","isEmpty","ngModelOptions","allowInvalid","find","reject","$broadcast","reduce","total","next","test","depth","replace","split","properties","matchArray","match","shift","slice","dataProp","fieldProp","handleResolve","resolveType","registerResolve","exp","data","cursor","loadMore","refreshSchema","fieldKey","register","prop","resolution","functionCondition","isConditionFunction","parsedCondition","parseCondition","adjustment","date","trim","math","operator","+","-","*","/","adjuster","updatePath","fromPath","replaceArrayIndex","update","from","moment","add","toDate","eval","p","floor","ceil","round","path","initialize","original","invert","functionName","functionArgument","predicate","arr","comparator","comparisonValue","evaluation","forEach","val","evaluatePredicate","toString","val1","val2","runHandler","isObject","arrMatch","registerArrayHandlers","handlers","arrKey","onArray","lastKey","deregisterHandlers","arrVal","deregisterArrayHandlers","item","watching","modelWatch","onModelWatch","initSchemaParams","firstUpdate","cleanModel","prevParams","event","index","parseInt","addArrayCopy","copies","getArrayCopiesFor","list","splice","getArrayCopies","keyStart","copiesList","getFromFormCache","addToDataCache","getFromDataCache","start","section","component","htmlClass","cols","processCurrency","currencyFormat","currency-dollars","currency-microcents","currency","processPercentage","processReusable","view","processMediaUpload","processCsvUpload","processRadiobuttons","radios","fullWidth","btnClass","divide","processDate","processSelect","select","getTitleMap","onInit","setter","newVal","valueProperty","q","titleQuery","minLookup","isDefined","default","onAdd","detailedList","selectionStyle","maxItems","displayFormat","itemFormatter","processTemplate","$setDirty","processToggle","toggle","processHelp","help","processDisplay","display","getDisplay","tpl","parseScope","processor","arrayIndex","map","selectField","setupArraySelectDisplay","setupSelectDisplay","getArrayIndex","selectKey","splitKey","ObjectPath","parse","indexedSelectKey","setArrayIndex","selectValue","formCopies","indexedKey","splitIndexedKey","selectModel","itemValue","count","keyMap","pluck","once","resetCount","refresh","debounce","extend","diff","then","processUpdatedSchema","refreshData","reset","concat","registers","reprocessSchema","indexOf","cached","reprocessField","current","isChild","redraw","subKey","message","arrayIndexKey","exec","re","RegExp","asArray","keyCopy","clone","indexOfIndex","prototype","cn-radiobuttons","cn-autocomplete","cn-datetimepicker","cn-display","cn-currency","cn-percentage","cn-mediaupload","cn-csvupload","cn-reusable","cn-toggle","FlexFormSandbox","onSchema","schemaStr","fromJson","schemaFormConfig","extensions","extension","addTemplates","$templateCache","put","sharedAutocompleteTpl","run"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form', ['ui.router', 'schemaForm', 'ui.bootstrap.datetimepicker', 'cnTagsInput', 'cn.util']);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\n  function cnFlexFormConfigProvider() {\n\n    cnFlexFormConfig.$inject = ['$stateParams'];\n\n    var ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\n    return {\n      addIgnoreParam: addIgnoreParam,\n      $get: cnFlexFormConfig\n    };\n\n    ////////\n\n    function addIgnoreParam(param) {\n      ignoreParams.push(param);\n    }\n\n    function cnFlexFormConfig($stateParams) {\n      return {\n        getStateParams: getStateParams,\n        ignoreParams: ignoreParams\n      };\n\n      ////////\n\n      function getStateParams() {\n        return _.chain($stateParams).omit(ignoreParams).omit(function (v) {\n          return _.isUndefined(v) || _.isNull(v);\n        }).value();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').directive('cnFlexFormHeader', cnFlexFormHeader);\n\n  function cnFlexFormHeader() {\n    return {\n      restrict: 'E',\n      scope: {\n        config: '=ffHeaderConfig',\n        submit: '&ffSubmit',\n        loadOffscreen: '&ffLoadOffscreen'\n      },\n      controller: FlexFormHeader,\n      bindToController: true,\n      controllerAs: 'vm',\n      template: '\\\n          <div class=\"col-md-6\">\\\n            <h5 ng-if=\"vm.config.title.lead\">{{::vm.config.title.lead}}</h5>\\\n            <h1>{{vm.config.title.main}}</h1>\\\n            <h5 ng-if=\"vm.config.title.sub\">{{::vm.config.title.sub}}</h5>\\\n          </div>\\\n          <div class=\"{{vm.config.buttonContainerClass || \\'page-action-btns\\'}}\">\\\n            <div class=\"btn-options\"\\\n                 ng-mouseover=\"vm.loadOffscreen()\">\\\n              <a class=\"btn\"\\\n                 ng-if=\"vm.config.actionConfig.returnState\"\\\n                 ui-sref=\"{{vm.config.actionConfig.returnState}}\">\\\n                {{vm.config.actionConfig.returnText || \\'Cancel\\'}}\\\n              </a>\\\n              <span ng-repeat=\"button in vm.config.actionConfig.actions\">\\\n                <a class=\"btn {{button.style && \\'btn-\\'+button.style}}\"\\\n                   ng-disabled=\"vm.isDisabled(button)\"\\\n                   ng-class=\"{\\'btn-primary\\': $index === vm.config.actionConfig.actions.length - 1}\"\\\n                   ng-click=\"vm.submit({ handler: button.handler})\"\\\n                   tooltip=\"{{button.helptext}}\"\\\n                   tooltip-placement=\"bottom\">\\\n                  {{button.text || \\'Save\\'}}\\\n                </a>\\\n              </span>\\\n            </div>\\\n            <p class=\"data-updated-at text-right\"\\\n               id=\"data-updated-at\"\\\n               ng-hide=\"vm.config.noData\">\\\n              <a ng-click=\"vm.updateData()\">Update Data</a>\\\n            </p>\\\n          </div>'\n    };\n  }\n\n  FlexFormHeader.$inject = ['$scope'];\n  function FlexFormHeader($scope) {\n    var vm = this;\n\n    vm.updateData = updateData;\n    vm.isDisabled = isDisabled;\n\n    ///////////\n\n    function updateData() {\n      console.log('updateData:', updateData);\n      $scope.$emit('ffRefreshData');\n    }\n\n    function isDisabled(btnConfig) {\n      if (vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n      return false;\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').controller('FlexFormModalLoader', FlexFormModalLoader).factory('FlexFormModal', FlexFormModal);\n\n  FlexFormModalLoader.$inject = ['FlexFormModal', '$state', '$rootScope', '$stateParams'];\n  function FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams) {\n\n    var vm = this;\n    console.log('FlexFormModalLoader:', $stateParams.modal);\n\n    activate();\n\n    //////////\n\n    function activate() {\n      vm.modal = FlexFormModal.open(vm);\n      vm.modal.result.finally(goBack);\n\n      vm.dismiss = $rootScope.$on('$stateChangeStart', dismissModal);\n    }\n\n    function goBack() {\n      console.log('goBack:');\n      $state.go('^');\n    }\n\n    function dismissModal() {\n      console.log('dismissModal:', arguments);\n      vm.dismiss();\n      vm.modal.dismiss();\n    }\n  }\n\n  FlexFormModal.$inject = ['cnFlexFormModalLoaderService', '$modal', '$stateParams'];\n  function FlexFormModal(cnFlexFormModalLoaderService, $modal, $stateParams) {\n\n    var instance = {\n      open: openModal\n    };\n\n    return instance;\n\n    function openModal() {\n      var currentModal = cnFlexFormModalLoaderService.getMapping($stateParams.modal);\n      console.log('currentModal:', currentModal);\n\n      this.modal = $modal.open(currentModal);\n      return this.modal;\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider);\n\n  var modalMap = {};\n  var promiseMap = {};\n\n  function getPromises(state) {\n    var promises = promiseMap[state];\n    if (!promises) {\n      promises = {};\n      promiseMap[state] = promises;\n    }\n    return promises;\n  }\n\n  function getPromise(state, id, $q) {\n    var promises = getPromises(state);\n    var promise = promises[id];\n    if (!promise) {\n      promise = $q.defer();\n      promises[id] = promise;\n    }\n    return promise;\n  }\n\n  function cnFlexFormModalLoaderServiceProvider() {\n\n    var provider = {\n      addMapping: addMapping,\n      $get: cnFlexFormModalLoaderService\n    };\n\n    parent.$inject = ['$stateParams', '$q'];\n\n    return provider;\n\n    ////////////\n\n    function addMapping(state, def) {\n      def.resolve = {\n        parent: parent\n      };\n      modalMap[state] = def;\n    }\n\n    function parent($stateParams, $q) {\n      return getPromise($stateParams.modal, $stateParams.modalId, $q).promise;\n    }\n  }\n\n  cnFlexFormModalLoaderService.$inject = ['$q'];\n\n  function cnFlexFormModalLoaderService($q) {\n    var service = {\n      getMapping: getMapping,\n      resolveMapping: resolveMapping\n    };\n\n    return service;\n\n    /////////////\n\n    function resolveMapping(state, id, parent) {\n      var d = getPromise(state, id, $q);\n      d.resolve(parent);\n      return d.promise;\n    }\n\n    function getMapping(state) {\n      return modalMap[state];\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\n  function cnFlexFormTypesProvider() {\n\n    var fieldTypeRegister = [{\n      condition: function condition(field) {\n        return field.type === 'hidden';\n      },\n      type: 'hidden'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('radios');\n      },\n      type: 'cn-radios'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('radiobuttons');\n      },\n      type: 'cn-radiobuttons'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery;\n      },\n      type: 'cn-autocomplete'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'cn-datetimepicker' || field.type === 'datetime-local';\n      },\n      type: 'cn-datetimepicker'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'help';\n      },\n      type: 'help'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('display');\n      },\n      type: 'cn-display'\n    }, {\n      condition: function condition(field) {\n        return field.schema && field.schema.format && field.schema.format.includes('currency');\n      },\n      type: 'cn-currency'\n    }, {\n      condition: function condition(field) {\n        return field.schema && field.schema.format === 'percentage';\n      },\n      type: 'cn-percentage'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'toggle' || field.type === 'boolean';\n      },\n      type: 'cn-toggle'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'mediaupload';\n      },\n      type: 'cn-mediaupload'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'csvupload';\n      },\n      type: 'cn-csvupload'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'reusable';\n      },\n      type: 'cn-reusable'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'array';\n      },\n      type: 'section'\n    }];\n\n    return {\n      registerFieldType: registerFieldType,\n      $get: cnFlexFormTypes\n    };\n\n    ////////\n\n    function registerFieldType(fieldType) {\n      fieldTypeRegister.unshift(fieldType);\n    }\n\n    function cnFlexFormTypes() {\n      return {\n        fieldTypeRegister: fieldTypeRegister,\n        getFieldType: getFieldType\n      };\n\n      /////////\n\n      function getFieldType(field) {\n        for (var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n          if (fieldTypeRegister[i].condition(field)) {\n            return fieldTypeRegister[i].type;\n          }\n        }\n        return field.type || field.schema && field.schema.type;\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').directive('ffValidate', ffValidate);\n\n  function ffValidate() {\n    return {\n      restrict: 'A',\n      scope: { form: '=ffValidate' },\n      require: 'ngModel',\n      link: link\n    };\n  }\n\n  function link($scope, elem, attrs, ngModel) {\n    //console.log('$scope, ngModel:', $scope.form, ngModel);\n    if ($scope.form && $scope.form.required) {\n      $scope.$watch(function () {\n        return ngModel.$viewValue;\n      }, function (value) {\n        // override schemaForm validation\n        ngModel.$setValidity('schemaForm', true);\n        ngModel.$setValidity('tv4-302', value);\n      });\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').directive('cnFlexForm', cnFlexForm);\n\n  function cnFlexForm() {\n    return {\n      restrict: 'E',\n      template: '\\\n        <div ng-if=\"vm.showForm()\">\\\n          <ng-form name=\"{{vm.formName}}\"\\\n                sf-schema=\"vm.config.schema.schema\"\\\n                sf-form=\"vm.form\"\\\n                sf-model=\"vm.model\"></ng-form>\\\n          <!-- debug panel to display model -->\\\n          <pre ng-if=\"vm.debug\">{{vm.model|json}}</pre>\\\n        </div>\\\n      ',\n      scope: {\n        config: '=ffConfig',\n        model: '=ffModel',\n        formIndex: '=ffFormIndex',\n        formName: '=ffFormName',\n        delayForm: '=ffDelayForm',\n        cleanupEvent: '=ffCleanupEvent'\n      },\n      controller: FlexForm,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  FlexForm.$inject = ['cnFlexFormService', '$scope', '$location'];\n  function FlexForm(cnFlexFormService, $scope, $location) {\n    var vm = this;\n    vm.service = undefined;\n    vm.events = [];\n\n    vm.activate = activate;\n    vm.cleanup = cleanup;\n    vm.process = process;\n    vm.showForm = showForm;\n\n    vm.events.push($scope.$watch(function () {\n      return vm.config.schema;\n    }, vm.process));\n\n    vm.activate();\n\n    $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\n    //////////\n\n    function activate() {\n      //console.log('vm.formName:', vm.formName);\n      if (angular.isNumber(vm.formIndex)) {\n        vm.form = vm.config.schema.forms[vm.formIndex].form;\n      } else {\n        vm.form = vm.config.schema.form;\n      }\n\n      // debug\n      if ($location.search().debug) {\n        vm.debug = true;\n      }\n    }\n\n    function process(cur, prev) {\n      //console.log('process:', cur, prev);\n      if (vm.form) {\n        if (!vm.service) {\n          vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n            formCtrl: vm.config.formCtrl,\n            getSchema: vm.config.getSchema,\n            updateSchema: updateSchema\n          });\n        } else {\n          console.log('vm.service.isCompiled():', vm.service.isCompiled());\n          vm.service.compile(vm.config.schema, vm.model);\n        }\n        //$scope.$broadcast('schemaFormRedraw');\n      }\n    }\n\n    function showForm() {\n      //console.log('showForm:', vm.delayForm, vm.formName);\n      return !vm.delayForm && vm.service && vm.service.isCompiled();\n    }\n\n    function updateSchema(schema) {\n      vm.config.schema = schema;\n      vm.activate();\n    }\n\n    function cleanup() {\n      _.each(vm.events, function (listener) {\n        listener();\n      });\n      vm.service.cleanup();\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  angular.module('cn.flex-form').provider('cnFlexFormRoutes', cnFlexFormRoutesProvider).config(cnFlexFormRoutes);\n\n  cnFlexFormRoutesProvider.$inject = ['$stateProvider'];\n  function cnFlexFormRoutesProvider($stateProvider) {\n    var provider = {\n      addStates: addStates,\n      $get: $get\n    };\n\n    return provider;\n\n    ////////////\n\n    function $get() {\n      // nothing to do here, but required\n    }\n\n    function addStates(options) {\n      $stateProvider.state(options.name + '.page.modal', {\n        url: '/~:modal/:modalId',\n        controller: 'FlexFormModalLoader',\n        controllerAs: 'vm',\n        permissions: options.permissions\n      });\n    }\n  }\n\n  cnFlexFormRoutes.$inject = ['$stateProvider'];\n  function cnFlexFormRoutes($stateProvider) {\n\n    $stateProvider.state('flex-form-sandbox', {\n      url: '/flex-form/sandbox',\n      controller: 'FlexFormSandbox',\n      controllerAs: 'vm',\n      templateUrl: 'app/components/cn-flex-form/sandbox.html'\n    });\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormService', cnFlexFormServiceProvider);\n\n  var fieldTypeHandlers = {\n    //'cn-radios': 'processRadios',\n    'cn-radiobuttons': 'processRadiobuttons',\n    'cn-autocomplete': 'processSelect',\n    'cn-datetimepicker': 'processDate',\n    'help': 'processHelp',\n    'cn-display': 'processDisplay',\n    'cn-currency': 'processCurrency',\n    'cn-percentage': 'processPercentage',\n    'cn-mediaupload': 'processMediaUpload',\n    'cn-csvupload': 'processCsvUpload',\n    'cn-reusable': 'processReusable',\n    'cn-toggle': 'processToggle',\n    'section': 'processSection'\n  };\n\n  cnFlexFormServiceProvider.$inject = ['schemaFormDecoratorsProvider', 'cnFlexFormTypesProvider'];\n\n  function cnFlexFormServiceProvider(schemaFormDecoratorsProvider, cnFlexFormTypesProvider) {\n    return {\n      registerField: registerField,\n      $get: CNFlexFormService\n    };\n\n    //////////\n\n    function registerField(fieldType) {\n      if (fieldType.condition) {\n        cnFlexFormTypesProvider.registerFieldType({\n          condition: fieldType.condition,\n          type: fieldType.type\n        });\n      }\n\n      if (fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n\n      if (fieldType.templateUrl) {\n        schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', fieldType.type, fieldType.templateUrl);\n        schemaFormDecoratorsProvider.createDirective(fieldType.type, fieldType.templateUrl);\n      }\n    }\n  }\n\n  CNFlexFormService.$inject = ['Api', '$parse', 'cnFlexFormConfig', 'cnFlexFormTypes', '$interpolate', '$rootScope', '$timeout', 'cnUtil', '$stateParams'];\n\n  function CNFlexFormService(Api, $parse, cnFlexFormConfig, cnFlexFormTypes, $interpolate, $rootScope, $timeout, cnUtil, $stateParams) {\n\n    var services = [];\n    var prototype = {\n      compile: compile,\n      addArrayCopy: addArrayCopy,\n      addToDataCache: addToDataCache,\n      addToFormCache: addToFormCache,\n      broadcastErrors: broadcastErrors,\n      buildError: buildError,\n      cleanup: cleanup,\n      deregisterHandlers: deregisterHandlers,\n      deregisterArrayHandlers: deregisterArrayHandlers,\n      getArrayCopies: getArrayCopies,\n      getArrayCopiesFor: getArrayCopiesFor,\n      getFromDataCache: getFromDataCache,\n      getFromFormCache: getFromFormCache,\n      getKey: getKey,\n      getSchema: getSchema,\n      handleResolve: handleResolve,\n      initArrayCopyWatch: initArrayCopyWatch,\n      initModelWatch: initModelWatch,\n      initSchemaParams: initSchemaParams,\n      isCompiled: isCompiled,\n      isConditionFunction: isConditionFunction,\n      onModelWatch: onModelWatch,\n      parseCondition: parseCondition,\n      parseExpression: parseExpression,\n      processDefault: processDefault,\n      processDisplay: processDisplay,\n      processField: processField,\n      processFieldset: processFieldset,\n      processFieldWatch: processFieldWatch,\n      processComponent: processComponent,\n      processCurrency: processCurrency,\n      processPercentage: processPercentage,\n      processDate: processDate,\n      processHelp: processHelp,\n      //processRadios,\n      processRadiobuttons: processRadiobuttons,\n      processReusable: processReusable,\n      processSchema: processSchema,\n      processSelectDisplay: processSelectDisplay,\n      processResolve: processResolve,\n      processSection: processSection,\n      processSelect: processSelect,\n      processTemplate: processTemplate,\n      processToggle: processToggle,\n      processUpdatedSchema: processUpdatedSchema,\n      processMediaUpload: processMediaUpload,\n      processCsvUpload: processCsvUpload,\n      registerArrayHandlers: registerArrayHandlers,\n      registerHandler: registerHandler,\n      registerResolve: registerResolve,\n      reprocessField: reprocessField,\n      setArrayIndex: setArrayIndex,\n      setupConfig: setupConfig,\n      setupSchemaRefresh: setupSchemaRefresh\n    };\n\n    function CNFlexFormConstructor(schema, model, config) {\n      var service;\n      if (services.length) {\n        for (var i = 0, l = services.length; i < l; i++) {\n          if (services[i].model === model) {\n            service = services[i];\n            //console.log('service.compile:', service.compile);\n            service.compile(schema, model, config);\n            break;\n          }\n        }\n        //console.log('services1:', services, service);\n      }\n      if (!service) {\n        service = new CNFlexForm(schema, model, config);\n        services.push(service);\n        //console.log('services2:', services, service);\n      }\n      return service || new CNFlexForm(schema, model, config);\n    }\n\n    function CNFlexForm(schema, model, config) {\n\n      if ($stateParams.debug) {\n        window.services = services;\n      }\n\n      this.arrayCopies = {};\n      this.arrayListeners = {};\n      this.dataCache = {};\n      this.defaults = {};\n      this.errors = [];\n      this.events = [];\n      this.formCache = {};\n      this.listeners = {};\n      this.resolveRegister = {};\n      this.model = model;\n      this.updates = 0;\n\n      this.params = cnFlexFormConfig.getStateParams();\n\n      this._ = _;\n\n      this.compile(schema, model, config);\n    }\n\n    _.extend(CNFlexForm.prototype, prototype);\n    _.extend(CNFlexFormConstructor, prototype);\n\n    return CNFlexFormConstructor;\n\n    //////////////\n\n    function compile(schema, model, config) {\n      var service = this;\n\n      service.schema = schema;\n      service.model = model;\n\n      //console.log('compile:schema, model:', schema.compiled, service.isCompiled(), schema, model);\n      if (!service.isCompiled()) {\n        service.setupConfig(config);\n\n        if (schema.forms) {\n          _.each(schema.forms, function (form) {\n            _.each(form.form, service.processField.bind(service));\n          });\n        } else {\n          _.each(schema.form, service.processField.bind(service));\n        }\n\n        service.initModelWatch();\n        service.initArrayCopyWatch();\n        service.isCompiled(true);\n      }\n\n      service.broadcastErrors();\n    }\n\n    function isCompiled(setValue) {\n      var service = this;\n      if (setValue) {\n        service.schema.compiled = setValue;\n      }\n      return service.schema && service.schema.compiled;\n    }\n\n    function setupConfig(config) {\n      var service = this;\n      if (config) {\n        if (config.formCtrl) service.formCtrl = config.formCtrl;\n        if (config.updateSchema) service.updateSchema = config.updateSchema;\n        if (config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n      }\n    }\n\n    function processSchema(field) {\n      var service = this,\n          schema = field.schema;\n\n      if (schema) {\n\n        field.getSchemaType = function () {\n          return _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n        };\n\n        service.processDefault(field);\n      }\n    }\n\n    function processDefault(field) {\n      var service = this,\n          schema = field.schema;\n      //console.log('processDefault:', field.key, schema, service.updates);\n      if (schema.default) {\n        var key = service.getKey(field.key);\n        // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n        if (service.updates) {\n          if (key.includes && key.includes('[]')) return;\n          var model = service.parseExpression(field.key, service.model);\n          var modelValue = model.get();\n          // if there's an existing default and it's the same as the current value\n          // update the current value to the new default\n          //console.error('default:', key, modelValue, service.defaults[key], angular.equals(modelValue, service.defaults[key]));\n          if (!service.defaults[key] || _.isUndefined(modelValue) || angular.equals(modelValue, service.defaults[key])) {\n            model.set(schema.default);\n          }\n        }\n        service.defaults[key] = angular.copy(schema.default);\n      }\n    }\n\n    function processFieldset(fieldset) {\n      var service = this;\n\n      fieldset.type = 'cn-fieldset';\n      _.each(fieldset.items, service.processField.bind(service));\n\n      if (fieldset.collapsible) {\n        fieldset.toggleCollapse = function () {\n          if (fieldset.collapsible) {\n            fieldset.collapsed = !fieldset.collapsed;\n          }\n        };\n\n        fieldset.render = !fieldset.collapsed;\n      } else {\n        fieldset.render = true;\n      }\n    }\n\n    function processField(field) {\n      var service = this;\n\n      if (field.selectDisplay) {\n        service.processSelectDisplay(field, service.getSchema(field.key));\n      }\n\n      if (field.type === 'fieldset') {\n        service.processFieldset(field);\n      } else {\n        if (!field._ogKeys) field._ogKeys = _.without(_.keys(field), 'key');\n\n        var key = service.getKey(field.key);\n\n        if (field.key) {\n          service.addToFormCache(field, key);\n          field.schema = service.getSchema(key);\n\n          if (field.schema) {\n            if (field.schema.description) field.description = field.schema.description;\n            if (field.readonly && !field.schema.readonly) field.readonly = false;\n          }\n        }\n\n        service.processSchema(field);\n\n        if (!field.type) field.type = field.getSchemaType && field.getSchemaType();\n\n        if (field.resolve) service.processResolve(field);\n\n        if (field.watch) service.processFieldWatch(field);\n\n        if (field.type === 'section' || field.type === 'tabarray') {\n          service.processSection(field);\n        } else if (field.type === 'component') {\n          service.processComponent(field);\n        } else {\n\n          var fieldType = cnFlexFormTypes.getFieldType(field);\n          var handler = fieldTypeHandlers[fieldType];\n          if (_.isString(handler)) {\n            service[handler](field);\n          } else if (_.isFunction(handler)) {\n            handler.call(service, field);\n          }\n\n          if (field.updateSchema) {\n            service.registerHandler(field, null, field.updateSchema);\n          }\n          if (field.error) {\n            service.errors.push(service.buildError(field));\n            if (_.isEmpty(field.ngModelOptions)) {\n              field.ngModelOptions = {\n                allowInvalid: true\n              };\n            } else {\n              field.ngModelOptions.allowInvalid = true;\n            }\n          } else if (_.find(service.errors, { key: key })) {\n            service.errors = _.reject(service.errors, { key: key });\n            $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n            $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n          }\n        }\n      }\n    }\n\n    function getKey(key) {\n      if (_.isArray(key)) {\n        key = _.reduce(key, function (total, next) {\n          if (/^(\\d*)$/.test(next)) {\n            return total + '[' + next + ']';\n          }\n          return total + '.' + next;\n        });\n      }\n      return key;\n    }\n\n    function getSchema(key, depth) {\n      var service = this;\n      if (!key) return;\n\n      key = service.getKey(key);\n\n      //console.log('getSchema:', key, depth, service);\n      //key = key.split('.');\n      key = key.replace(/arrayIndex/g, '').replace(/(\\[')([^.]+)\\.([^.]+)('])/g, '.$2%ff_dt%$3').replace(/\\./g, '%ff_sp%').replace(/%ff_dt%/g, '.').split('%ff_sp%');\n      depth = depth || service.schema.schema.properties;\n\n      var first, matchArray;\n\n      while (key.length > 1) {\n        first = key[0];\n        matchArray = first.match(/\\[\\d*]$/);\n        //if(first.slice(first.length - 2) === '[]') {\n        if (matchArray) {\n          depth = depth[key.shift().slice(0, first.length - matchArray[0].length)].items.properties;\n        } else {\n          depth = depth[key.shift()].properties;\n        }\n      }\n\n      first = key[0];\n      matchArray = first.match(/\\[\\d*]$/);\n\n      if (matchArray) {\n        return depth[first.slice(0, first.length - matchArray[0].length)].items;\n      }\n\n      return depth[first];\n    }\n\n    function processResolve(field) {\n      var service = this;\n\n      _.each(field.resolve, function (dataProp, fieldProp) {\n        service.handleResolve(field, fieldProp, dataProp);\n\n        var resolveType = dataProp.match(/^(schema\\.data\\.|model\\.)(\\w+)/);\n\n        if (resolveType) {\n          if (resolveType[1] === 'schema.data.') {\n            service.registerResolve(field, fieldProp, resolveType[2]);\n          } else if (resolveType[1] === 'model.') {\n            service.registerHandler(resolveType[2], function () {\n              service.handleResolve(field, fieldProp, dataProp);\n            });\n          }\n        }\n      });\n\n      return field;\n    }\n\n    function handleResolve(field, fieldProp, exp) {\n      var service = this;\n      var data = service.parseExpression(exp).get();\n      if (data && data.cursor) {\n        field.loadMore = function () {\n          var dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n          service.refreshSchema('data:' + dataProp + ':' + data.cursor);\n        };\n      } else {\n        delete field.loadMore;\n      }\n      field[fieldProp] = data && data.data ? data.data : data;\n    }\n\n    function registerResolve(field, fieldProp, dataProp) {\n      var service = this;\n\n      var fieldKey = service.getKey(field.key);\n      service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\n      var register = service.resolveRegister[dataProp];\n      register[fieldKey] = register[fieldKey] || [];\n      register[fieldKey].push({\n        field: field,\n        prop: fieldProp\n      });\n    }\n\n    function processFieldWatch(field) {\n      var service = this,\n          schema = field.schema;\n\n      field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\n      _.each(field.watch, function (watch) {\n        if (watch.resolution) {\n          var condition = watch.condition;\n          var functionCondition = service.isConditionFunction(condition);\n\n          var resolution = watch.resolution;\n          var handler;\n\n          //console.log('resolution:', resolution);\n          if (_.isFunction(resolution)) {\n            handler = function handler(cur, prev) {\n              var parsedCondition = functionCondition ? service.parseCondition(functionCondition) : condition;\n              if (!parsedCondition || $parse(parsedCondition)(service)) {\n                resolution(cur, prev);\n              }\n            };\n          } else {\n            var adjustment = {};\n\n            adjustment.date = resolution.match(/\\+ ?(\\d+) days/);\n\n            if (adjustment.date) {\n              adjustment.date = adjustment.date[1];\n              resolution = resolution.replace(adjustment.date, '').trim();\n            } else {\n              adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\n              if (adjustment.math) {\n                adjustment.operator = {\n                  '+': 'add',\n                  '-': 'subtract',\n                  '*': 'multiply',\n                  '/': 'divide'\n                }[adjustment.math[1]];\n\n                //console.log('adjustment:', adjustment);\n                adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n              }\n            }\n\n            resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n            //console.log('resolution:', resolution);\n\n            handler = function handler() {\n              var updatePath, fromPath;\n              if (resolution[1].includes('arrayIndex')) {\n                updatePath = replaceArrayIndex(resolution[1], arguments[2]);\n              }\n              if (resolution[2].includes('arrayIndex')) {\n                fromPath = replaceArrayIndex(resolution[2], arguments[2]);\n              }\n              var update = service.parseExpression(updatePath || resolution[1]);\n              var from = service.parseExpression(fromPath || resolution[2]);\n\n              //console.log('handler:resolution:', field.key, condition, condition && $parse(condition)(service));\n              var parsedCondition = functionCondition ? service.parseCondition(functionCondition, condition) : condition;\n              //if(functionCondition) {\n              //  console.log('parsedCondition:', parsedCondition, $parse(parsedCondition)(service));\n              //}\n              if (!parsedCondition || $parse(parsedCondition)(service)) {\n                //console.log('update:', update.get(), from.get());\n                if (adjustment.date) {\n                  update.set(moment(from.get()).add(adjustment.date, 'days').toDate());\n                } else if (adjustment.math) {\n                  //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n                  //console.log('_.%s(%s, %s):', adjustment.operator, from.get(), adjustment.adjuster.get(), result);\n                  var result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n                  //console.log('eval(%s %s %s):', from.get(), adjustment.math[1], adjustment.adjuster.get(), result);\n                  //console.log('result:', result);\n                  //console.log('adjustment.math:', adjustment, from.get(), adjustment.adjuster.get(), result);\n                  //console.log('schema.format:', schema.format);\n                  schema = schema || field.items && (field.items[0].schema || field.items[0].items && field.items[0].items[0].schema);\n                  if (field.type === 'cn-currency') {\n                    //console.log('schema.format:', schema.format, result);\n                    var p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\n                    if (adjustment.math[1] === '*') {\n                      result = _.floor(result, p);\n                    } else if (adjustment.math[1] === '/') {\n                      result = _.ceil(result, p);\n                    } else {\n                      result = _.round(result, p);\n                    }\n                  }\n                  service.listeners[update.path().key].prev = result;\n                  update.set(result || 0);\n                } else {\n                  update.set(from.get());\n                }\n              }\n            };\n          }\n\n          service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n        }\n      });\n    }\n\n    function isConditionFunction(condition) {\n      return condition && condition.match(/(\\!?)(.+)\\((.+)\\)/);\n    }\n\n    function parseCondition(condition, original) {\n      var service = this,\n          invert = condition[1],\n          functionName = condition[2],\n          functionArgument = condition[3];\n\n      if (functionName === 'any') {\n        var predicate = functionArgument.match(/(.+)\\[\\]\\.*(.*)(===|>|<|>=|<=)(.+)/),\n            arr = service.parseExpression(predicate[1]).get(),\n            comparator = predicate[3],\n            comparisonValue = predicate[4].trim().replace(/'/g, ''),\n            key = predicate[2].trim(),\n            evaluation = false;\n\n        arr.forEach(function (value) {\n          var val = key ? value[key] : value;\n          if (evaluatePredicate(val, comparator, comparisonValue)) {\n            evaluation = true;\n          }\n        });\n\n        return invert ? (!evaluation).toString() : evaluation.toString();\n      } else {\n        condition = original.replace(/model\\./g, 'service.model.');\n        //console.log('eval:', condition, eval(condition));\n        // stupid hack so we can evaluate the evaluated results\n        return !!eval(condition) + '';\n      }\n    }\n\n    function evaluatePredicate(val1, comparator, val2) {\n      switch (comparator) {\n        case '===':\n          return val1 === val2;\n        case '>=':\n          return val1 >= val2;\n        case '<=':\n          return val1 <= val2;\n        case '>':\n          return val1 > val2;\n        case '<':\n          return val1 < val2;\n      }\n    }\n\n    function registerHandler(key, handler, updateSchema, runHandler) {\n      var service = this;\n\n      // if field is passed instead of key\n      if (_.isObject(key) && !_.isArray(key)) {\n        if (!key.key && key.items) {\n          _.each(key.items, function (field) {\n            service.registerHandler(field, handler, field.updateSchema);\n          });\n          return;\n        } else {\n          key = key.key;\n        }\n      }\n\n      key = service.getKey(key);\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.+)/);\n\n      if (arrMatch) {\n        service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n        return;\n      }\n\n      var cur = service.parseExpression(key, service.model).get();\n\n      if (!service.listeners[key]) {\n        var prev = angular.copy(cur);\n        //console.log('prev:', key, prev, angular.equals(prev, service.parseExpression(key, service.model).get()));\n        service.listeners[key] = {\n          handlers: [],\n          updateSchema: updateSchema,\n          prev: prev\n        };\n      }\n\n      if (handler) {\n        service.listeners[key].handlers.push(handler);\n        if (runHandler) handler(cur, null, key);\n      }\n    }\n\n    function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n      //console.log('registerArrayHandlers:', arrKey, fieldKey);\n      var service = this;\n      var onArray = function onArray(cur, prev) {\n        var i, l, key;\n\n        if (prev && prev > cur) {\n          var lastKey = arrKey + '[' + (prev - 1) + ']' + '.' + fieldKey;\n          // only deregister handlers once each time an element is removed\n          if (service.listeners[lastKey]) {\n            for (i = 0, l = prev; i < l; i++) {\n              key = arrKey + '[' + i + ']' + '.' + fieldKey;\n              service.deregisterHandlers(key);\n            }\n          }\n          for (i = 0, l = cur; i < l; i++) {\n            key = arrKey + '[' + i + ']' + '.' + fieldKey;\n            service.registerHandler(key, handler, updateSchema);\n            //no need to call if just reregisering handlers\n            //if(runHandler) handler(null, null, key);\n          }\n        } else if (cur > (prev || 0)) {\n            for (i = prev, l = cur; i < l; i++) {\n              key = arrKey + '[' + i + ']' + '.' + fieldKey;\n              service.registerHandler(key, handler, updateSchema, runHandler);\n              //if(runHandler) handler(null, null, key);\n            }\n          }\n      };\n\n      var arrVal = service.parseExpression(arrKey, service.model).get();\n      _.each(arrVal, function (field, i) {\n        var key = arrKey + '[' + i + ']' + '.' + fieldKey;\n        service.registerHandler(key, handler, updateSchema);\n        if (runHandler) handler(null, null, key);\n      });\n\n      if (service.arrayListeners[arrKey + '.length']) {\n        service.arrayListeners[arrKey + '.length'].handlers.push(onArray);\n      } else {\n        service.arrayListeners[arrKey + '.length'] = {\n          handlers: [onArray],\n          prev: arrVal ? arrVal.length : 0\n        };\n      }\n    }\n\n    function deregisterHandlers(key) {\n      var service = this;\n\n      key = service.getKey(key);\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.+)/);\n\n      if (arrMatch) {\n        service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n        return;\n      }\n\n      //console.log('deregisterHandlers:', key);\n      if (service.listeners[key]) service.listeners[key].handlers = [];\n    }\n\n    function deregisterArrayHandlers(arrKey, fieldKey) {\n      var service = this;\n\n      //console.log('deregisterArrayHandlers:', arrKey, fieldKey);\n\n      service.parseExpression(arrKey, service.model).get().forEach(function (item, i) {\n        service.deregisterHandlers(arrKey + '[' + i + '].' + fieldKey);\n      });\n    }\n\n    function initModelWatch() {\n      //console.log('initModelWatch:', initModelWatch);\n      var service = this;\n      if (service.watching) return;\n      if (service.modelWatch) service.modelWatch();\n\n      service.modelWatch = $rootScope.$watch(function () {\n        return service.model;\n      }, service.onModelWatch.bind(service), true);\n\n      service.initSchemaParams();\n      service.watching = true;\n      service.firstUpdate = true;\n    }\n\n    function onModelWatch(cur, prev) {\n      var service = this;\n      // we always run through the listeners on the first update because angular seems to mess up\n      // when the defaults are applied and uses the same object for both cur and prev\n      if (service.firstUpdate || !angular.equals(cur, prev)) {\n        service.firstUpdate = false;\n        cnUtil.cleanModel(service.model);\n\n        service.prevParams = angular.copy(service.params);\n        service.params = {};\n\n        _.each(service.arrayListeners, function (listener, key) {\n          var val = service.parseExpression(key, service.model).get();\n          if (!angular.equals(val, listener.prev)) {\n            _.each(listener.handlers, function (handler) {\n              handler(val, listener.prev);\n            });\n            listener.prev = angular.copy(val);\n          }\n        });\n\n        _.each(service.listeners, function (listener, key) {\n          if (listener) {\n            var val = service.parseExpression(key, service.model).get();\n            //console.log('listener:', key, val, listener.prev, angular.equals(val, listener.prev));\n            if (!angular.equals(val, listener.prev)) {\n              _.each(listener.handlers, function (handler) {\n                handler(val, listener.prev, key);\n              });\n              listener.prev = angular.copy(val);\n            }\n            if (listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n              service.params[key] = val;\n            }\n          }\n        });\n\n        //console.log('service.params, service.prevParams:', service.params, service.prevParams, !angular.equals(service.params, service.prevParams), service.updates);\n        if (!angular.equals(service.params, service.prevParams)) {\n          if (service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n            ++service.updates;\n          } else {\n            service.refreshSchema();\n          }\n        }\n      }\n    }\n\n    function initSchemaParams() {\n      var service = this;\n      _.each(service.listeners, function (listener, key) {\n        if (listener) {\n          var val = service.parseExpression(key, service.model).get();\n          if (listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n            service.params[key] = val;\n          }\n        }\n      });\n    }\n\n    function initArrayCopyWatch() {\n      console.log('initArrayCopyWatch: how many times does this event get registered?');\n      var service = this;\n\n      //TODO: refactor this, only register event once\n      service.events.push($rootScope.$on('schemaFormPropagateScope', function (event, scope) {\n        var key = service.getKey(scope.form.key);\n        var index = key.match(/^.*\\[(\\d+)].*$/);\n\n        key = key.replace(/\\[\\d+]/g, '[]');\n        index = index && parseInt(index[1]);\n        //console.log('key, index, scope.form.key, scope.form:', key, index, scope.form.key, scope.form);\n\n        if (!scope.form.condition) scope.form.condition = 'true';\n\n        service.addArrayCopy(scope.form, key, index);\n        //console.log('service.arrayCopies:', service.arrayCopies);\n        scope.$emit('flexFormArrayCopyAdded', key);\n      }));\n\n      service.events.push($rootScope.$on('schemaFormDeleteScope', function (event, scope, index) {\n        console.log('schemaFormDeleteScope:', index, scope.form, scope);\n        var key = service.getKey(scope.form.key).replace(/\\[\\d+]/g, '[]');\n        var copies = service.getArrayCopiesFor(key);\n\n        copies.forEach(function (list) {\n          list.splice(index, 1);\n        });\n\n        if (scope.form.link) {\n          var list = service.parseExpression(scope.form.link, service.model).get();\n          list.splice(index, 1);\n        }\n      }));\n    }\n\n    function addArrayCopy(form, key, index) {\n      var service = this;\n      if (!index || index < 0) index = 0;\n      if (!service.arrayCopies[key]) service.arrayCopies[key] = [];\n      service.arrayCopies[key][index] = form;\n      //service.arrayCopies[key].push(form);\n    }\n\n    function getArrayCopies(key) {\n      var service = this;\n      return service.arrayCopies[key];\n    }\n\n    function getArrayCopiesFor(keyStart) {\n      var service = this;\n      var copiesList = [];\n      keyStart += '[]';\n\n      _.each(service.arrayCopies, function (copies, key) {\n        if (key.includes(keyStart)) copiesList.push(copies);\n      });\n\n      return copiesList;\n    }\n\n    function addToFormCache(field, key) {\n      var service = this;\n      key = key || service.getKey(field.key);\n      if (!service.getFromFormCache(key)) service.formCache[key] = field;\n    }\n\n    function getFromFormCache(key) {\n      var service = this;\n      return service.formCache[key];\n    }\n\n    function addToDataCache(key, modelValue) {\n      var service = this;\n\n      if (key) {\n        service.dataCache[key] = modelValue;\n      }\n    }\n\n    function getFromDataCache(key) {\n      var service = this;\n\n      return service.dataCache[key];\n    }\n\n    function parseExpression(exp, depth) {\n      var service = this;\n      // if expression is specific value\n      if (!exp || /^(null|false|true|undefined|''|[0-9.]+|\\[]|\\{})$/.test(exp)) {\n        return {\n          \"get\": function get() {\n            return eval(exp);\n          }\n        };\n      }\n\n      exp = service.getKey(exp);\n\n      //var key;\n      var match = exp.match(/^(model\\.)?(\\S+)$/);\n\n      // cache fucks shit up if the model changes so disabling\n      //var cached;\n\n      // return from cache if possible\n      //if(!/\\[]/.test(exp) && match && match[2]) {\n      //  if(!depth || depth === service.model) {\n      //    key = match[2];\n      //\n      //    cached = service.getFromDataCache(key);\n      //    if(cached) {\n      //      return cached;\n      //    }\n      //  }\n      //}\n\n      var modelValue = {\n        \"get\": function get() {\n          var path = exp.replace(/\\[]/g, '').replace(/\\[(\\d+)]/g, '.$1').split('.');\n          var start = depth || service;\n\n          while (start && path.length > 1) {\n            start = start[path.shift()];\n          }\n\n          //if(/\\[]/g.test(exp)) {\n          //  console.log('exp:', exp, start, start && start[path[0]]);\n          //}\n          return start && start[path[0]];\n        },\n        \"set\": function set(val) {\n          var path = exp.replace(/\\[]/g, '').replace(/\\[(\\d+)]/g, '.$1').split('.');\n          var start = depth || service;\n\n          while (start && path.length > 1) {\n            var key = path.shift();\n            if (!start[key]) {\n              if (/^\\d?$/.test(path[0])) {\n                start[key] = [];\n              } else {\n                start[key] = {};\n              }\n            }\n            start = start[key];\n          }\n\n          start[path[0]] = val;\n\n          return val;\n        },\n        \"path\": function path() {\n          return {\n            exp: exp,\n            depth: depth,\n            key: match[2]\n          };\n        }\n      };\n\n      //if(key) {\n      //  service.addToDataCache(key, modelValue);\n      //}\n\n      return modelValue;\n    }\n\n    function processSection(section) {\n      var service = this;\n\n      _.each(section.items, service.processField.bind(service));\n    }\n\n    function processComponent(component) {\n      var service = this;\n\n      component.type = 'section';\n      component.htmlClass = 'row';\n\n      var cols = 12 / _.reject(component.items, 'hidden').length;\n\n      _.each(component.items, function (field, i) {\n        service.processField(field);\n        component.items[i] = {\n          type: 'section',\n          htmlClass: 'col-sm-' + cols,\n          items: [field]\n        };\n      });\n    }\n\n    function processCurrency(field) {\n      //console.log('processCurrency:', field);\n      field.currencyFormat = {\n        'currency-dollars': 'dollars',\n        'currency-microcents': 'microcents',\n        'currency': 'cents'\n      }[field.schema.format];\n\n      field.type = 'cn-currency';\n    }\n\n    function processPercentage(field) {\n      field.type = 'cn-percentage';\n    }\n\n    function processReusable(field) {\n      var service = this;\n      field.type = 'cn-reusable';\n      field.view = field.view || 'new';\n      field.items.forEach(service.processField.bind(service));\n      field.items = [{\n        type: 'section',\n        items: field.items,\n        condition: '!model.' + service.getKey(field.key) + '.id'\n      }];\n    }\n\n    function processMediaUpload(field) {\n      var service = this;\n      field.type = 'cn-mediaupload';\n      _.each(field.data, function (dataProp, key) {\n        field.data[key] = service.parseExpression(dataProp).get();\n      });\n    }\n\n    function processCsvUpload(field) {\n      var service = this;\n      field.type = 'cn-csvupload';\n      // _.each(field.data, function(dataProp, key) {\n      //   field.data[key] = service.parseExpression(dataProp).get();\n      // });\n    }\n\n    function processRadiobuttons(radios) {\n      var service = this;\n      radios.type = 'cn-radiobuttons';\n      if (radios.fullWidth) {\n        radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n      }\n    }\n\n    function processDate(date) {\n      date.type = 'cn-datetimepicker';\n    }\n\n    function processSelect(select) {\n      var service = this,\n          schema = select.schema;\n\n      if (select.titleMapResolve || select.titleMap) {\n        select.getTitleMap = function () {\n          return select.titleMap || service.schema.data[select.titleMapResolve];\n        };\n\n        select.onInit = function (val, form, event, setter) {\n          var modelValue = service.parseExpression(form.key, service.model);\n          // make sure we have correct value\n          // console.log('init:', form.key, val, event);\n          val = modelValue.get();\n          if (event === 'tag-init') {\n            var newVal;\n            if (form.schema.type === 'array') {\n              if (form.schema.items.type !== 'object') {\n                newVal = [];\n                _.each(val, function (val) {\n                  var match = {};\n                  match[select.valueProperty || 'value'] = val;\n                  newVal.push(_.find(select.getTitleMap(), match));\n                });\n              }\n            } else {\n              var match = {};\n              match[select.valueProperty || 'value'] = val;\n              newVal = _.find(select.getTitleMap(), match);\n            }\n            //console.log('newVal:', newVal);\n            if (newVal) setter(newVal);\n          }\n        };\n      }\n\n      if (select.titleMapQuery) {\n        var key = select.titleMapQuery.params.q;\n        select.titleQuery = function (q) {\n          console.log('titleMap:', q);\n          var params = {};\n          if (key) {\n            params[key] = q;\n          }\n          return Api.get({\n            url: select.titleMapQuery.url,\n            params: params\n          });\n        };\n\n        // wrap in string so returns truthy when compiled, but converted to number within directive\n        if (!key) select.minLookup = '0';\n\n        select.onInit = function (val, form, event, setter) {\n          //console.log('titleQuery:onInit:', val, form, event, setter);\n          if (event === 'tag-init') {\n            setter(val);\n          }\n        };\n      }\n\n      if (schema.items) {\n        var defaults = [];\n        _.each(schema.items.properties, function (schema, key) {\n          if (angular.isDefined(schema.default)) {\n            defaults.push({\n              \"key\": key,\n              default: schema.default\n            });\n          }\n        });\n        if (defaults.length) {\n          select.onAdd = function (val, form, event) {\n            if (val.value && event === 'tag-added') {\n              _.each(defaults, function (prop) {\n                //console.log('prop:', prop, val);\n                if (!val.value[prop.key]) val.value[prop.key] = prop.default;\n              });\n            }\n          };\n        }\n      }\n\n      if (!select.type.includes('cn-autocomplete')) {\n        if (select.items) {\n          select.detailedList = true;\n\n          if (select.items[0].type !== 'component') {\n            if (select.items.length > 1) {\n              select.items = [{\n                type: \"component\",\n                items: select.items\n              }];\n            }\n\n            service.processFieldset(select);\n          }\n\n          select.type = 'cn-autocomplete-detailed';\n        } else {\n          if (!select.selectionStyle) {\n            if (select.key === 'tags') {\n              select.selectionStyle = 'tags';\n            } else if (select.getSchemaType() === 'array' && select.schema.maxItems !== 1) {\n              select.selectionStyle = 'list';\n            } else {\n              select.selectionStyle = 'select';\n            }\n          }\n          select.type = 'cn-autocomplete';\n        }\n      }\n\n      if (select.displayFormat) {\n        select.itemFormatter = service.processTemplate(select.displayFormat);\n      }\n\n      service.registerHandler(select.key, function (val) {\n        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n        if (form && form.$setDirty) form.$setDirty();\n      }, select.updateSchema);\n    }\n\n    function processToggle(toggle) {\n      toggle.type = 'cn-toggle';\n    }\n\n    function processHelp(help) {\n      help.htmlClass = 'help-block';\n    }\n\n    function processDisplay(display) {\n      var service = this;\n      display.type = 'cn-display';\n      display.getDisplay = service.processTemplate(display.displayFormat, true);\n    }\n\n    function processTemplate(tpl, parseScope) {\n      var service = this;\n      //console.log('tpl:', tpl);\n      //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n      var processor = $interpolate;\n      return function (scope, arrayIndex) {\n        //console.log('tpl, scope, processor:', tpl, scope, processor);\n        //console.log('processor(tpl)(scope):', processor(tpl)(scope));\n        if (parseScope) {\n          if (angular.isDefined(arrayIndex)) {\n            scope = _.map(scope, function (key) {\n              return key === 'arrayIndex' ? arrayIndex : key;\n            });\n          }\n          scope = service.parseExpression(scope, service.model).get();\n        }\n        return processor(tpl)(scope);\n      };\n    }\n\n    function processSelectDisplay(selectDisplay, schema) {\n      var service = this,\n          selectField = _.find(selectDisplay.items, 'selectField'),\n          handler;\n\n      if (schema && schema.type === 'array') {\n        handler = setupArraySelectDisplay(selectDisplay, selectField, service);\n      } else {\n        handler = setupSelectDisplay(selectDisplay, selectField, service);\n      }\n\n      selectDisplay.selectDisplay = false;\n      service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n      service.processField(selectDisplay);\n    }\n\n    function setupArraySelectDisplay(selectDisplay, selectField, service) {\n      _.each(selectDisplay.items, function (item) {\n        if (item.condition !== 'false') {\n          item.condition = 'true';\n        }\n      });\n      var handler = function handler() {\n        var index = getArrayIndex(arguments[2]);\n        _.each(selectDisplay.items, function (item) {\n          var selectKey = service.getKey(selectField.key);\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var indexedSelectKey = service.setArrayIndex(selectKey, index);\n          var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n          var formCopies = service.getArrayCopies(key);\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            _.each(formCopies, function (copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'true';\n              }\n            });\n          } else {\n            _.each(formCopies, function (copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'false';\n                service.parseExpression(service.getKey(copy.key), service.model).set();\n              }\n            });\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n      _.each(selectDisplay.items, function (item) {\n        var key = service.getKey(item.key);\n        var selectKey = service.getKey(selectField.key);\n        if (key === selectKey) return;\n        _.each(model, function (elem, i) {\n          var indexedKey = service.setArrayIndex(key, i);\n          var splitIndexedKey = ObjectPath.parse(indexedKey);\n          var indexedSelectKey = service.setArrayIndex(selectKey, i);\n          var selectModel = service.parseExpression(indexedSelectKey, service.model);\n          var selectValue = selectModel.get();\n          var itemValue = service.parseExpression(indexedKey, service.model).get();\n          if (itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n            if (!selectValue) {\n              selectValue = [];\n            }\n            selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n            selectModel.set(selectValue);\n          }\n        });\n      });\n      // handle new objects with values set in defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function (elem, i) {\n        var selectKey = service.getKey(selectField.key);\n        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n        var selectValue = selectModel.get();\n        _.each(elem, function (val, key) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(key);\n          selectModel.set(selectValue);\n        });\n      });\n      // run handler once all arrayCopies have been instantiated\n      var count = 0;\n      var keyMap = _.pluck(_.reject(selectDisplay.items, { \"condition\": \"false\" }), 'key');\n      var once = $rootScope.$on('flexFormArrayCopyAdded', function (event, key) {\n        var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n        if (model) {\n          var total = model.length * keyMap.length;\n          if (_.includes(keyMap, key)) {\n            count++;\n          }\n          if (count === total) {\n            for (var i = 0; i < model.length; i++) {\n              handler(null, null, '[' + i + ']');\n            }\n            count = 0;\n          }\n        }\n      });\n      var resetCount = $rootScope.$on('flexForm.updatePage', function () {\n        count = 0;\n      });\n      service.events.push(once);\n      service.events.push(resetCount);\n      return handler;\n    }\n\n    function setupSelectDisplay(selectDisplay, selectField, service) {\n      var handler = function handler() {\n        var selectKey = service.getKey(selectField.key);\n        _.each(selectDisplay.items, function (item) {\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var selectValue = service.parseExpression(selectKey, service.model).get();\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            item.condition = 'true';\n          } else {\n            item.condition = 'false';\n            service.parseExpression(key, service.model).set();\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var selectKey = service.getKey(selectField.key);\n      var selectModel = service.parseExpression(selectKey, service.model);\n      var selectValue = selectModel.get();\n      _.each(selectDisplay.items, function (item) {\n        var key = service.getKey(item.key);\n        if (selectKey === key) return;\n        var splitKey = ObjectPath.parse(key);\n        var itemValue = service.parseExpression(key, service.model).get();\n        if (itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(splitKey[splitKey.length - 1]);\n          selectModel.set(selectValue);\n        }\n      });\n      // handle new objects with values set in the defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function (val, key) {\n        if (!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(key);\n        selectModel.set(selectValue);\n      });\n      // set default values here\n      var model = service.parseExpression(selectDisplay.key, service.model);\n      if (defaults && !model.get()) {\n        model.set(defaults);\n      }\n\n      return handler;\n    }\n\n    function setupSchemaRefresh(refresh) {\n      var service = this;\n      service.refreshSchema = _.debounce(function (updateSchema) {\n        var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n        console.log('service.schema.params, params:', service.schema.params, params);\n        var diff = cnUtil.diff(service.schema.params, params, true);\n        var keys;\n\n        if (diff || updateSchema) {\n          if (updateSchema) params.updateSchema = updateSchema;else {\n            keys = _.keys(diff);\n\n            if (keys.length > 1) {\n              diff = _.omit(diff, _.isNull);\n              keys = _.keys(diff);\n            }\n            //console.log('keys, diff:', keys, diff, {\n            //  cur: _.clone(params),\n            //  prev: _.clone(service.schema.params)\n            //});\n\n            params.updateSchema = _.first(keys);\n          }\n\n          if (!params.updateSchema) {\n            diff = cnUtil.diff(params, _.omit(service.schema.params, 'updateSchema'));\n            keys = _.keys(diff);\n\n            //console.log('keys, diff:', keys, diff);\n            params.updateSchema = _.first(keys);\n          }\n\n          refresh(params).then(function (schema) {\n            ++service.updates;\n            //service.updateSchema(schema);\n            service.processUpdatedSchema(schema);\n          });\n        }\n      }, 100);\n\n      service.refreshData = _.debounce(function () {\n        refresh(_.extend(service.schema.params, { updateSchema: 'refreshData' })).then(function (schema) {\n          service.processUpdatedSchema(schema);\n          console.log('service.schema.params:', service.schema.params);\n        });\n      }, 100);\n\n      service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n    }\n\n    function processUpdatedSchema(schema) {\n      var service = this;\n      if (schema.diff) {\n        service.schema.params = schema.params;\n\n        if (schema.diff.data) {\n          _.each(schema.diff.data, function (data, prop) {\n            if (data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n              data.data = service.schema.data[prop].data.concat(data.data);\n            }\n            service.schema.data[prop] = data;\n            if (service.resolveRegister[prop]) {\n              _.each(service.resolveRegister[prop], function (registers) {\n                registers.forEach(function (register) {\n                  service.handleResolve(register.field, register.prop, 'schema.data.' + prop);\n                });\n              });\n            }\n          });\n        }\n\n        var keys = [];\n\n        if (schema.diff.schema) {\n          _.each(schema.diff.schema, function (schema, key) {\n            service.schema.schema.properties[key] = schema;\n            reprocessSchema(schema, key, keys);\n          });\n        }\n\n        if (schema.diff.form) {\n          _.each(schema.diff.form, function (form) {\n\n            if (keys.indexOf(form.key) === -1) {\n              keys.push(form.key);\n            }\n\n            // don't want to override key when extending cached objects\n            //var key = form.key;\n            //delete form.key;\n\n            var cached = service.getFromFormCache(form.key);\n            if (cached) {\n              service.reprocessField(cached, form);\n            }\n            var copies = service.getArrayCopies(form.key);\n            if (copies) {\n              _.each(copies, function (copy) {\n                service.reprocessField(copy, form);\n              });\n            }\n          });\n        }\n\n        if (keys.length) {\n          _.each(keys, function (key) {\n            var form = service.getFromFormCache(key);\n            if (form) service.processField(form);\n            if (key.includes('[]')) {\n              var copies = service.getArrayCopies(key);\n              _.each(copies, function (copy) {\n                if (copy) service.processField(copy);\n              });\n            }\n          });\n        }\n\n        service.broadcastErrors();\n      } else {\n        service.updateSchema(schema);\n      }\n    }\n\n    function reprocessField(current, update, isChild) {\n      var service = this;\n\n      _.extend(current, _.omit(update, 'items', 'key'));\n\n      current._ogKeys.forEach(function (key) {\n        if (!update[key]) delete current[key];\n      });\n      current._ogKeys = _.keys(update);\n\n      //console.log('update.key:', update.key);\n      service.deregisterHandlers(update.key);\n\n      if (!isChild && current.redraw) current.redraw();\n    }\n\n    function reprocessSchema(schema, key, keys) {\n      keys.push(key);\n      if (schema.properties) {\n        _.each(schema.properties, function (schema, subKey) {\n          reprocessSchema(schema, key + '.' + subKey, keys);\n        });\n      }\n      if (schema.items && schema.items.properties) {\n        _.each(schema.properties, function (schema, subKey) {\n          reprocessSchema(schema, key + '[].' + subKey, keys);\n        });\n      }\n    }\n\n    function buildError(field) {\n      var service = this;\n      var key = service.getKey(field.key);\n      return {\n        key: key,\n        message: field.error\n      };\n    }\n\n    function broadcastErrors() {\n      var service = this;\n      $timeout(function () {\n        service.errors.forEach(function (error) {\n          $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n        });\n      }, 1);\n    }\n\n    function replaceArrayIndex(resolve, key) {\n      var arrayIndexKey = /([^.]*)\\[arrayIndex\\]/.exec(resolve);\n      var re = new RegExp(arrayIndexKey[1] + '\\\\[(\\\\d+)\\\\]');\n      var index = re.exec(key);\n      return resolve.replace(arrayIndexKey[0], index[0]);\n    }\n\n    function getArrayIndex(key) {\n      if (_.isObject(key)) {\n        return _.find(key.key, function (key) {\n          return _.isNumber(key);\n        });\n      } else {\n        return (/\\[(\\d+)\\]/.exec(key)[1]\n        );\n      }\n    }\n\n    function setArrayIndex(key, index, asArray) {\n      var service = this;\n      var keyCopy;\n      if (_.isString(key)) {\n        keyCopy = ObjectPath.parse(key);\n      } else {\n        keyCopy = _.clone(key);\n      }\n      var indexOfIndex = keyCopy.indexOf('');\n      keyCopy[indexOfIndex] = index;\n\n      if (asArray) {\n        return keyCopy;\n      } else {\n        return service.getKey(keyCopy);\n      }\n    }\n\n    function cleanup() {\n      var service = this;\n      _.each(service.events, function (listener) {\n        listener();\n      });\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').controller('FlexFormSandbox', FlexFormSandbox);\n\n  /* @ngInject */\n  function FlexFormSandbox() {\n    /* jshint validthis: true */\n    var vm = this;\n\n    vm.activate = activate;\n    vm.onSchema = onSchema;\n    vm.model = {};\n    vm.config = {};\n    vm.schemaStr = '';\n\n    activate();\n\n    ////////////////\n\n    function activate() {\n      console.log('FlexFormSandbox');\n    }\n\n    function onSchema() {\n      if (vm.schemaStr) {\n        var schema = angular.fromJson(vm.schemaStr);\n        console.log('schema:', schema);\n        if (!schema.form && schema.forms) {\n          schema.form = schema.forms[0].form;\n        }\n        vm.config.schema = schema.form && schema;\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').config(schemaFormConfig).run(addTemplates);\n\n  schemaFormConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function schemaFormConfig(cnFlexFormServiceProvider) {\n    var extensions = ['cn-fieldset', 'cn-toggle', 'cn-datetimepicker', 'cn-autocomplete', 'cn-autocomplete-detailed', 'cn-currency', 'cn-radiobuttons', 'cn-percentage', 'cn-display', 'cn-mediaupload', 'cn-csvupload', 'cn-reusable'];\n\n    _.each(extensions, function (extension) {\n      cnFlexFormServiceProvider.registerField({\n        type: extension,\n        templateUrl: 'app/components/cn-flex-form/forms/' + extension + '.html'\n      });\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n\n  function addTemplates($templateCache) {\n    $templateCache.put('app/components/cn-flex-form/forms/cn-toggle.html', '\\\n        <div class=\"form-group {{form.htmlClass}}\" \\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <div class=\"clearfix\">\\\n            <cn-toggle-switch\\\n              class=\"pull-left\"\\\n              ng-show=\"form.key\"\\\n              enabled=\"$$value$$\"\\\n              on-value=\"form.onValue\"\\\n              off-value=\"form.offValue\">\\\n            </cn-toggle-switch>\\\n            <span ng-show=\"form.onText && form.offText\">\\\n              {{$$value$$ === form.onValue ? form.onText : form.offText}}\\\n            </span>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-datetimepicker.html', '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 for=\"{{form.key.join(\\'.\\')}}\"\\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <cn-datetimepicker\\\n            ng-show=\"form.key\"\\\n            ng-model=\"$$value$$\"\\\n            ng-model-options=\"form.ngModelOptions\"\\\n            is-disabled=\"form.readonly\"\\\n            sf-changed=\"form\"\\\n            schema-validate=\"form\"\\\n            input-id=\"{{form.key.join(\\'.\\')}}\"\\\n            min-date=\"form.minDate\"\\\n            cn-date-required=\"form.required\"\\\n            placeholder=\"{{form.placeholder}}\"\\\n            model-type=\"{{form.schema.type}}\">\\\n          </cn-datetimepicker>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n\n    var sharedAutocompleteTpl = '\\\n          <tags-input\\\n            ng-show=\"form.key\"\\\n            ng-model=\"$$value$$\"\\\n            ng-model-options=\"form.ngModelOptions\"\\\n            ng-disabled=\"form.readonly\"\\\n            sf-changed=\"form\"\\\n            schema-validate=\"form\"\\\n            input-id=\"{{form.key.join(\\'.\\')}}\"\\\n            display-property=\"{{form.displayProperty || \\'name\\'}}\"\\\n            value-property=\"{{form.valueProperty || \\'value\\'}}\"\\\n            placeholder=\"{{form.placeholder || \\' \\'}}\"\\\n            add-on-blur=\"true\"\\\n            add-on-comma=\"false\"\\\n            add-from-autocomplete-only=\"{{!form.allowNew}}\"\\\n            on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\\\n            on-init=\"form.onInit($tag, form, $event, $setter)\"\\\n            model-type=\"{{form.getSchemaType()}}\"\\\n            array-value-type=\"{{form.schema.items.type}}\"\\\n            hide-tags=\"{{form.detailedList}}\"\\\n            tags-style=\"{{form.selectionStyle}}\"\\\n            required=\"{{form.required}}\"\\\n            min-length=\"{{form.minLength}}\"\\\n            allowed-tags-pattern=\".*\"\\\n            dropdown=\"true\"\\\n            item-formatter=\"form.itemFormatter\"\\\n            min-tags=\"{{form.schema.minItems}}\"\\\n            max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== \\'array\\' ? 1 : 0}}\"\\\n            allow-bulk=\"{{form.bulkAdd}}\"\\\n            bulk-delimiter=\"{{form.bulkDelimiter}}\"\\\n            bulk-placeholder=\"{{form.bulkPlaceholder}}\"\\\n            show-button=\"true\">\\\n            <auto-complete\\\n              source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\\\n              skip-filtering=\"{{form.titleQuery ? true : false}}\"\\\n              min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\\\n            </auto-complete>\\\n          </tags-input>\\\n          ';\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete.html', '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 for=\"{{form.key.join(\\'.\\')}}-input\"\\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\\n          ' + sharedAutocompleteTpl + '\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete-detailed.html', '\\\n        <div sf-array=\"form\"\\\n             class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 for=\"{{form.key.join(\\'.\\')}}-input\"\\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <ol class=\"list-group cn-autocomplete-list\"\\\n              ng-show=\"modelArray.length\"\\\n              ng-model=\"modelArray\">\\\n            <li class=\"list-group-item {{form.fieldHtmlClass}}\"\\\n                ng-repeat=\"item in modelArray track by $index\">\\\n              <button ng-hide=\"form.readonly || form.remove === null\"\\\n                      ng-click=\"deleteFromArray($index)\"\\\n                      type=\"button\" class=\"close pull-right\">\\\n                <span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span>\\\n              </button>\\\n              <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"></sf-decorator>\\\n            </li>\\\n          </ol>\\\n          ' + sharedAutocompleteTpl + '\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-currency.html', '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\\n          <div class=\"{{form.fieldClass}} input-group\">\\\n            <label class=\"input-group-addon\"\\\n                   ng-disabled=\"form.readonly\"\\\n                   for=\"{{form.key.join(\\'.\\')}}\">$</label>\\\n            <input class=\"form-control\"\\\n                   cn-currency-format=\"{{form.currencyFormat}}\"\\\n                   ng-show=\"form.key\"\\\n                   ng-model-options=\"form.ngModelOptions\"\\\n                   ng-disabled=\"form.readonly\"\\\n                   sf-changed=\"form\"\\\n                   schema-validate=\"form\"\\\n                   ff-validate=\"form\"\\\n                   type=\"text\"\\\n                   step=\"any\"\\\n                   min=\"{{form.min}}\"\\\n                   max=\"{{form.max}}\"\\\n                   id=\"{{form.key.join(\\'.\\')}}\"\\\n                   name=\"{{form.key.join(\\'.\\')}}\"\\\n                   ng-model=\"$$value$$\">\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-radiobuttons.html', '\\\n        <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <div class=\"btn-group clearfix\">\\\n            <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? \\'active\\' : \\'\\'}}\"\\\n                   ng-repeat=\"item in form.titleMap\">\\\n              <input type=\"radio\"\\\n                     class=\"{{form.fieldHtmlClass}} hide\"\\\n                     sf-changed=\"form\"\\\n                     ng-disabled=\"form.readonly\"\\\n                     ng-model=\"$$value$$\"\\\n                     ng-model-options=\"form.ngModelOptions\"\\\n                     schema-validate=\"form\"\\\n                     ff-validate=\"form\"\\\n                     ng-value=\"item.value\"\\\n                     name=\"{{form.key.join(\\'.\\')}}\">\\\n              <i class=\"fa fa-{{item.value}} fa-lg\"></i>\\\n              <span ng-bind-html=\"item.name\"></span>\\\n            </label>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-percentage.html', '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\\n          <div class=\"{{form.fieldClass}} input-group\">\\\n            <input class=\"form-control\"\\\n                   cn-percentage-format\\\n                   ng-show=\"form.key\"\\\n                   ng-model-options=\"form.ngModelOptions\"\\\n                   ng-disabled=\"form.readonly\"\\\n                   sf-changed=\"form\"\\\n                   schema-validate=\"form\"\\\n                   type=\"number\"\\\n                   step=\"any\"\\\n                   min=\"{{form.min}}\"\\\n                   max=\"{{form.max}}\"\\\n                   id=\"{{form.key && form.key[0]}}\"\\\n                   name=\"{{form.key && form.key[0]}}\"\\\n                   ng-model=\"$$value$$\">\\\n             <div class=\"input-group-addon\"\\\n                    ng-disabled=\"form.readonly\"\\\n                    for=\"{{form.key && form.key[0]}}\">%</div>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-display.html', '\\\n        <div class=\"form-group cn-display{{form.htmlClass}}\">\\\n          <input ng-show=\"form.key\"\\\n                 class=\"form-control\"\\\n                 id=\"{{form.key.join(\\'.\\')}}\"\\\n                 name=\"{{form.key.join(\\'.\\')}}\"\\\n                 ng-disabled=\"true\"\\\n                 value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\\\n        </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-fieldset.html', '\\\n        <fieldset ng-disabled=\"form.readonly\" class=\"schema-form-fieldset {{form.htmlClass}}\">\\\n          <legend ng-click=\"form.toggleCollapse()\"\\\n                  ng-class=\"{\\'sr-only\\': !showTitle(), collapsible: form.collapsible}\"\\\n                  ng-mouseenter=\"form.render = true\">\\\n            <i ng-show=\"form.collapsible\"\\\n               class=\"fa fa-caret-{{form.collapsed ? \\'right\\' : \\'down\\'}}\"></i>\\\n            {{ form.title }}\\\n          </legend>\\\n          <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\\\n          <div collapse=\"form.collapsed\">\\\n            <div ng-if=\"form.render\">\\\n              <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"></sf-decorator>\\\n            </div>\\\n          </div>\\\n        </fieldset>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-mediaupload.html', '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\\n          <media-upload ng-model=\"$$value$$\"\\\n                        cn-file-type=\"form.fileType\"\\\n                        cn-upload-path=\"form.uploadPath\"\\\n                        cn-data=\"form.data\"\\\n                        cn-preview-path=\"form.previewPath\"\\\n                        cn-model-value-key=\"form.modelValueKey\"\\\n                        ng-model-options=\"form.ngModelOptions\"\\\n                        sf-changed=\"form\"\\\n                        schema-validate=\"form\"\\\n                        ff-form=\"form\"\\\n                        class=\"clearfix\">\\\n          </media-upload>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n       </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-csvupload.html', '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\\n          <csv-upload ng-model=\"$$value$$\"\\\n                        cn-upload-path=\"form.uploadPath\"\\\n                        ng-model-options=\"form.ngModelOptions\"\\\n                        sf-changed=\"form\"\\\n                        schema-validate=\"form\"\\\n                        ff-form=\"form\"\\\n                        class=\"clearfix\">\\\n          </csv-upload>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n       </div>\\\n        ');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-reusable.html', '\\\n        <div class=\"form-group cn-reusable {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\\n          <cn-select-or\\\n            ng-show=\"form.key\"\\\n            select-from=\"form.library\"\\\n            ng-model=\"$$value$$\"\\\n            ng-model-options=\"form.ngModelOptions\"\\\n            sf-changed=\"form\"\\\n            schema-validate=\"form\"\\\n            ff-form=\"form\"\\\n            directiveId=\"form.directiveId\"\\\n            item-template=\"form.itemTemplate\"\\\n            toggle-text=\"form.toggleText\"\\\n            disabled=\"form.readonly\"\\\n            view=\"form.view\">\\\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\\n          </cn-select-or>\\\n          <p ng-if=\"form.loadMore && form.view === \\'list\\'\">\\\n            <a ng-click=\"form.loadMore()\"\\\n               class=\"btn btn-default btn-block\">Load More</a>\\\n          </p>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n  }\n})();","(function() {\n  'use strict';\n  angular.module('cn.flex-form', [\n    'ui.router',\n    'schemaForm',\n    'ui.bootstrap.datetimepicker',\n    'cnTagsInput',\n    'cn.util'\n  ]);\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\n  function cnFlexFormConfigProvider() {\n\n    cnFlexFormConfig.$inject = ['$stateParams'];\n\n    var ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\n    return {\n      addIgnoreParam: addIgnoreParam,\n      $get: cnFlexFormConfig\n    };\n\n    ////////\n\n    function addIgnoreParam(param) {\n      ignoreParams.push(param);\n    }\n\n    function cnFlexFormConfig($stateParams) {\n      return {\n        getStateParams: getStateParams,\n        ignoreParams: ignoreParams\n      };\n\n      ////////\n\n      function getStateParams() {\n        return _\n            .chain($stateParams)\n            .omit(ignoreParams)\n            .omit(function(v) {\n              return _.isUndefined(v) || _.isNull(v);\n            })\n            .value();\n      }\n    }\n\n  }\n\n})();","(function () {\n  'use strict';\n\n  angular\n    .module('cn.flex-form')\n    .directive('cnFlexFormHeader', cnFlexFormHeader);\n\n  function cnFlexFormHeader() {\n    return {\n      restrict: 'E',\n      scope: {\n        config: '=ffHeaderConfig',\n        submit: '&ffSubmit',\n        loadOffscreen: '&ffLoadOffscreen'\n      },\n      controller: FlexFormHeader,\n      bindToController: true,\n      controllerAs: 'vm',\n      template: '\\\n          <div class=\"col-md-6\">\\\n            <h5 ng-if=\"vm.config.title.lead\">{{::vm.config.title.lead}}</h5>\\\n            <h1>{{vm.config.title.main}}</h1>\\\n            <h5 ng-if=\"vm.config.title.sub\">{{::vm.config.title.sub}}</h5>\\\n          </div>\\\n          <div class=\"{{vm.config.buttonContainerClass || \\'page-action-btns\\'}}\">\\\n            <div class=\"btn-options\"\\\n                 ng-mouseover=\"vm.loadOffscreen()\">\\\n              <a class=\"btn\"\\\n                 ng-if=\"vm.config.actionConfig.returnState\"\\\n                 ui-sref=\"{{vm.config.actionConfig.returnState}}\">\\\n                {{vm.config.actionConfig.returnText || \\'Cancel\\'}}\\\n              </a>\\\n              <span ng-repeat=\"button in vm.config.actionConfig.actions\">\\\n                <a class=\"btn {{button.style && \\'btn-\\'+button.style}}\"\\\n                   ng-disabled=\"vm.isDisabled(button)\"\\\n                   ng-class=\"{\\'btn-primary\\': $index === vm.config.actionConfig.actions.length - 1}\"\\\n                   ng-click=\"vm.submit({ handler: button.handler})\"\\\n                   tooltip=\"{{button.helptext}}\"\\\n                   tooltip-placement=\"bottom\">\\\n                  {{button.text || \\'Save\\'}}\\\n                </a>\\\n              </span>\\\n            </div>\\\n            <p class=\"data-updated-at text-right\"\\\n               id=\"data-updated-at\"\\\n               ng-hide=\"vm.config.noData\">\\\n              <a ng-click=\"vm.updateData()\">Update Data</a>\\\n            </p>\\\n          </div>'\n    };\n  }\n\n  FlexFormHeader.$inject = ['$scope'];\n  function FlexFormHeader($scope) {\n    var vm = this;\n\n    vm.updateData = updateData;\n    vm.isDisabled = isDisabled;\n\n    ///////////\n\n    function updateData() {\n      console.log('updateData:', updateData);\n      $scope.$emit('ffRefreshData');\n    }\n\n    function isDisabled(btnConfig) {\n      if(vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n      return false;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n      .module('cn.flex-form')\n      .controller('FlexFormModalLoader', FlexFormModalLoader)\n      .factory('FlexFormModal', FlexFormModal);\n\n  FlexFormModalLoader.$inject = [\n    'FlexFormModal', '$state', '$rootScope', '$stateParams'\n  ];\n  function FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams) {\n\n    var vm = this;\n    console.log('FlexFormModalLoader:', $stateParams.modal);\n\n    activate();\n\n    //////////\n\n    function activate() {\n      vm.modal = FlexFormModal.open(vm);\n      vm.modal.result.finally(goBack);\n\n      vm.dismiss = $rootScope.$on('$stateChangeStart', dismissModal);\n    }\n\n    function goBack() {\n      console.log('goBack:');\n      $state.go('^');\n    }\n\n    function dismissModal() {\n      console.log('dismissModal:', arguments);\n      vm.dismiss();\n      vm.modal.dismiss();\n    }\n  }\n\n  FlexFormModal.$inject = ['cnFlexFormModalLoaderService', '$modal', '$stateParams'];\n  function FlexFormModal(cnFlexFormModalLoaderService, $modal, $stateParams) {\n\n    var instance = {\n      open: openModal\n    };\n\n    return instance;\n\n    function openModal() {\n      var currentModal = cnFlexFormModalLoaderService.getMapping($stateParams.modal);\n      console.log('currentModal:', currentModal);\n\n      this.modal = $modal.open(currentModal);\n      return this.modal;\n    }\n\n  }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider);\n\n  var modalMap = {};\n  var promiseMap = {};\n\n  function getPromises(state) {\n    var promises = promiseMap[state];\n    if(!promises) {\n      promises = {};\n      promiseMap[state] = promises;\n    }\n    return promises;\n  }\n\n  function getPromise(state, id, $q) {\n    var promises = getPromises(state);\n    var promise = promises[id];\n    if(!promise) {\n      promise = $q.defer();\n      promises[id] = promise;\n    }\n    return promise;\n  }\n\n  function cnFlexFormModalLoaderServiceProvider() {\n\n    var provider = {\n      addMapping: addMapping,\n      $get: cnFlexFormModalLoaderService\n    };\n\n    parent.$inject = ['$stateParams', '$q'];\n\n    return provider;\n\n    ////////////\n\n    function addMapping(state, def) {\n      def.resolve = {\n        parent: parent\n      };\n      modalMap[state] = def;\n    }\n\n    function parent($stateParams, $q) {\n      return getPromise($stateParams.modal, $stateParams.modalId, $q).promise;\n    }\n  }\n\n  cnFlexFormModalLoaderService.$inject = ['$q'];\n\n  function cnFlexFormModalLoaderService($q) {\n    var service = {\n      getMapping: getMapping,\n      resolveMapping: resolveMapping\n    };\n\n    return service;\n\n    /////////////\n\n    function resolveMapping(state, id, parent) {\n      var d = getPromise(state, id, $q);\n      d.resolve(parent);\n      return d.promise;\n    }\n\n    function getMapping(state) {\n      return modalMap[state];\n    }\n  }\n\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\n  function cnFlexFormTypesProvider() {\n\n    var fieldTypeRegister = [{\n      condition: function(field) {\n        return field.type === 'hidden';\n      },\n      type: 'hidden'\n    }, {\n      condition: function(field) {\n        return field.type.includes('radios');\n      },\n      type: 'cn-radios'\n    }, {\n      condition: function(field) {\n        return field.type.includes('radiobuttons');\n      },\n      type: 'cn-radiobuttons'\n    }, {\n      condition: function(field) {\n        return field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery;\n      },\n      type: 'cn-autocomplete'\n    }, {\n      condition: function(field) {\n        return field.type === 'cn-datetimepicker' || field.type === 'datetime-local';\n      },\n      type: 'cn-datetimepicker'\n    }, {\n      condition: function(field) {\n        return field.type === 'help';\n      },\n      type: 'help'\n    }, {\n      condition: function(field) {\n        return field.type.includes('display');\n      },\n      type: 'cn-display'\n    }, {\n      condition: function(field) {\n        return field.schema && field.schema.format && field.schema.format.includes('currency');\n      },\n      type: 'cn-currency'\n    }, {\n      condition: function(field) {\n        return field.schema && field.schema.format === 'percentage';\n      },\n      type: 'cn-percentage'\n    }, {\n      condition: function(field) {\n        return field.type === 'toggle' || field.type === 'boolean';\n      },\n      type: 'cn-toggle'\n    }, {\n      condition: function(field) {\n        return field.type === 'mediaupload';\n      },\n      type: 'cn-mediaupload'\n    }, {\n      condition: function(field) {\n        return field.type === 'csvupload';\n      },\n      type: 'cn-csvupload'\n    }, {\n      condition: function(field) {\n        return field.type === 'reusable';\n      },\n      type: 'cn-reusable'\n    }, {\n      condition: function(field) {\n        return field.type === 'array';\n      },\n      type: 'section'\n    }];\n\n    return {\n      registerFieldType: registerFieldType,\n      $get: cnFlexFormTypes\n    };\n\n    ////////\n\n    function registerFieldType(fieldType) {\n      fieldTypeRegister.unshift(fieldType);\n    }\n\n    function cnFlexFormTypes() {\n      return {\n        fieldTypeRegister: fieldTypeRegister,\n        getFieldType: getFieldType\n      };\n\n      /////////\n\n      function getFieldType(field) {\n        for(var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n          if(fieldTypeRegister[i].condition(field)) {\n            return fieldTypeRegister[i].type;\n          }\n        }\n        return field.type || field.schema && field.schema.type;\n      }\n    }\n\n  }\n\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .directive('ffValidate', ffValidate);\n\n  function ffValidate() {\n    return {\n      restrict: 'A',\n      scope: { form: '=ffValidate' },\n      require: 'ngModel',\n      link: link\n    };\n  }\n\n  function link($scope, elem, attrs, ngModel) {\n    //console.log('$scope, ngModel:', $scope.form, ngModel);\n    if($scope.form && $scope.form.required) {\n      $scope.$watch(function() { return ngModel.$viewValue; }, function(value) {\n        // override schemaForm validation\n        ngModel.$setValidity('schemaForm', true);\n        ngModel.$setValidity('tv4-302', value);\n      });\n    }\n  }\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .directive('cnFlexForm', cnFlexForm);\n\n  function cnFlexForm() {\n    return {\n      restrict: 'E',\n      template: '\\\n        <div ng-if=\"vm.showForm()\">\\\n          <ng-form name=\"{{vm.formName}}\"\\\n                sf-schema=\"vm.config.schema.schema\"\\\n                sf-form=\"vm.form\"\\\n                sf-model=\"vm.model\"></ng-form>\\\n          <!-- debug panel to display model -->\\\n          <pre ng-if=\"vm.debug\">{{vm.model|json}}</pre>\\\n        </div>\\\n      ',\n      scope: {\n        config: '=ffConfig',\n        model: '=ffModel',\n        formIndex: '=ffFormIndex',\n        formName: '=ffFormName',\n        delayForm: '=ffDelayForm',\n        cleanupEvent: '=ffCleanupEvent'\n      },\n      controller: FlexForm,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  FlexForm.$inject = ['cnFlexFormService', '$scope', '$location'];\n  function FlexForm(cnFlexFormService, $scope, $location) {\n    var vm = this;\n    vm.service = undefined;\n    vm.events = [];\n\n    vm.activate = activate;\n    vm.cleanup = cleanup;\n    vm.process = process;\n    vm.showForm = showForm;\n\n    vm.events.push($scope.$watch(function() { return vm.config.schema; }, vm.process));\n\n    vm.activate();\n\n    $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\n    //////////\n\n    function activate() {\n      //console.log('vm.formName:', vm.formName);\n      if(angular.isNumber(vm.formIndex)) {\n        vm.form = vm.config.schema.forms[vm.formIndex].form;\n      }\n      else {\n        vm.form = vm.config.schema.form;\n      }\n\n      // debug\n      if($location.search().debug) {\n        vm.debug = true;\n      }\n    }\n\n    function process(cur, prev) {\n      //console.log('process:', cur, prev);\n      if(vm.form) {\n        if(!vm.service) {\n          vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n            formCtrl: vm.config.formCtrl,\n            getSchema: vm.config.getSchema,\n            updateSchema: updateSchema\n          });\n        }\n        else {\n          console.log('vm.service.isCompiled():', vm.service.isCompiled());\n          vm.service.compile(vm.config.schema, vm.model);\n        }\n        //$scope.$broadcast('schemaFormRedraw');\n      }\n    }\n\n    function showForm() {\n      //console.log('showForm:', vm.delayForm, vm.formName);\n      return !vm.delayForm && vm.service && vm.service.isCompiled();\n    }\n\n    function updateSchema(schema) {\n      vm.config.schema = schema;\n      vm.activate();\n    }\n\n    function cleanup() {\n      _.each(vm.events, function(listener) {\n        listener();\n      });\n      vm.service.cleanup();\n    }\n\n  }\n})();","(function() {\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormRoutes', cnFlexFormRoutesProvider)\n      .config(cnFlexFormRoutes);\n\n  cnFlexFormRoutesProvider.$inject = ['$stateProvider'];\n  function cnFlexFormRoutesProvider($stateProvider) {\n    var provider = {\n      addStates: addStates,\n      $get: $get\n    };\n\n    return provider;\n\n    ////////////\n\n    function $get() {\n      // nothing to do here, but required\n    }\n\n    function addStates(options) {\n      $stateProvider\n          .state(options.name + '.page.modal', {\n            url: '/~:modal/:modalId',\n            controller: 'FlexFormModalLoader',\n            controllerAs: 'vm',\n            permissions: options.permissions\n          });\n    }\n  }\n\n  cnFlexFormRoutes.$inject = ['$stateProvider'];\n  function cnFlexFormRoutes($stateProvider) {\n\n    $stateProvider\n        .state('flex-form-sandbox', {\n          url: '/flex-form/sandbox',\n          controller: 'FlexFormSandbox',\n          controllerAs: 'vm',\n          templateUrl: 'app/components/cn-flex-form/sandbox.html'\n        });\n  }\n\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormService', cnFlexFormServiceProvider);\n\n  var fieldTypeHandlers = {\n    //'cn-radios': 'processRadios',\n    'cn-radiobuttons': 'processRadiobuttons',\n    'cn-autocomplete': 'processSelect',\n    'cn-datetimepicker': 'processDate',\n    'help': 'processHelp',\n    'cn-display': 'processDisplay',\n    'cn-currency': 'processCurrency',\n    'cn-percentage': 'processPercentage',\n    'cn-mediaupload': 'processMediaUpload',\n    'cn-csvupload': 'processCsvUpload',\n    'cn-reusable': 'processReusable',\n    'cn-toggle': 'processToggle',\n    'section': 'processSection'\n  };\n\n  cnFlexFormServiceProvider.$inject = [\n    'schemaFormDecoratorsProvider',\n    'cnFlexFormTypesProvider'\n  ];\n\n  function cnFlexFormServiceProvider(schemaFormDecoratorsProvider,\n                                     cnFlexFormTypesProvider) {\n    return {\n      registerField: registerField,\n      $get: CNFlexFormService\n    };\n\n    //////////\n\n    function registerField(fieldType) {\n      if(fieldType.condition) {\n        cnFlexFormTypesProvider.registerFieldType({\n          condition: fieldType.condition,\n          type: fieldType.type\n        });\n      }\n\n      if(fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n\n      if(fieldType.templateUrl) {\n        schemaFormDecoratorsProvider.addMapping(\n            'bootstrapDecorator',\n            fieldType.type,\n            fieldType.templateUrl\n        );\n        schemaFormDecoratorsProvider.createDirective(\n            fieldType.type,\n            fieldType.templateUrl\n        );\n      }\n    }\n  }\n\n  CNFlexFormService.$inject = [\n    'Api', '$parse', 'cnFlexFormConfig', 'cnFlexFormTypes',\n    '$interpolate', '$rootScope', '$timeout', 'cnUtil', '$stateParams'\n  ];\n\n  function CNFlexFormService(Api, $parse, cnFlexFormConfig, cnFlexFormTypes,\n                             $interpolate, $rootScope, $timeout, cnUtil, $stateParams) {\n\n    var services = [];\n    var prototype = {\n      compile,\n      addArrayCopy,\n      addToDataCache,\n      addToFormCache,\n      broadcastErrors,\n      buildError,\n      cleanup,\n      deregisterHandlers,\n      deregisterArrayHandlers,\n      getArrayCopies,\n      getArrayCopiesFor,\n      getFromDataCache,\n      getFromFormCache,\n      getKey,\n      getSchema,\n      handleResolve,\n      initArrayCopyWatch,\n      initModelWatch,\n      initSchemaParams,\n      isCompiled,\n      isConditionFunction,\n      onModelWatch,\n      parseCondition,\n      parseExpression,\n      processDefault,\n      processDisplay,\n      processField,\n      processFieldset,\n      processFieldWatch,\n      processComponent,\n      processCurrency,\n      processPercentage,\n      processDate,\n      processHelp,\n      //processRadios,\n      processRadiobuttons,\n      processReusable,\n      processSchema,\n      processSelectDisplay,\n      processResolve,\n      processSection,\n      processSelect,\n      processTemplate,\n      processToggle,\n      processUpdatedSchema,\n      processMediaUpload,\n      processCsvUpload,\n      registerArrayHandlers,\n      registerHandler,\n      registerResolve,\n      reprocessField,\n      setArrayIndex,\n      setupConfig,\n      setupSchemaRefresh\n    };\n\n    function CNFlexFormConstructor(schema, model, config) {\n      var service;\n      if(services.length) {\n        for(var i = 0, l = services.length; i < l; i++) {\n          if(services[i].model === model) {\n            service = services[i];\n            //console.log('service.compile:', service.compile);\n            service.compile(schema, model, config);\n            break;\n          }\n        }\n        //console.log('services1:', services, service);\n      }\n      if(!service) {\n        service = new CNFlexForm(schema, model, config);\n        services.push(service);\n        //console.log('services2:', services, service);\n      }\n      return service || new CNFlexForm(schema, model, config);\n    }\n\n    function CNFlexForm(schema, model, config) {\n\n      if($stateParams.debug) {\n        window.services = services;\n      }\n\n      this.arrayCopies = {};\n      this.arrayListeners = {};\n      this.dataCache = {};\n      this.defaults = {};\n      this.errors = [];\n      this.events = [];\n      this.formCache = {};\n      this.listeners = {};\n      this.resolveRegister = {};\n      this.model = model;\n      this.updates = 0;\n\n      this.params = cnFlexFormConfig.getStateParams();\n\n      this._ = _;\n\n      this.compile(schema, model, config);\n    }\n\n    _.extend(CNFlexForm.prototype, prototype);\n    _.extend(CNFlexFormConstructor, prototype);\n\n    return CNFlexFormConstructor;\n\n    //////////////\n\n    function compile(schema, model, config) {\n      var service = this;\n\n      service.schema = schema;\n      service.model = model;\n\n      //console.log('compile:schema, model:', schema.compiled, service.isCompiled(), schema, model);\n      if(!service.isCompiled()) {\n        service.setupConfig(config);\n\n        if(schema.forms) {\n          _.each(schema.forms, function(form) {\n            _.each(form.form, service.processField.bind(service));\n          });\n        }\n        else {\n          _.each(schema.form, service.processField.bind(service));\n        }\n\n        service.initModelWatch();\n        service.initArrayCopyWatch();\n        service.isCompiled(true);\n      }\n\n      service.broadcastErrors();\n    }\n\n    function isCompiled(setValue) {\n      var service = this;\n      if(setValue) {\n        service.schema.compiled = setValue;\n      }\n      return service.schema && service.schema.compiled;\n    }\n\n    function setupConfig(config) {\n      var service = this;\n      if(config) {\n        if(config.formCtrl) service.formCtrl = config.formCtrl;\n        if(config.updateSchema) service.updateSchema = config.updateSchema;\n        if(config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n      }\n    }\n\n    function processSchema(field) {\n      var service = this,\n          schema = field.schema;\n\n      if(schema) {\n\n        field.getSchemaType = function() {\n          return _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n        };\n\n        service.processDefault(field);\n      }\n    }\n\n    function processDefault(field) {\n      var service = this,\n          schema = field.schema;\n      //console.log('processDefault:', field.key, schema, service.updates);\n      if(schema.default) {\n        var key = service.getKey(field.key);\n        // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n        if(service.updates) {\n          if(key.includes && key.includes('[]')) return;\n          var model = service.parseExpression(field.key, service.model);\n          var modelValue = model.get();\n          // if there's an existing default and it's the same as the current value\n          // update the current value to the new default\n          //console.error('default:', key, modelValue, service.defaults[key], angular.equals(modelValue, service.defaults[key]));\n          if(!service.defaults[key] || _.isUndefined(modelValue) || angular.equals(modelValue, service.defaults[key])) {\n            model.set(schema.default);\n          }\n        }\n        service.defaults[key] = angular.copy(schema.default);\n      }\n    }\n\n    function processFieldset(fieldset) {\n      var service = this;\n\n      fieldset.type = 'cn-fieldset';\n      _.each(fieldset.items, service.processField.bind(service));\n\n      if(fieldset.collapsible) {\n        fieldset.toggleCollapse = function() {\n          if(fieldset.collapsible) {\n            fieldset.collapsed = !fieldset.collapsed;\n          }\n        };\n\n        fieldset.render = !fieldset.collapsed;\n      }\n      else {\n        fieldset.render = true;\n      }\n    }\n\n    function processField(field) {\n      var service = this;\n\n      if (field.selectDisplay) {\n        service.processSelectDisplay(field, service.getSchema(field.key));\n      }\n\n      if(field.type === 'fieldset') {\n        service.processFieldset(field);\n      }\n      else {\n        if(!field._ogKeys) field._ogKeys = _.without(_.keys(field), 'key');\n\n        var key = service.getKey(field.key);\n\n        if(field.key) {\n          service.addToFormCache(field, key);\n          field.schema = service.getSchema(key);\n\n          if(field.schema) {\n            if(field.schema.description) field.description = field.schema.description;\n            if(field.readonly && !field.schema.readonly) field.readonly = false;\n          }\n        }\n\n        service.processSchema(field);\n\n        if(!field.type) field.type = field.getSchemaType && field.getSchemaType();\n\n        if(field.resolve) service.processResolve(field);\n\n        if(field.watch) service.processFieldWatch(field);\n\n        if(field.type === 'section' || field.type === 'tabarray') {\n          service.processSection(field);\n        }\n        else if(field.type === 'component') {\n          service.processComponent(field);\n        }\n        else {\n\n          var fieldType = cnFlexFormTypes.getFieldType(field);\n          var handler = fieldTypeHandlers[fieldType];\n          if(_.isString(handler)) {\n            service[handler](field);\n          }\n          else if(_.isFunction(handler)) {\n            handler.call(service, field);\n          }\n\n          if(field.updateSchema) {\n            service.registerHandler(field, null, field.updateSchema);\n          }\n          if(field.error) {\n            service.errors.push(service.buildError(field));\n            if (_.isEmpty(field.ngModelOptions)) {\n              field.ngModelOptions = {\n                allowInvalid: true\n              };\n            } else {\n              field.ngModelOptions.allowInvalid = true;\n            }\n          }\n          else if(_.find(service.errors, {key: key})) {\n            service.errors = _.reject(service.errors, {key: key});\n            $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n            $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n          }\n        }\n      }\n    }\n\n    function getKey(key) {\n      if(_.isArray(key)) {\n        key = _.reduce(key, function(total, next) {\n          if(/^(\\d*)$/.test(next)) {\n            return total + '[' + next + ']';\n          }\n          return total + '.' + next;\n        });\n      }\n      return key;\n    }\n\n    function getSchema(key, depth) {\n      var service = this;\n      if(!key) return;\n\n      key = service.getKey(key);\n\n      //console.log('getSchema:', key, depth, service);\n      //key = key.split('.');\n      key = key\n          .replace(/arrayIndex/g, '')\n          .replace(/(\\[')([^.]+)\\.([^.]+)('])/g, '.$2%ff_dt%$3')\n          .replace(/\\./g, '%ff_sp%')\n          .replace(/%ff_dt%/g, '.')\n          .split('%ff_sp%');\n      depth = depth || service.schema.schema.properties;\n\n      var first, matchArray;\n\n      while(key.length > 1) {\n        first = key[0];\n        matchArray = first.match(/\\[\\d*]$/);\n        //if(first.slice(first.length - 2) === '[]') {\n        if(matchArray) {\n          depth = depth[key.shift().slice(0, first.length - matchArray[0].length)].items.properties;\n        }\n        else {\n          depth = depth[key.shift()].properties;\n        }\n      }\n\n      first = key[0];\n      matchArray = first.match(/\\[\\d*]$/);\n\n      if(matchArray) {\n        return depth[first.slice(0, first.length - matchArray[0].length)].items;\n      }\n\n      return depth[first];\n    }\n\n    function processResolve(field) {\n      var service = this;\n\n      _.each(field.resolve, function(dataProp, fieldProp) {\n        service.handleResolve(field, fieldProp, dataProp);\n\n        var resolveType = dataProp.match(/^(schema\\.data\\.|model\\.)(\\w+)/);\n\n        if(resolveType) {\n          if(resolveType[1] === 'schema.data.') {\n            service.registerResolve(field, fieldProp, resolveType[2]);\n          }\n          else if(resolveType[1] === 'model.') {\n            service.registerHandler(resolveType[2], function() {\n              service.handleResolve(field, fieldProp, dataProp);\n            });\n          }\n        }\n      });\n\n      return field;\n    }\n\n    function handleResolve(field, fieldProp, exp) {\n      var service = this;\n      var data = service.parseExpression(exp).get();\n      if (data && data.cursor) {\n        field.loadMore = function() {\n          var dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n          service.refreshSchema(`data:${dataProp}:${data.cursor}`);\n        };\n      } else {\n        delete field.loadMore;\n      }\n      field[fieldProp] = (data && data.data) ? data.data : data;\n    }\n\n    function registerResolve(field, fieldProp, dataProp) {\n      var service = this;\n\n      let fieldKey = service.getKey(field.key);\n      service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\n      let register = service.resolveRegister[dataProp];\n      register[fieldKey] = register[fieldKey] || [];\n      register[fieldKey].push({\n        field: field,\n        prop: fieldProp\n      });\n    }\n\n    function processFieldWatch(field) {\n      var service = this,\n          schema = field.schema;\n\n      field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\n      _.each(field.watch, function(watch) {\n        if(watch.resolution) {\n          var condition = watch.condition;\n          var functionCondition = service.isConditionFunction(condition);\n\n          var resolution = watch.resolution;\n          var handler;\n\n          //console.log('resolution:', resolution);\n          if(_.isFunction(resolution)) {\n            handler = function(cur, prev) {\n              var parsedCondition = functionCondition ? service.parseCondition(functionCondition) : condition;\n              if(!parsedCondition || $parse(parsedCondition)(service)) {\n                resolution(cur, prev);\n              }\n            };\n          }\n          else {\n            var adjustment = {};\n\n            adjustment.date = resolution.match(/\\+ ?(\\d+) days/);\n\n            if(adjustment.date) {\n              adjustment.date = adjustment.date[1];\n              resolution = resolution.replace(adjustment.date, '').trim();\n            }\n            else {\n              adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\n              if(adjustment.math) {\n                adjustment.operator = {\n                  '+': 'add',\n                  '-': 'subtract',\n                  '*': 'multiply',\n                  '/': 'divide'\n                }[adjustment.math[1]];\n\n                //console.log('adjustment:', adjustment);\n                adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n              }\n            }\n\n            resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n            //console.log('resolution:', resolution);\n\n            handler = function() {\n              var updatePath, fromPath;\n              if(resolution[1].includes('arrayIndex')) {\n                updatePath = replaceArrayIndex(resolution[1], arguments[2]);\n              }\n              if (resolution[2].includes('arrayIndex')) {\n                fromPath = replaceArrayIndex(resolution[2], arguments[2]);\n              }\n              var update = service.parseExpression(updatePath || resolution[1]);\n              var from = service.parseExpression(fromPath || resolution[2]);\n\n              //console.log('handler:resolution:', field.key, condition, condition && $parse(condition)(service));\n              var parsedCondition = functionCondition ? service.parseCondition(functionCondition, condition) : condition;\n              //if(functionCondition) {\n              //  console.log('parsedCondition:', parsedCondition, $parse(parsedCondition)(service));\n              //}\n              if(!parsedCondition || $parse(parsedCondition)(service)) {\n                //console.log('update:', update.get(), from.get());\n                if(adjustment.date) {\n                  update.set(moment(from.get()).add(adjustment.date, 'days').toDate());\n                }\n                else if(adjustment.math) {\n                  //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n                  //console.log('_.%s(%s, %s):', adjustment.operator, from.get(), adjustment.adjuster.get(), result);\n                  var result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n                  //console.log('eval(%s %s %s):', from.get(), adjustment.math[1], adjustment.adjuster.get(), result);\n                  //console.log('result:', result);\n                  //console.log('adjustment.math:', adjustment, from.get(), adjustment.adjuster.get(), result);\n                  //console.log('schema.format:', schema.format);\n                  schema = schema || field.items && (field.items[0].schema || (field.items[0].items && field.items[0].items[0].schema));\n                  if(field.type === 'cn-currency') {\n                    //console.log('schema.format:', schema.format, result);\n                    var p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\n                    if(adjustment.math[1] === '*') {\n                      result = _.floor(result, p);\n                    }\n                    else if(adjustment.math[1] === '/') {\n                      result = _.ceil(result, p);\n                    }\n                    else {\n                      result = _.round(result, p);\n                    }\n                  }\n                  service.listeners[update.path().key].prev = result;\n                  update.set(result || 0);\n                }\n                else {\n                  update.set(from.get());\n                }\n              }\n            };\n          }\n\n          service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n        }\n      });\n    }\n\n    function isConditionFunction(condition) {\n      return condition && condition.match(/(\\!?)(.+)\\((.+)\\)/);\n    }\n\n    function parseCondition(condition, original) {\n      var service = this,\n          invert = condition[1],\n          functionName = condition[2],\n          functionArgument = condition[3];\n\n      if(functionName === 'any') {\n        var predicate = functionArgument.match(/(.+)\\[\\]\\.*(.*)(===|>|<|>=|<=)(.+)/),\n            arr = service.parseExpression(predicate[1]).get(),\n            comparator = predicate[3],\n            comparisonValue = predicate[4].trim().replace(/'/g, ''),\n            key = predicate[2].trim(),\n            evaluation = false;\n\n        arr.forEach(function(value) {\n          var val = key ? value[key] : value;\n          if(evaluatePredicate(val, comparator, comparisonValue)) {\n            evaluation = true;\n          }\n        });\n\n        return invert ? (!evaluation).toString() : evaluation.toString();\n      }\n      else {\n        condition = original.replace(/model\\./g, 'service.model.');\n        //console.log('eval:', condition, eval(condition));\n        // stupid hack so we can evaluate the evaluated results\n        return !!eval(condition) + '';\n      }\n    }\n\n    function evaluatePredicate(val1, comparator, val2) {\n      switch(comparator) {\n        case '===': return val1 === val2;\n        case '>=': return val1 >= val2;\n        case '<=': return val1 <= val2;\n        case '>': return val1 > val2;\n        case '<': return val1 < val2;\n      }\n    }\n\n    function registerHandler(key, handler, updateSchema, runHandler) {\n      var service = this;\n\n      // if field is passed instead of key\n      if(_.isObject(key) && !_.isArray(key)) {\n        if(!key.key && key.items) {\n          _.each(key.items, function(field) {\n            service.registerHandler(field, handler, field.updateSchema);\n          });\n          return;\n        }\n        else {\n          key = key.key;\n        }\n      }\n\n      key = service.getKey(key);\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.+)/);\n\n      if(arrMatch) {\n        service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n        return;\n      }\n\n      var cur = service.parseExpression(key, service.model).get();\n\n      if(!service.listeners[key]) {\n        var prev = angular.copy(cur);\n        //console.log('prev:', key, prev, angular.equals(prev, service.parseExpression(key, service.model).get()));\n        service.listeners[key] = {\n          handlers: [],\n          updateSchema: updateSchema,\n          prev: prev\n        };\n      }\n\n      if(handler) {\n        service.listeners[key].handlers.push(handler);\n        if(runHandler) handler(cur, null, key);\n      }\n    }\n\n    function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n      //console.log('registerArrayHandlers:', arrKey, fieldKey);\n      var service = this;\n      var onArray = function(cur, prev) {\n        var i, l, key;\n\n        if(prev && prev > cur) {\n          var lastKey = arrKey + '[' + (prev - 1) + ']' + '.' + fieldKey;\n          // only deregister handlers once each time an element is removed\n          if (service.listeners[lastKey]) {\n            for(i = 0, l = prev; i < l; i++) {\n              key = arrKey + '[' + i + ']' + '.' + fieldKey;\n              service.deregisterHandlers(key);\n            }\n          }\n          for(i = 0, l = cur; i < l; i++) {\n            key = arrKey + '[' + i + ']' + '.' + fieldKey;\n            service.registerHandler(key, handler, updateSchema);\n            //no need to call if just reregisering handlers\n            //if(runHandler) handler(null, null, key);\n          }\n        }\n        else if(cur > (prev || 0)) {\n          for(i = prev, l = cur; i < l; i++) {\n            key = arrKey + '[' + i + ']' + '.' + fieldKey;\n            service.registerHandler(key, handler, updateSchema, runHandler);\n            //if(runHandler) handler(null, null, key);\n          }\n        }\n      };\n\n      var arrVal = service.parseExpression(arrKey, service.model).get();\n      _.each(arrVal, function(field, i) {\n        var key = arrKey + '[' + i + ']' + '.' + fieldKey;\n        service.registerHandler(key, handler, updateSchema);\n        if(runHandler) handler(null, null, key);\n      });\n\n      if(service.arrayListeners[arrKey + '.length']) {\n        service.arrayListeners[arrKey + '.length'].handlers.push(onArray);\n      } else {\n        service.arrayListeners[arrKey + '.length'] = {\n          handlers: [onArray],\n          prev: arrVal ? arrVal.length : 0\n        };\n      }\n    }\n\n    function deregisterHandlers(key) {\n      var service = this;\n\n      key = service.getKey(key);\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.+)/);\n\n      if(arrMatch) {\n        service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n        return;\n      }\n\n      //console.log('deregisterHandlers:', key);\n      if(service.listeners[key]) service.listeners[key].handlers = [];\n    }\n\n    function deregisterArrayHandlers(arrKey, fieldKey) {\n      var service = this;\n\n      //console.log('deregisterArrayHandlers:', arrKey, fieldKey);\n\n      service.parseExpression(arrKey, service.model).get().forEach((item, i) => {\n        service.deregisterHandlers(`${arrKey}[${i}].${fieldKey}`);\n      });\n    }\n\n    function initModelWatch() {\n      //console.log('initModelWatch:', initModelWatch);\n      var service = this;\n      if(service.watching) return;\n      if(service.modelWatch) service.modelWatch();\n\n      service.modelWatch = $rootScope.$watch(\n          function() { return service.model; },\n          service.onModelWatch.bind(service),\n          true\n      );\n\n      service.initSchemaParams();\n      service.watching = true;\n      service.firstUpdate = true;\n    }\n\n    function onModelWatch(cur, prev) {\n      var service = this;\n      // we always run through the listeners on the first update because angular seems to mess up\n      // when the defaults are applied and uses the same object for both cur and prev\n      if(service.firstUpdate || !angular.equals(cur, prev)) {\n        service.firstUpdate = false;\n        cnUtil.cleanModel(service.model);\n\n        service.prevParams = angular.copy(service.params);\n        service.params = {};\n\n        _.each(service.arrayListeners, function(listener, key) {\n          var val = service.parseExpression(key, service.model).get();\n          if(!angular.equals(val, listener.prev)) {\n            _.each(listener.handlers, function(handler) {\n              handler(val, listener.prev);\n            });\n            listener.prev = angular.copy(val);\n          }\n        });\n\n        _.each(service.listeners, function(listener, key) {\n          if(listener) {\n            var val = service.parseExpression(key, service.model).get();\n            //console.log('listener:', key, val, listener.prev, angular.equals(val, listener.prev));\n            if(!angular.equals(val, listener.prev)) {\n              _.each(listener.handlers, function(handler) {\n                handler(val, listener.prev, key);\n              });\n              listener.prev = angular.copy(val);\n            }\n            if(listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n              service.params[key] = val;\n            }\n          }\n        });\n\n        //console.log('service.params, service.prevParams:', service.params, service.prevParams, !angular.equals(service.params, service.prevParams), service.updates);\n        if(!angular.equals(service.params, service.prevParams)) {\n          if(service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n            ++service.updates;\n          }\n          else {\n            service.refreshSchema();\n          }\n        }\n      }\n    }\n\n    function initSchemaParams() {\n      var service = this;\n      _.each(service.listeners, function(listener, key) {\n        if(listener) {\n          var val = service.parseExpression(key, service.model).get();\n          if(listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n            service.params[key] = val;\n          }\n        }\n      });\n    }\n\n    function initArrayCopyWatch() {\n      console.log('initArrayCopyWatch: how many times does this event get registered?');\n      var service = this;\n\n      //TODO: refactor this, only register event once\n      service.events.push($rootScope.$on('schemaFormPropagateScope', function(event, scope) {\n        var key = service.getKey(scope.form.key);\n        var index = key.match(/^.*\\[(\\d+)].*$/);\n\n        key = key.replace(/\\[\\d+]/g, '[]');\n        index = index && parseInt(index[1]);\n        //console.log('key, index, scope.form.key, scope.form:', key, index, scope.form.key, scope.form);\n\n        if(!scope.form.condition) scope.form.condition = 'true';\n\n        service.addArrayCopy(scope.form, key, index);\n        //console.log('service.arrayCopies:', service.arrayCopies);\n        scope.$emit('flexFormArrayCopyAdded', key);\n      }));\n\n      service.events.push($rootScope.$on('schemaFormDeleteScope', function(event, scope, index) {\n        console.log('schemaFormDeleteScope:', index, scope.form, scope);\n        var key = service.getKey(scope.form.key).replace(/\\[\\d+]/g, '[]');\n        var copies = service.getArrayCopiesFor(key);\n\n        copies.forEach((list) => {\n          list.splice(index, 1);\n        });\n\n        if(scope.form.link) {\n          var list = service.parseExpression(scope.form.link, service.model).get();\n          list.splice(index, 1);\n        }\n      }));\n    }\n\n    function addArrayCopy(form, key, index) {\n      var service = this;\n      if(!index || index < 0) index = 0;\n      if(!service.arrayCopies[key]) service.arrayCopies[key] = [];\n      service.arrayCopies[key][index] = form;\n      //service.arrayCopies[key].push(form);\n    }\n\n    function getArrayCopies(key) {\n      var service = this;\n      return service.arrayCopies[key];\n    }\n\n    function getArrayCopiesFor(keyStart) {\n      var service = this;\n      var copiesList = [];\n      keyStart += '[]';\n\n      _.each(service.arrayCopies, (copies, key) => {\n        if(key.includes(keyStart)) copiesList.push(copies);\n      });\n\n      return copiesList;\n    }\n\n    function addToFormCache(field, key) {\n      var service = this;\n      key = key || service.getKey(field.key);\n      if(!service.getFromFormCache(key)) service.formCache[key] = field;\n    }\n\n    function getFromFormCache(key) {\n      var service = this;\n      return service.formCache[key];\n    }\n\n    function addToDataCache(key, modelValue) {\n      var service = this;\n\n      if(key) {\n        service.dataCache[key] = modelValue;\n      }\n    }\n\n    function getFromDataCache(key) {\n      var service = this;\n\n      return service.dataCache[key];\n    }\n\n    function parseExpression(exp, depth) {\n      var service = this;\n      // if expression is specific value\n      if(!exp || /^(null|false|true|undefined|''|[0-9.]+|\\[]|\\{})$/.test(exp)) {\n        return {\n          \"get\": function() {\n            return eval(exp);\n          }\n        };\n      }\n\n      exp = service.getKey(exp);\n\n      //var key;\n      var match = exp.match(/^(model\\.)?(\\S+)$/);\n\n      // cache fucks shit up if the model changes so disabling\n      //var cached;\n\n      // return from cache if possible\n      //if(!/\\[]/.test(exp) && match && match[2]) {\n      //  if(!depth || depth === service.model) {\n      //    key = match[2];\n      //\n      //    cached = service.getFromDataCache(key);\n      //    if(cached) {\n      //      return cached;\n      //    }\n      //  }\n      //}\n\n      var modelValue = {\n        \"get\": function() {\n          var path = exp.replace(/\\[]/g, '').replace(/\\[(\\d+)]/g, '.$1').split('.');\n          var start = depth || service;\n\n          while(start && path.length > 1) {\n            start = start[path.shift()];\n          }\n\n          //if(/\\[]/g.test(exp)) {\n          //  console.log('exp:', exp, start, start && start[path[0]]);\n          //}\n          return start && start[path[0]];\n        },\n        \"set\": function(val) {\n          var path = exp.replace(/\\[]/g, '').replace(/\\[(\\d+)]/g, '.$1').split('.');\n          var start = depth || service;\n\n          while(start && path.length > 1) {\n            var key = path.shift();\n            if(!start[key]) {\n              if(/^\\d?$/.test(path[0])) {\n                start[key] = [];\n              }\n              else {\n                start[key] = {};\n              }\n            }\n            start = start[key];\n          }\n\n          start[path[0]] = val;\n\n          return val;\n        },\n        \"path\": function() {\n          return {\n            exp: exp,\n            depth: depth,\n            key: match[2]\n          };\n        }\n      };\n\n      //if(key) {\n      //  service.addToDataCache(key, modelValue);\n      //}\n\n      return modelValue;\n    }\n\n    function processSection(section) {\n      var service = this;\n\n      _.each(section.items, service.processField.bind(service));\n    }\n\n    function processComponent(component) {\n      var service = this;\n\n      component.type = 'section';\n      component.htmlClass = 'row';\n\n      var cols = 12 / _.reject(component.items, 'hidden').length;\n\n      _.each(component.items, function(field, i) {\n        service.processField(field);\n        component.items[i] = {\n          type: 'section',\n          htmlClass: 'col-sm-' + cols,\n          items: [field]\n        };\n      });\n    }\n\n    function processCurrency(field) {\n      //console.log('processCurrency:', field);\n      field.currencyFormat = {\n        'currency-dollars': 'dollars',\n        'currency-microcents': 'microcents',\n        'currency': 'cents'\n      }[field.schema.format];\n\n      field.type = 'cn-currency';\n    }\n\n    function processPercentage(field) {\n      field.type = 'cn-percentage';\n    }\n\n    function processReusable(field) {\n      var service = this;\n      field.type = 'cn-reusable';\n      field.view = field.view || 'new';\n      field.items.forEach(service.processField.bind(service));\n      field.items = [{\n        type: 'section',\n        items: field.items,\n        condition: '!model.' + service.getKey(field.key) + '.id'\n      }];\n    }\n\n    function processMediaUpload(field) {\n      var service = this;\n      field.type = 'cn-mediaupload';\n      _.each(field.data, function(dataProp, key) {\n        field.data[key] = service.parseExpression(dataProp).get();\n      });\n    }\n\n    function processCsvUpload(field) {\n      var service = this;\n      field.type = 'cn-csvupload';\n      // _.each(field.data, function(dataProp, key) {\n      //   field.data[key] = service.parseExpression(dataProp).get();\n      // });\n    }\n\n    function processRadiobuttons(radios) {\n      var service = this;\n      radios.type = 'cn-radiobuttons';\n      if(radios.fullWidth) {\n        radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n      }\n    }\n\n    function processDate(date) {\n      date.type = 'cn-datetimepicker';\n    }\n\n    function processSelect(select) {\n      var service = this,\n          schema = select.schema;\n\n      if(select.titleMapResolve || select.titleMap) {\n        select.getTitleMap = function() {\n          return select.titleMap || service.schema.data[select.titleMapResolve];\n        };\n\n        select.onInit = function(val, form, event, setter) {\n          var modelValue = service.parseExpression(form.key, service.model);\n          // make sure we have correct value\n          // console.log('init:', form.key, val, event);\n          val = modelValue.get();\n          if(event === 'tag-init') {\n            var newVal;\n            if(form.schema.type === 'array') {\n              if(form.schema.items.type !== 'object') {\n                newVal = [];\n                _.each(val, function(val) {\n                  var match = {};\n                  match[select.valueProperty || 'value'] = val;\n                  newVal.push(_.find(select.getTitleMap(), match));\n                });\n              }\n            }\n            else {\n              var match = {};\n              match[select.valueProperty || 'value'] = val;\n              newVal = _.find(select.getTitleMap(), match);\n            }\n            //console.log('newVal:', newVal);\n            if(newVal) setter(newVal);\n          }\n        };\n      }\n\n      if(select.titleMapQuery) {\n        var key = select.titleMapQuery.params.q;\n        select.titleQuery = function(q) {\n          console.log('titleMap:', q);\n          var params = {};\n          if(key) {\n            params[key] = q;\n          }\n          return Api.get({\n            url: select.titleMapQuery.url,\n            params: params\n          });\n        };\n\n        // wrap in string so returns truthy when compiled, but converted to number within directive\n        if(!key) select.minLookup = '0';\n\n        select.onInit = function(val, form, event, setter) {\n          //console.log('titleQuery:onInit:', val, form, event, setter);\n          if(event === 'tag-init') {\n            setter(val);\n          }\n        };\n      }\n\n      if(schema.items) {\n        var defaults = [];\n        _.each(schema.items.properties, function(schema, key) {\n          if(angular.isDefined(schema.default)) {\n            defaults.push({\n              \"key\": key,\n              default: schema.default\n            });\n          }\n        });\n        if(defaults.length) {\n          select.onAdd = function(val, form, event) {\n            if(val.value && event === 'tag-added') {\n              _.each(defaults, function(prop) {\n                //console.log('prop:', prop, val);\n                if(!val.value[prop.key]) val.value[prop.key] = prop.default;\n              });\n            }\n          };\n        }\n      }\n\n      if(!select.type.includes('cn-autocomplete')) {\n        if(select.items) {\n          select.detailedList = true;\n\n          if(select.items[0].type !== 'component') {\n            if(select.items.length > 1) {\n              select.items = [{\n                type: \"component\",\n                items: select.items\n              }];\n            }\n\n            service.processFieldset(select);\n          }\n\n          select.type = 'cn-autocomplete-detailed';\n        }\n        else {\n          if(!select.selectionStyle) {\n            if(select.key === 'tags') {\n              select.selectionStyle = 'tags';\n            }\n            else if(select.getSchemaType() === 'array' && select.schema.maxItems !== 1) {\n              select.selectionStyle = 'list';\n            }\n            else {\n              select.selectionStyle = 'select';\n            }\n          }\n          select.type = 'cn-autocomplete';\n        }\n      }\n\n      if(select.displayFormat) {\n        select.itemFormatter = service.processTemplate(select.displayFormat);\n      }\n\n      service.registerHandler(select.key, function(val) {\n        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n        if(form && form.$setDirty) form.$setDirty();\n      }, select.updateSchema);\n    }\n\n    function processToggle(toggle) {\n      toggle.type = 'cn-toggle';\n    }\n\n    function processHelp(help) {\n      help.htmlClass = 'help-block';\n    }\n\n    function processDisplay(display) {\n      var service = this;\n      display.type = 'cn-display';\n      display.getDisplay = service.processTemplate(display.displayFormat, true);\n    }\n\n    function processTemplate(tpl, parseScope) {\n      var service = this;\n      //console.log('tpl:', tpl);\n      //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n      var processor = $interpolate;\n      return function(scope, arrayIndex) {\n        //console.log('tpl, scope, processor:', tpl, scope, processor);\n        //console.log('processor(tpl)(scope):', processor(tpl)(scope));\n        if(parseScope) {\n          if(angular.isDefined(arrayIndex)) {\n            scope = _.map(scope, function(key) {\n              return key === 'arrayIndex' ? arrayIndex : key;\n            });\n          }\n          scope = service.parseExpression(scope, service.model).get();\n        }\n        return processor(tpl)(scope);\n      };\n    }\n\n    function processSelectDisplay(selectDisplay, schema) {\n      var service = this,\n          selectField = _.find(selectDisplay.items, 'selectField'),\n          handler;\n\n      if (schema && schema.type === 'array') {\n        handler = setupArraySelectDisplay(selectDisplay, selectField, service);\n      } else {\n        handler = setupSelectDisplay(selectDisplay, selectField, service);\n      }\n\n      selectDisplay.selectDisplay = false;\n      service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n      service.processField(selectDisplay);\n    }\n\n    function setupArraySelectDisplay(selectDisplay, selectField, service) {\n      _.each(selectDisplay.items, function(item) {\n        if(item.condition !== 'false') {\n          item.condition = 'true';\n        }\n      });\n      var handler = function() {\n        var index = getArrayIndex(arguments[2]);\n        _.each(selectDisplay.items, function(item) {\n          var selectKey = service.getKey(selectField.key);\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var indexedSelectKey = service.setArrayIndex(selectKey, index);\n          var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n          var formCopies = service.getArrayCopies(key);\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            _.each(formCopies, function(copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'true';\n              }\n            });\n          } else {\n            _.each(formCopies, function(copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'false';\n                service.parseExpression(service.getKey(copy.key), service.model).set();\n              }\n            });\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n      _.each(selectDisplay.items, function(item) {\n        var key = service.getKey(item.key);\n        var selectKey = service.getKey(selectField.key);\n        if (key === selectKey) return;\n        _.each(model, function(elem, i) {\n          var indexedKey = service.setArrayIndex(key, i);\n          var splitIndexedKey = ObjectPath.parse(indexedKey);\n          var indexedSelectKey = service.setArrayIndex(selectKey, i);\n          var selectModel = service.parseExpression(indexedSelectKey, service.model);\n          var selectValue = selectModel.get();\n          var itemValue = service.parseExpression(indexedKey, service.model).get();\n          if (itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n            if (!selectValue) {\n              selectValue = [];\n            }\n            selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n            selectModel.set(selectValue);\n          }\n        });\n      });\n      // handle new objects with values set in defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function(elem, i) {\n        var selectKey = service.getKey(selectField.key);\n        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n        var selectValue = selectModel.get();\n        _.each(elem, function(val, key) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(key);\n          selectModel.set(selectValue);\n        });\n      });\n      // run handler once all arrayCopies have been instantiated\n      var count = 0;\n      var keyMap = _.pluck(_.reject(selectDisplay.items, {\"condition\":\"false\"}), 'key');\n      var once = $rootScope.$on('flexFormArrayCopyAdded', function(event, key) {\n        var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n        if (model) {\n          var total = model.length * (keyMap.length);\n          if (_.includes(keyMap, key)) {\n            count++;\n          }\n          if (count === total) {\n            for (var i = 0; i < model.length; i++) {\n              handler(null, null, '[' + i + ']');\n            }\n            count = 0;\n          }\n        }\n      });\n      var resetCount = $rootScope.$on('flexForm.updatePage', function() {\n        count = 0;\n      });\n      service.events.push(once);\n      service.events.push(resetCount);\n      return handler;\n    }\n\n    function setupSelectDisplay(selectDisplay, selectField, service) {\n      var handler = function() {\n        var selectKey = service.getKey(selectField.key);\n        _.each(selectDisplay.items, function(item) {\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var selectValue = service.parseExpression(selectKey, service.model).get();\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            item.condition = 'true';\n          } else {\n            item.condition = 'false';\n            service.parseExpression(key, service.model).set();\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var selectKey = service.getKey(selectField.key);\n      var selectModel = service.parseExpression(selectKey, service.model);\n      var selectValue = selectModel.get();\n      _.each(selectDisplay.items, function(item) {\n        var key = service.getKey(item.key);\n        if (selectKey === key) return;\n        var splitKey = ObjectPath.parse(key);\n        var itemValue = service.parseExpression(key, service.model).get();\n        if (itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(splitKey[splitKey.length - 1]);\n          selectModel.set(selectValue);\n        }\n      });\n      // handle new objects with values set in the defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function(val, key) {\n        if (!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(key);\n        selectModel.set(selectValue);\n      });\n      // set default values here\n      var model = service.parseExpression(selectDisplay.key, service.model);\n      if (defaults && !model.get()) {\n        model.set(defaults);\n      }\n\n      return handler;\n    }\n\n    function setupSchemaRefresh(refresh) {\n      var service = this;\n      service.refreshSchema = _.debounce(function(updateSchema) {\n        var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n        console.log('service.schema.params, params:', service.schema.params, params);\n        var diff = cnUtil.diff(service.schema.params, params, true);\n        var keys;\n\n        if(diff || updateSchema) {\n          if (updateSchema) params.updateSchema = updateSchema;\n          else {\n            keys = _.keys(diff);\n\n            if(keys.length > 1) {\n              diff = _.omit(diff, _.isNull);\n              keys = _.keys(diff);\n            }\n            //console.log('keys, diff:', keys, diff, {\n            //  cur: _.clone(params),\n            //  prev: _.clone(service.schema.params)\n            //});\n\n            params.updateSchema = _.first(keys);\n          }\n\n          if(!params.updateSchema) {\n            diff = cnUtil.diff(params, _.omit(service.schema.params, 'updateSchema'));\n            keys = _.keys(diff);\n\n            //console.log('keys, diff:', keys, diff);\n            params.updateSchema = _.first(keys);\n          }\n\n          refresh(params).then(function(schema) {\n            ++service.updates;\n            //service.updateSchema(schema);\n            service.processUpdatedSchema(schema);\n          });\n        }\n      }, 100);\n\n      service.refreshData = _.debounce(function() {\n        refresh(_.extend(service.schema.params, {updateSchema: 'refreshData'})).then(function(schema) {\n          service.processUpdatedSchema(schema);\n          console.log('service.schema.params:', service.schema.params);\n        });\n      }, 100);\n\n      service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n    }\n\n    function processUpdatedSchema(schema) {\n      var service = this;\n      if(schema.diff) {\n        service.schema.params = schema.params;\n\n        if(schema.diff.data) {\n          _.each(schema.diff.data, (data, prop) => {\n            if(data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n              data.data = service.schema.data[prop].data.concat(data.data);\n            }\n            service.schema.data[prop] = data;\n            if(service.resolveRegister[prop]) {\n              _.each(service.resolveRegister[prop], (registers) => {\n                registers.forEach(register => {\n                  service.handleResolve(register.field, register.prop, `schema.data.${prop}`);\n                });\n              });\n            }\n          });\n        }\n\n        var keys = [];\n\n        if(schema.diff.schema) {\n          _.each(schema.diff.schema, function(schema, key) {\n            service.schema.schema.properties[key] = schema;\n            reprocessSchema(schema, key, keys);\n          });\n        }\n\n        if(schema.diff.form) {\n          _.each(schema.diff.form, function(form) {\n\n            if(keys.indexOf(form.key) === -1) {\n              keys.push(form.key);\n            }\n\n            // don't want to override key when extending cached objects\n            //var key = form.key;\n            //delete form.key;\n\n            var cached = service.getFromFormCache(form.key);\n            if(cached) {\n              service.reprocessField(cached, form);\n            }\n            var copies = service.getArrayCopies(form.key);\n            if(copies) {\n              _.each(copies, function(copy) {\n                service.reprocessField(copy, form);\n              });\n            }\n          });\n        }\n\n        if(keys.length) {\n          _.each(keys, function(key) {\n            var form = service.getFromFormCache(key);\n            if(form) service.processField(form);\n            if(key.includes('[]')) {\n              var copies = service.getArrayCopies(key);\n              _.each(copies, function(copy) {\n                if(copy) service.processField(copy);\n              });\n            }\n          });\n        }\n\n        service.broadcastErrors();\n      }\n      else {\n        service.updateSchema(schema);\n      }\n    }\n\n    function reprocessField(current, update, isChild) {\n      var service = this;\n\n      _.extend(current, _.omit(update, 'items', 'key'));\n\n      current._ogKeys.forEach(key => {\n        if(!update[key]) delete current[key];\n      });\n      current._ogKeys = _.keys(update);\n\n      //console.log('update.key:', update.key);\n      service.deregisterHandlers(update.key);\n\n      if(!isChild && current.redraw) current.redraw();\n    }\n\n    function reprocessSchema(schema, key, keys) {\n      keys.push(key);\n      if(schema.properties) {\n        _.each(schema.properties, function(schema, subKey) {\n          reprocessSchema(schema, key + '.' + subKey, keys);\n        });\n      }\n      if(schema.items && schema.items.properties) {\n        _.each(schema.properties, function(schema, subKey) {\n          reprocessSchema(schema, key + '[].' + subKey, keys);\n        });\n      }\n    }\n\n    function buildError(field) {\n      var service = this;\n      var key = service.getKey(field.key);\n      return {\n        key: key,\n        message: field.error\n      };\n    }\n\n    function broadcastErrors() {\n      var service = this;\n      $timeout(function() {\n        service.errors.forEach(function(error) {\n          $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n        });\n      }, 1);\n    }\n\n    function replaceArrayIndex(resolve, key) {\n      var arrayIndexKey = /([^.]*)\\[arrayIndex\\]/.exec(resolve);\n      var re = new RegExp(arrayIndexKey[1] + '\\\\[(\\\\d+)\\\\]');\n      var index = re.exec(key);\n      return resolve.replace(arrayIndexKey[0], index[0]);\n    }\n\n    function getArrayIndex(key) {\n      if (_.isObject(key)) {\n        return _.find(key.key, function(key) {\n          return _.isNumber(key);\n        });\n      } else {\n        return /\\[(\\d+)\\]/.exec(key)[1];\n      }\n    }\n\n    function setArrayIndex(key, index, asArray) {\n      var service = this;\n      var keyCopy;\n      if (_.isString(key)) {\n        keyCopy = ObjectPath.parse(key);\n      } else {\n        keyCopy = _.clone(key);\n      }\n      var indexOfIndex = keyCopy.indexOf('');\n      keyCopy[indexOfIndex] = index;\n\n      if (asArray) {\n        return keyCopy;\n      } else {\n        return service.getKey(keyCopy);\n      }\n    }\n\n    function cleanup() {\n      var service = this;\n      _.each(service.events, function(listener) {\n        listener();\n      });\n    }\n  }\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.flex-form')\n      .controller('FlexFormSandbox', FlexFormSandbox);\n\n  /* @ngInject */\n  function FlexFormSandbox() {\n    /* jshint validthis: true */\n    var vm = this;\n\n    vm.activate = activate;\n    vm.onSchema = onSchema;\n    vm.model = {};\n    vm.config = {};\n    vm.schemaStr = '';\n\n    activate();\n\n    ////////////////\n\n    function activate() {\n      console.log('FlexFormSandbox');\n    }\n\n    function onSchema() {\n      if(vm.schemaStr) {\n        var schema = angular.fromJson(vm.schemaStr);\n        console.log('schema:', schema);\n        if(!schema.form && schema.forms) {\n          schema.form = schema.forms[0].form;\n        }\n        vm.config.schema = schema.form && schema;\n      }\n    }\n\n  }\n})();","(function() {\n  'use strict';\n\n  angular.module('cn.flex-form')\n      .config(schemaFormConfig)\n      .run(addTemplates);\n\n  schemaFormConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function schemaFormConfig(cnFlexFormServiceProvider) {\n    var extensions = [\n      'cn-fieldset',\n      'cn-toggle',\n      'cn-datetimepicker',\n      'cn-autocomplete',\n      'cn-autocomplete-detailed',\n      'cn-currency',\n      'cn-radiobuttons',\n      'cn-percentage',\n      'cn-display',\n      'cn-mediaupload',\n      'cn-csvupload',\n      'cn-reusable'\n    ];\n\n    _.each(extensions, function(extension) {\n      cnFlexFormServiceProvider.registerField({\n        type: extension,\n        templateUrl: 'app/components/cn-flex-form/forms/' + extension + '.html'\n      });\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-toggle.html',\n        '\\\n        <div class=\"form-group {{form.htmlClass}}\" \\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <div class=\"clearfix\">\\\n            <cn-toggle-switch\\\n              class=\"pull-left\"\\\n              ng-show=\"form.key\"\\\n              enabled=\"$$value$$\"\\\n              on-value=\"form.onValue\"\\\n              off-value=\"form.offValue\">\\\n            </cn-toggle-switch>\\\n            <span ng-show=\"form.onText && form.offText\">\\\n              {{$$value$$ === form.onValue ? form.onText : form.offText}}\\\n            </span>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-datetimepicker.html',\n        '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 for=\"{{form.key.join(\\'.\\')}}\"\\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <cn-datetimepicker\\\n            ng-show=\"form.key\"\\\n            ng-model=\"$$value$$\"\\\n            ng-model-options=\"form.ngModelOptions\"\\\n            is-disabled=\"form.readonly\"\\\n            sf-changed=\"form\"\\\n            schema-validate=\"form\"\\\n            input-id=\"{{form.key.join(\\'.\\')}}\"\\\n            min-date=\"form.minDate\"\\\n            cn-date-required=\"form.required\"\\\n            placeholder=\"{{form.placeholder}}\"\\\n            model-type=\"{{form.schema.type}}\">\\\n          </cn-datetimepicker>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n\n    var sharedAutocompleteTpl = '\\\n          <tags-input\\\n            ng-show=\"form.key\"\\\n            ng-model=\"$$value$$\"\\\n            ng-model-options=\"form.ngModelOptions\"\\\n            ng-disabled=\"form.readonly\"\\\n            sf-changed=\"form\"\\\n            schema-validate=\"form\"\\\n            input-id=\"{{form.key.join(\\'.\\')}}\"\\\n            display-property=\"{{form.displayProperty || \\'name\\'}}\"\\\n            value-property=\"{{form.valueProperty || \\'value\\'}}\"\\\n            placeholder=\"{{form.placeholder || \\' \\'}}\"\\\n            add-on-blur=\"true\"\\\n            add-on-comma=\"false\"\\\n            add-from-autocomplete-only=\"{{!form.allowNew}}\"\\\n            on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\\\n            on-init=\"form.onInit($tag, form, $event, $setter)\"\\\n            model-type=\"{{form.getSchemaType()}}\"\\\n            array-value-type=\"{{form.schema.items.type}}\"\\\n            hide-tags=\"{{form.detailedList}}\"\\\n            tags-style=\"{{form.selectionStyle}}\"\\\n            required=\"{{form.required}}\"\\\n            min-length=\"{{form.minLength}}\"\\\n            allowed-tags-pattern=\".*\"\\\n            dropdown=\"true\"\\\n            item-formatter=\"form.itemFormatter\"\\\n            min-tags=\"{{form.schema.minItems}}\"\\\n            max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== \\'array\\' ? 1 : 0}}\"\\\n            allow-bulk=\"{{form.bulkAdd}}\"\\\n            bulk-delimiter=\"{{form.bulkDelimiter}}\"\\\n            bulk-placeholder=\"{{form.bulkPlaceholder}}\"\\\n            show-button=\"true\">\\\n            <auto-complete\\\n              source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\\\n              skip-filtering=\"{{form.titleQuery ? true : false}}\"\\\n              min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\\\n            </auto-complete>\\\n          </tags-input>\\\n          ';\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-autocomplete.html',\n        '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 for=\"{{form.key.join(\\'.\\')}}-input\"\\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\\n          ' + sharedAutocompleteTpl + '\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-autocomplete-detailed.html',\n        '\\\n        <div sf-array=\"form\"\\\n             class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 for=\"{{form.key.join(\\'.\\')}}-input\"\\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <ol class=\"list-group cn-autocomplete-list\"\\\n              ng-show=\"modelArray.length\"\\\n              ng-model=\"modelArray\">\\\n            <li class=\"list-group-item {{form.fieldHtmlClass}}\"\\\n                ng-repeat=\"item in modelArray track by $index\">\\\n              <button ng-hide=\"form.readonly || form.remove === null\"\\\n                      ng-click=\"deleteFromArray($index)\"\\\n                      type=\"button\" class=\"close pull-right\">\\\n                <span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span>\\\n              </button>\\\n              <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"></sf-decorator>\\\n            </li>\\\n          </ol>\\\n          ' + sharedAutocompleteTpl + '\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-currency.html',\n        '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\\n          <div class=\"{{form.fieldClass}} input-group\">\\\n            <label class=\"input-group-addon\"\\\n                   ng-disabled=\"form.readonly\"\\\n                   for=\"{{form.key.join(\\'.\\')}}\">$</label>\\\n            <input class=\"form-control\"\\\n                   cn-currency-format=\"{{form.currencyFormat}}\"\\\n                   ng-show=\"form.key\"\\\n                   ng-model-options=\"form.ngModelOptions\"\\\n                   ng-disabled=\"form.readonly\"\\\n                   sf-changed=\"form\"\\\n                   schema-validate=\"form\"\\\n                   ff-validate=\"form\"\\\n                   type=\"text\"\\\n                   step=\"any\"\\\n                   min=\"{{form.min}}\"\\\n                   max=\"{{form.max}}\"\\\n                   id=\"{{form.key.join(\\'.\\')}}\"\\\n                   name=\"{{form.key.join(\\'.\\')}}\"\\\n                   ng-model=\"$$value$$\">\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-radiobuttons.html',\n        '\\\n        <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\\n          <div class=\"btn-group clearfix\">\\\n            <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? \\'active\\' : \\'\\'}}\"\\\n                   ng-repeat=\"item in form.titleMap\">\\\n              <input type=\"radio\"\\\n                     class=\"{{form.fieldHtmlClass}} hide\"\\\n                     sf-changed=\"form\"\\\n                     ng-disabled=\"form.readonly\"\\\n                     ng-model=\"$$value$$\"\\\n                     ng-model-options=\"form.ngModelOptions\"\\\n                     schema-validate=\"form\"\\\n                     ff-validate=\"form\"\\\n                     ng-value=\"item.value\"\\\n                     name=\"{{form.key.join(\\'.\\')}}\">\\\n              <i class=\"fa fa-{{item.value}} fa-lg\"></i>\\\n              <span ng-bind-html=\"item.name\"></span>\\\n            </label>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-percentage.html',\n        '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\\n          <div class=\"{{form.fieldClass}} input-group\">\\\n            <input class=\"form-control\"\\\n                   cn-percentage-format\\\n                   ng-show=\"form.key\"\\\n                   ng-model-options=\"form.ngModelOptions\"\\\n                   ng-disabled=\"form.readonly\"\\\n                   sf-changed=\"form\"\\\n                   schema-validate=\"form\"\\\n                   type=\"number\"\\\n                   step=\"any\"\\\n                   min=\"{{form.min}}\"\\\n                   max=\"{{form.max}}\"\\\n                   id=\"{{form.key && form.key[0]}}\"\\\n                   name=\"{{form.key && form.key[0]}}\"\\\n                   ng-model=\"$$value$$\">\\\n             <div class=\"input-group-addon\"\\\n                    ng-disabled=\"form.readonly\"\\\n                    for=\"{{form.key && form.key[0]}}\">%</div>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-display.html',\n        '\\\n        <div class=\"form-group cn-display{{form.htmlClass}}\">\\\n          <input ng-show=\"form.key\"\\\n                 class=\"form-control\"\\\n                 id=\"{{form.key.join(\\'.\\')}}\"\\\n                 name=\"{{form.key.join(\\'.\\')}}\"\\\n                 ng-disabled=\"true\"\\\n                 value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\\\n        </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-fieldset.html',\n        '\\\n        <fieldset ng-disabled=\"form.readonly\" class=\"schema-form-fieldset {{form.htmlClass}}\">\\\n          <legend ng-click=\"form.toggleCollapse()\"\\\n                  ng-class=\"{\\'sr-only\\': !showTitle(), collapsible: form.collapsible}\"\\\n                  ng-mouseenter=\"form.render = true\">\\\n            <i ng-show=\"form.collapsible\"\\\n               class=\"fa fa-caret-{{form.collapsed ? \\'right\\' : \\'down\\'}}\"></i>\\\n            {{ form.title }}\\\n          </legend>\\\n          <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\\\n          <div collapse=\"form.collapsed\">\\\n            <div ng-if=\"form.render\">\\\n              <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"></sf-decorator>\\\n            </div>\\\n          </div>\\\n        </fieldset>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-mediaupload.html',\n        '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\\n          <media-upload ng-model=\"$$value$$\"\\\n                        cn-file-type=\"form.fileType\"\\\n                        cn-upload-path=\"form.uploadPath\"\\\n                        cn-data=\"form.data\"\\\n                        cn-preview-path=\"form.previewPath\"\\\n                        cn-model-value-key=\"form.modelValueKey\"\\\n                        ng-model-options=\"form.ngModelOptions\"\\\n                        sf-changed=\"form\"\\\n                        schema-validate=\"form\"\\\n                        ff-form=\"form\"\\\n                        class=\"clearfix\">\\\n          </media-upload>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n       </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-csvupload.html',\n        '\\\n        <div class=\"form-group {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\\n          <csv-upload ng-model=\"$$value$$\"\\\n                        cn-upload-path=\"form.uploadPath\"\\\n                        ng-model-options=\"form.ngModelOptions\"\\\n                        sf-changed=\"form\"\\\n                        schema-validate=\"form\"\\\n                        ff-form=\"form\"\\\n                        class=\"clearfix\">\\\n          </csv-upload>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n       </div>\\\n        '\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-reusable.html',\n        '\\\n        <div class=\"form-group cn-reusable {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <label class=\"control-label\"\\\n                 ng-show=\"showTitle()\"\\\n                 for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\\n          <cn-select-or\\\n            ng-show=\"form.key\"\\\n            select-from=\"form.library\"\\\n            ng-model=\"$$value$$\"\\\n            ng-model-options=\"form.ngModelOptions\"\\\n            sf-changed=\"form\"\\\n            schema-validate=\"form\"\\\n            ff-form=\"form\"\\\n            directiveId=\"form.directiveId\"\\\n            item-template=\"form.itemTemplate\"\\\n            toggle-text=\"form.toggleText\"\\\n            disabled=\"form.readonly\"\\\n            view=\"form.view\">\\\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\\n          </cn-select-or>\\\n          <p ng-if=\"form.loadMore && form.view === \\'list\\'\">\\\n            <a ng-click=\"form.loadMore()\"\\\n               class=\"btn btn-default btn-block\">Load More</a>\\\n          </p>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n  }\n\n})();"],"sourceRoot":"/source/"}