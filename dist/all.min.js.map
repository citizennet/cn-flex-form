{"version":3,"sources":["all.min.js","_cn-flex-form.module.js","cn-flex-form-config.service.js","cn-flex-form-header.directive.js","cn-flex-form-modal-loader.js","cn-flex-form-modal-loader.service.js","cn-flex-form-types.service.js","cn-flex-form-validate.directive.js","cn-flex-form.directive.js","cn-flex-form.routes.js","cn-flex-form.service.js","sandbox.js","schema-form-extensions.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","angular","module","cnFlexFormConfigProvider","addIgnoreParam","param","ignoreParams","push","cnFlexFormConfig","$stateParams","getStateParams","_","chain","omit","v","isUndefined","isNull","$inject","$get","provider","cnFlexFormHeader","restrict","scope","config","submit","loadOffscreen","controller","FlexFormHeader","bindToController","controllerAs","template","$scope","updateData","console","log","$emit","isDisabled","btnConfig","vm","this","directive","FlexFormModalLoader","FlexFormModal","$state","$rootScope","activate","open","then","_ref","modal","onDismiss","options","result","goBack","restParams","dismissEvent","$on","dismissModal","transition","go","dismiss","cnFlexFormModalLoaderService","$uibModal","getMapping","_ref2","state","factory","getPromises","promiseMap","promise","getPromise","id","$q","promises","defer","cnFlexFormModalLoaderServiceProvider","addMapping","def","resolve","parent","modalMap","modalId","resolveMapping","arguments","length","undefined","destroyStrategy","d","cnFlexFormTypesProvider","registerFieldType","fieldType","fieldTypeRegister","unshift","cnFlexFormTypes","getFieldType","field","i","l","condition","type","schema","includes","titleMap","titleMapResolve","titleMapQuery","format","ffValidate","form","require","link","elem","attrs","ngModel","required","$watch","$viewValue","$setValidity","cnFlexForm","model","formIndex","formName","delayForm","cleanupEvent","FlexForm","cnFlexFormService","$location","isNumber","forms","search","debug","process","cur","prev","service","isCompiled","compile","formCtrl","getSchema","updateSchema","showForm","cleanup","each","events","listener","_extends","assign","target","source","prototype","hasOwnProperty","call","cnFlexFormRoutesProvider","$stateProvider","addStates","permissions","name","shared","url","cnFlexFormRoutes","templateUrl","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","Array","isArray","TypeError","cnFlexFormServiceProvider","schemaFormDecoratorsProvider","registerField","handler","fieldTypeHandlers","createDirective","CNFlexFormService","Api","$parse","sfPath","$interpolate","$timeout","cnUtil","CNFlexFormConstructor","services","CNFlexForm","window","arrayCopies","arrayListeners","dataCache","defaults","errors","formCache","listeners","resolveRegister","updates","params","setupConfig","processField","bind","initModelWatch","initArrayCopyWatch","broadcastErrors","setValue","compiled","getSchemaForm","setupSchemaRefresh","processSchema","getSchemaType","first","processDefault","getKey","parseExpression","modelValue","get","isTrulyEmpty","equals","set","copy","validationMessage","processFieldset","fieldset","items","forEach","collapsible","toggleCollapse","collapsed","render","selectDisplay","processSelectDisplay","_ogKeys","without","keys","addToFormCache","description","readonly","showClearAll","processResolve","watch","processFieldWatch","processSection","processComponent","isString","isFunction","conditionals","processConditional","registerHandler","find","reject","$broadcast","error","buildError","isEmpty","ngModelOptions","allowInvalid","reduce","total","test","depth","parse","properties","shift","dataProp","fieldProp","handleResolve","resolveType","match","registerResolve","exp","data","indexOf","replace","cursor","loadMore","refreshSchema","fieldKey","register","prop","val","parseCondition","map","path","resolution","adjustment","date","trim","math","operator","+","-","*","/","adjuster","trigger","curCondition","replaceArrayIndex","updatePath","fromPath","update","from","moment","add","toDate","p","floor","ceil","round","initialize","startsWith","_condition$match","_condition$match2","fn","list","predicateParams","predicateBody","generatePredicate","body","_len","args","_key","split","acc","runHandler","isObject","arrMatch","registerArrayHandlers","defaultValue","handlers","arrKey","onArray","reorder","lastKey","deregisterHandlers","arrVal","deregisterArrayHandlers","item","watching","modelWatch","onModelWatch","initSchemaParams","firstUpdate","cleanModel","prevParams","isInitArray","event","index","parseInt","addArrayCopy","copies","getArrayCopiesFor","splice","getArrayCopies","pluck","getArrayScopes","keyStart","filter","getFromFormCache","addToDataCache","getFromDataCache","eval","start","getAssignable","progress","fullPath","concat","slice","assignable","processArray","array","sortOptions","e","ui","section","component","htmlClass","cols","processCurrency","currencyFormat","currency-dollars","currency-microcents","currency","processPercentage","processReusable","view","processMediaUpload","processCsvUpload","processRadios","processRadiobuttons","radios","fullWidth","btnClass","divide","processDate","maxView","iconClass","modelFormatter","m","multiply","hours","minutes","modelParser","startOf","viewFormatter","dateFormat","viewParser","getSelectValProp","select","valueProperty","getAllowedSelectValue","getTitleMap","valProp","mapVal","x","processSelect","onInit","setter","newVal","q","titleQuery","minLookup","isDefined","default","onAdd","detailedList","selectionStyle","maxItems","valid","displayFormat","itemFormatter","processTemplate","$setDirty","processToggle","toggle","processHelp","help","processDisplay","display","getDisplay","tpl","parseScope","processor","arrayIndex","processTable","table","row","columns","extend","selectField","setupArraySelectDisplay","setupSelectDisplay","getArrayIndex","selectKey","splitKey","ObjectPath","indexedSelectKey","setArrayIndex","selectValue","formCopies","indexedKey","splitIndexedKey","selectModel","itemValue","count","keyMap","once","resetCount","refresh","debounce","diff","processUpdatedSchema","refreshData","reset","registers","reprocessSchema","cached","reprocessField","current","isChild","redraw","subKey","message","arrayIndexKey","exec","re","RegExp","asArray","keyCopy","clone","indexOfIndex","cn-radios","cn-radiobuttons","cn-autocomplete","cn-datetimepicker","cn-display","cn-currency","cn-percentage","cn-mediaupload","cn-csvupload","cn-reusable","cn-toggle","cn-table","FlexFormSandbox","onSchema","schemaStr","fromJson","schemaFormConfig","tv4","addFormat","extensions","extension","addTemplates","$templateCache","put","sharedAutocompleteTpl","run"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form', ['ui.router', 'schemaForm', 'ui.bootstrap.datetimepicker', 'cnTagsInput', 'cn.util']);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\n  function cnFlexFormConfigProvider() {\n\n    cnFlexFormConfig.$inject = ['$stateParams'];\n\n    var ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\n    return {\n      addIgnoreParam: addIgnoreParam,\n      $get: cnFlexFormConfig\n    };\n\n    ////////\n\n    function addIgnoreParam(param) {\n      ignoreParams.push(param);\n    }\n\n    function cnFlexFormConfig($stateParams) {\n      return {\n        getStateParams: getStateParams,\n        ignoreParams: ignoreParams\n      };\n\n      ////////\n\n      function getStateParams() {\n        return _.chain($stateParams).omit(ignoreParams).omit(function (v) {\n          return _.isUndefined(v) || _.isNull(v);\n        }).value();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').directive('cnFlexFormHeader', cnFlexFormHeader);\n\n  function cnFlexFormHeader() {\n    return {\n      restrict: 'E',\n      scope: {\n        config: '=ffHeaderConfig',\n        submit: '&ffSubmit',\n        loadOffscreen: '&ffLoadOffscreen'\n      },\n      controller: FlexFormHeader,\n      bindToController: true,\n      controllerAs: 'vm',\n      template: '\\n          <div class=\"col-md-6\">\\n            <h5 ng-if=\"vm.config.title.lead\">{{::vm.config.title.lead}}</h5>\\n            <h1>\\n              <i ng-show=\"vm.config.title.icon\" class=\"{{vm.config.title.icon}}\"/>\\n              {{vm.config.title.main}}\\n            </h1>\\n            <h5 ng-if=\"vm.config.title.sub\">{{::vm.config.title.sub}}</h5>\\n          </div>\\n          <div class=\"{{vm.config.buttonContainerClass || \\'page-action-btns\\'}}\">\\n            <div class=\"btn-options\"\\n                 ng-mouseover=\"vm.loadOffscreen()\">\\n              <a class=\"btn btn-default-dark\"\\n                 ng-if=\"vm.config.actionConfig.returnState\"\\n                 ui-sref=\"{{vm.config.actionConfig.returnState}}\">\\n                {{vm.config.actionConfig.returnText || \\'Cancel\\'}}\\n              </a>\\n              <a class=\"btn {{vm.config.actionConfig.closeButton.style ? \\'btn-\\'+vm.config.actionConfig.closeButton.style : \\'btn-default-dark\\'}}\"\\n                 ng-if=\"vm.config.actionConfig.closeButton\"\\n                 ng-click=\"vm.config.actionConfig.closeButton.handler()\">\\n                 Cancel\\n              </a>\\n              <span ng-repeat=\"button in vm.config.actionConfig.actions\">\\n                <span ng-class=\"{\\'btn-group\\': button.options}\">\\n                  <a class=\"btn {{button.style ? \\'btn-\\'+button.style : ($index === vm.config.actionConfig.actions.length - 1 ? \\'btn-primary\\' : \\'btn-default-dark\\')}}\"\\n                     ng-disabled=\"vm.isDisabled(button)\"\\n                     ng-click=\"vm.submit({handler: button.handler})\"\\n                     uib-tooltip=\"{{button.helptext}}\"\\n                     uib-tooltip-placement=\"bottom\"\\n                     ng-bind-html=\"button.text || \\'Save\\'\">\\n                  </a>\\n                  <a class=\"btn {{button.style ? \\'btn-\\'+button.style : ($index === vm.config.actionConfig.actions.length - 1 ? \\'btn-primary\\' : \\'btn-default-dark\\')}} dropdown-toggle\"\\n                          ng-disabled=\"vm.isDisabled(button)\"\\n                          ng-show=\"button.options\"\\n                          data-toggle=\"dropdown\">\\n                    <span class=\"caret\"></span>\\n                  </a>\\n                  <ul class=\"dropdown-menu\" ng-if=\"button.options\">\\n                    <li ng-repeat=\"option in button.options\"\\n                        ng-disabled=\"vm.isDisabled(option)\">\\n                      <a ng-click=\"vm.submit({handler: option.handler})\"\\n                         ng-bind-html=\"option.text\">\\n                      </a>\\n                    </li>\\n                  </ul>\\n                </span>\\n              </span>\\n            </div>\\n            <p class=\"data-updated-at text-right\"\\n               id=\"data-updated-at\"\\n               ng-hide=\"vm.config.noData\">\\n              <a ng-click=\"vm.updateData()\">Update Data</a>\\n            </p>\\n          </div>'\n    };\n  }\n\n  FlexFormHeader.$inject = ['$scope'];\n  function FlexFormHeader($scope) {\n    var vm = this;\n\n    vm.updateData = updateData;\n    vm.isDisabled = isDisabled;\n\n    ///////////\n\n    function updateData() {\n      console.log('updateData:', updateData);\n      $scope.$emit('ffRefreshData');\n    }\n\n    function isDisabled(btnConfig) {\n      if (vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n      return false;\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').controller('FlexFormModalLoader', FlexFormModalLoader).factory('FlexFormModal', FlexFormModal);\n\n  FlexFormModalLoader.$inject = ['FlexFormModal', '$state', '$rootScope', '$stateParams'];\n  function FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams) {\n\n    var vm = this;\n\n    activate();\n\n    //////////\n\n    function activate() {\n      FlexFormModal.open(vm).then(function (_ref) {\n        var modal = _ref.modal;\n        var onDismiss = _ref.options.onDismiss;\n\n        vm.modal = modal;\n        vm.modal.result.finally(goBack);\n        if (onDismiss) vm.modal.result.catch(function () {\n          return onDismiss($stateParams.restParams);\n        });\n        vm.dismissEvent = $rootScope.$on('$stateChangeStart', dismissModal);\n      });\n    }\n\n    function goBack() {\n      if (!$state.transition) {\n        $state.go('^');\n      }\n    }\n\n    function dismissModal() {\n      console.log('dismissModal');\n      vm.dismissEvent();\n      vm.modal.dismiss();\n    }\n  }\n\n  FlexFormModal.$inject = ['cnFlexFormModalLoaderService', '$uibModal', '$stateParams'];\n  function FlexFormModal(cnFlexFormModalLoaderService, $uibModal, $stateParams) {\n\n    return { open: open };\n\n    ////////////\n\n    function open() {\n      return cnFlexFormModalLoaderService.getMapping($stateParams.modal).then(function (_ref2) {\n        var state = _ref2.state;\n        var options = _ref2.options;\n        return {\n          modal: $uibModal.open(state),\n          options: options\n        };\n      });\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider);\n\n  var modalMap = {};\n  var promiseMap = {};\n\n  function getPromises(state) {\n    if (promiseMap[state]) return promiseMap[state];\n\n    var promise = {};\n    promiseMap[state] = promise;\n    return promise;\n  }\n\n  function getPromise(state, id, $q) {\n    var promises = getPromises(state);\n    if (promises[id]) return promises[id];\n\n    var promise = $q.defer();\n    promises[id] = promise;\n    return promise;\n  }\n\n  function cnFlexFormModalLoaderServiceProvider() {\n    parent.$inject = ['$stateParams', '$q'];\n\n    return {\n      addMapping: addMapping,\n      $get: cnFlexFormModalLoaderService\n    };\n\n    ////////////\n\n    function addMapping(state, def) {\n      def.resolve = { parent: parent };\n      modalMap[state] = def;\n    }\n\n    function parent($stateParams, $q) {\n      return getPromise($stateParams.modal, $stateParams.modalId, $q).promise.then(function (_ref) {\n        var parent = _ref.parent;\n        return parent;\n      });\n    }\n  }\n\n  cnFlexFormModalLoaderService.$inject = ['$stateParams', '$q'];\n\n  function cnFlexFormModalLoaderService($stateParams, $q) {\n\n    return {\n      getMapping: getMapping,\n      resolveMapping: resolveMapping\n    };\n\n    /////////////\n\n    function resolveMapping(state, id, parent) {\n      var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n      var scope = options.scope;\n\n      if (scope) {\n        scope.options = scope.options || {};\n        scope.options.destroyStrategy = 'retain';\n        modalMap[state].scope = scope;\n      }\n      var d = getPromise(state, id, $q);\n      d.resolve({ parent: parent, options: options });\n      return d.promise;\n    }\n\n    function getMapping(state) {\n      var d = $q.defer();\n      getPromise($stateParams.modal, $stateParams.modalId, $q).promise.then(function (_ref2) {\n        var parent = _ref2.parent;\n        var options = _ref2.options;\n\n        d.resolve({ state: modalMap[state], options: options });\n        return parent;\n      });\n      return d.promise;\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\n  function cnFlexFormTypesProvider() {\n\n    var fieldTypeRegister = [{\n      condition: function condition(field) {\n        return field.type === 'hidden';\n      },\n      type: 'hidden'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('radios');\n      },\n      type: 'cn-radios'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('radiobuttons');\n      },\n      type: 'cn-radiobuttons'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery;\n      },\n      type: 'cn-autocomplete'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'cn-datetimepicker' || field.type === 'datetime-local' || field.type === 'time-minutes';\n      },\n      type: 'cn-datetimepicker'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'help';\n      },\n      type: 'help'\n    }, {\n      condition: function condition(field) {\n        return field.type.includes('display');\n      },\n      type: 'cn-display'\n    }, {\n      condition: function condition(field) {\n        return field.schema && field.schema.format && field.schema.format.includes('currency');\n      },\n      type: 'cn-currency'\n    }, {\n      condition: function condition(field) {\n        return field.schema && field.schema.format === 'percentage';\n      },\n      type: 'cn-percentage'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'toggle' || field.type === 'boolean';\n      },\n      type: 'cn-toggle'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'mediaupload';\n      },\n      type: 'cn-mediaupload'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'csvupload';\n      },\n      type: 'cn-csvupload'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'reusable';\n      },\n      type: 'cn-reusable'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'table';\n      },\n      type: 'cn-table'\n    }, {\n      condition: function condition(field) {\n        return field.type === 'array';\n      },\n      type: 'array'\n    }];\n\n    return {\n      registerFieldType: registerFieldType,\n      $get: cnFlexFormTypes\n    };\n\n    ////////\n\n    function registerFieldType(fieldType) {\n      fieldTypeRegister.unshift(fieldType);\n    }\n\n    function cnFlexFormTypes() {\n      return {\n        fieldTypeRegister: fieldTypeRegister,\n        getFieldType: getFieldType\n      };\n\n      /////////\n\n      function getFieldType(field) {\n        for (var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n          if (fieldTypeRegister[i].condition(field)) {\n            return fieldTypeRegister[i].type;\n          }\n        }\n        return field.type || field.schema && field.schema.type;\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').directive('ffValidate', ffValidate);\n\n  function ffValidate() {\n    return {\n      restrict: 'A',\n      scope: { form: '=ffValidate' },\n      require: 'ngModel',\n      link: link\n    };\n  }\n\n  function link($scope, elem, attrs, ngModel) {\n    //console.log('$scope, ngModel:', $scope.form, ngModel);\n    if ($scope.form && $scope.form.required) {\n      $scope.$watch(function () {\n        return ngModel.$viewValue;\n      }, function (value) {\n        // override schemaForm validation\n        ngModel.$setValidity('schemaForm', true);\n        ngModel.$setValidity('tv4-302', value);\n      });\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').directive('cnFlexForm', cnFlexForm);\n\n  function cnFlexForm() {\n    return {\n      restrict: 'E',\n      template: '\\\n        <div ng-if=\"vm.showForm()\">\\\n          <ng-form name=\"{{vm.formName}}\"\\\n                sf-schema=\"vm.config.schema.schema\"\\\n                sf-form=\"vm.form\"\\\n                sf-model=\"vm.model\"></ng-form>\\\n          <!-- debug panel to display model -->\\\n          <section ng-if=\"vm.debug\"><pre pretty-json=\"vm.model\"></pre></section>\\\n        </div>\\\n      ',\n      scope: {\n        config: '=ffConfig',\n        model: '=ffModel',\n        formIndex: '=ffFormIndex',\n        formName: '=ffFormName',\n        delayForm: '=ffDelayForm',\n        cleanupEvent: '=ffCleanupEvent'\n      },\n      controller: FlexForm,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  FlexForm.$inject = ['cnFlexFormService', '$scope', '$location'];\n  function FlexForm(cnFlexFormService, $scope, $location) {\n    var vm = this;\n    vm.service = undefined;\n    vm.events = [];\n\n    vm.activate = activate;\n    vm.cleanup = cleanup;\n    vm.process = process;\n    vm.showForm = showForm;\n\n    vm.events.push($scope.$watch(function () {\n      return vm.config.schema;\n    }, vm.process));\n\n    vm.activate();\n\n    $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\n    //////////\n\n    function activate() {\n      //console.log('vm.formName:', vm.formName);\n      if (angular.isNumber(vm.formIndex)) {\n        vm.form = vm.config.schema.forms[vm.formIndex].form;\n      } else {\n        vm.form = vm.config.schema.form;\n      }\n\n      // debug\n      if ($location.search().debug) {\n        vm.debug = true;\n      }\n    }\n\n    function process(cur, prev) {\n      //console.log('process:', cur, prev);\n      if (vm.form) {\n        if (!vm.service) {\n          vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n            formCtrl: vm.config.formCtrl,\n            getSchema: vm.config.getSchema,\n            updateSchema: updateSchema\n          });\n        } else {\n          console.log('vm.service.isCompiled():', vm.service.isCompiled());\n          vm.service.compile(vm.config.schema, vm.model);\n        }\n        //$scope.$broadcast('schemaFormRedraw');\n      }\n    }\n\n    function showForm() {\n      //console.log('showForm:', vm.delayForm, vm.formName);\n      return !vm.delayForm && vm.service && vm.service.isCompiled();\n    }\n\n    function updateSchema(schema) {\n      vm.config.schema = schema;\n      vm.activate();\n    }\n\n    function cleanup() {\n      _.each(vm.events, function (listener) {\n        listener();\n      });\n      vm.service.cleanup();\n    }\n  }\n})();\n'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n(function () {\n  angular.module('cn.flex-form').provider('cnFlexFormRoutes', cnFlexFormRoutesProvider).config(cnFlexFormRoutes);\n\n  cnFlexFormRoutesProvider.$inject = ['$stateProvider'];\n  function cnFlexFormRoutesProvider($stateProvider) {\n    var provider = {\n      addStates: addStates,\n      $get: $get\n    };\n\n    return provider;\n\n    ////////////\n\n    function $get() {\n      // nothing to do here, but required\n    }\n\n    function addStates(_ref) {\n      var permissions = _ref.permissions;\n      var name = _ref.name;\n\n      var shared = {\n        controller: 'FlexFormModalLoader',\n        controllerAs: 'vm',\n        permissions: permissions\n      };\n      $stateProvider.state(name + '.page.modal', _extends({\n        url: '/~:modal/:modalId'\n      }, shared)).state(name + '.page.modalParams', _extends({\n        url: '/~:modal/:modalId/:restParams'\n      }, shared));\n    }\n  }\n\n  cnFlexFormRoutes.$inject = ['$stateProvider'];\n  function cnFlexFormRoutes($stateProvider) {\n\n    $stateProvider.state('flex-form-sandbox', {\n      url: '/flex-form/sandbox',\n      controller: 'FlexFormSandbox',\n      controllerAs: 'vm',\n      templateUrl: 'app/components/cn-flex-form/sandbox.html'\n    });\n  }\n})();\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').provider('cnFlexFormService', cnFlexFormServiceProvider);\n\n  var fieldTypeHandlers = {\n    'cn-radios': 'processRadios',\n    'cn-radiobuttons': 'processRadiobuttons',\n    'cn-autocomplete': 'processSelect',\n    'cn-datetimepicker': 'processDate',\n    'help': 'processHelp',\n    'cn-display': 'processDisplay',\n    'cn-currency': 'processCurrency',\n    'cn-percentage': 'processPercentage',\n    'cn-mediaupload': 'processMediaUpload',\n    'cn-csvupload': 'processCsvUpload',\n    'cn-reusable': 'processReusable',\n    'cn-toggle': 'processToggle',\n    'cn-table': 'processTable',\n    'array': 'processArray'\n  };\n\n  cnFlexFormServiceProvider.$inject = ['schemaFormDecoratorsProvider', 'cnFlexFormTypesProvider'];\n\n  function cnFlexFormServiceProvider(schemaFormDecoratorsProvider, cnFlexFormTypesProvider) {\n    return {\n      registerField: registerField,\n      $get: CNFlexFormService\n    };\n\n    //////////\n\n    function registerField(fieldType) {\n      if (fieldType.condition) {\n        cnFlexFormTypesProvider.registerFieldType({\n          condition: fieldType.condition,\n          type: fieldType.type\n        });\n      }\n\n      if (fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n\n      if (fieldType.templateUrl) {\n        schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', fieldType.type, fieldType.templateUrl);\n        schemaFormDecoratorsProvider.createDirective(fieldType.type, fieldType.templateUrl);\n      }\n    }\n  }\n\n  CNFlexFormService.$inject = ['Api', '$parse', 'cnFlexFormConfig', 'cnFlexFormTypes', 'sfPath', '$interpolate', '$rootScope', '$timeout', 'cnUtil', '$stateParams'];\n\n  function CNFlexFormService(Api, $parse, cnFlexFormConfig, cnFlexFormTypes, sfPath, $interpolate, $rootScope, $timeout, cnUtil, $stateParams) {\n\n    var services = [];\n    var prototype = {\n      compile: compile,\n      addArrayCopy: addArrayCopy,\n      addToDataCache: addToDataCache,\n      addToFormCache: addToFormCache,\n      broadcastErrors: broadcastErrors,\n      buildError: buildError,\n      cleanup: cleanup,\n      deregisterHandlers: deregisterHandlers,\n      deregisterArrayHandlers: deregisterArrayHandlers,\n      getArrayCopies: getArrayCopies,\n      getArrayCopiesFor: getArrayCopiesFor,\n      getArrayScopes: getArrayScopes,\n      getFromDataCache: getFromDataCache,\n      getFromFormCache: getFromFormCache,\n      getKey: getKey,\n      getSchema: getSchema,\n      handleResolve: handleResolve,\n      initArrayCopyWatch: initArrayCopyWatch,\n      initModelWatch: initModelWatch,\n      initSchemaParams: initSchemaParams,\n      isCompiled: isCompiled,\n      onModelWatch: onModelWatch,\n      parseCondition: parseCondition,\n      parseExpression: parseExpression,\n      processArray: processArray,\n      processDefault: processDefault,\n      processDisplay: processDisplay,\n      processField: processField,\n      processFieldset: processFieldset,\n      processFieldWatch: processFieldWatch,\n      processComponent: processComponent,\n      processConditional: processConditional,\n      processCurrency: processCurrency,\n      processPercentage: processPercentage,\n      processDate: processDate,\n      processHelp: processHelp,\n      processRadios: processRadios,\n      processRadiobuttons: processRadiobuttons,\n      processReusable: processReusable,\n      processSchema: processSchema,\n      processSelectDisplay: processSelectDisplay,\n      processResolve: processResolve,\n      processSection: processSection,\n      processSelect: processSelect,\n      processTable: processTable,\n      processTemplate: processTemplate,\n      processToggle: processToggle,\n      processUpdatedSchema: processUpdatedSchema,\n      processMediaUpload: processMediaUpload,\n      processCsvUpload: processCsvUpload,\n      registerArrayHandlers: registerArrayHandlers,\n      registerHandler: registerHandler,\n      registerResolve: registerResolve,\n      reprocessField: reprocessField,\n      setArrayIndex: setArrayIndex,\n      setupConfig: setupConfig,\n      setupArraySelectDisplay: setupArraySelectDisplay,\n      setupSelectDisplay: setupSelectDisplay,\n      setupSchemaRefresh: setupSchemaRefresh\n    };\n\n    function CNFlexFormConstructor(schema, model, config) {\n      var service;\n      if (services.length) {\n        for (var i = 0, l = services.length; i < l; i++) {\n          if (services[i].model === model) {\n            service = services[i];\n            service.compile(schema, model, config);\n            break;\n          }\n        }\n      }\n      if (!service) {\n        service = new CNFlexForm(schema, model, config);\n        services.push(service);\n      }\n      return service || new CNFlexForm(schema, model, config);\n    }\n\n    function CNFlexForm(schema, model, config) {\n\n      if ($stateParams.debug) {\n        window.services = services;\n      }\n\n      this.arrayCopies = {};\n      this.arrayListeners = {};\n      this.dataCache = {};\n      this.defaults = {};\n      this.errors = [];\n      this.events = [];\n      this.formCache = {};\n      this.listeners = {};\n      this.resolveRegister = {};\n      this.model = model;\n      this.updates = 0;\n\n      this.params = cnFlexFormConfig.getStateParams();\n\n      this._ = _;\n\n      this.compile(schema, model, config);\n    }\n\n    _.extend(CNFlexForm.prototype, prototype);\n    _.extend(CNFlexFormConstructor, prototype);\n\n    return CNFlexFormConstructor;\n\n    //////////////\n\n    function compile(schema, model, config) {\n      var service = this;\n\n      service.schema = schema;\n      service.model = model;\n\n      if (!service.isCompiled()) {\n        service.setupConfig(config);\n\n        if (schema.forms) {\n          _.each(schema.forms, function (form) {\n            _.each(form.form, service.processField.bind(service));\n          });\n        } else {\n          _.each(schema.form, service.processField.bind(service));\n        }\n\n        service.initModelWatch();\n        service.initArrayCopyWatch();\n        service.isCompiled(true);\n      }\n\n      service.broadcastErrors();\n    }\n\n    function isCompiled(setValue) {\n      var service = this;\n      if (setValue) {\n        service.schema.compiled = setValue;\n      }\n      return service.schema && service.schema.compiled;\n    }\n\n    function setupConfig(config) {\n      var service = this;\n      if (config) {\n        if (config.formCtrl) service.formCtrl = config.formCtrl;\n        if (config.updateSchema) service.updateSchema = config.updateSchema;\n        if (config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n      }\n    }\n\n    function processSchema(field) {\n      var service = this,\n          schema = field.schema;\n\n      if (schema) {\n        field.getSchemaType = function () {\n          return _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n        };\n\n        service.processDefault(field);\n      }\n    }\n\n    function processDefault(field) {\n      var service = this,\n          schema = field.schema;\n\n      if (schema.default) {\n        var key = service.getKey(field.key);\n        // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n        if (service.updates) {\n          if (key.includes && key.includes('[]')) return;\n          var model = service.parseExpression(field.key, service.model);\n          var modelValue = model.get();\n          // if there's an existing default and it's the same as the current value\n          // update the current value to the new default\n          if (_.isTrulyEmpty(modelValue) || angular.equals(modelValue, service.defaults[key])) {\n            model.set(schema.default);\n          }\n        }\n        service.defaults[key] = angular.copy(schema.default);\n      }\n\n      if (schema.format === 'url' && !field.validationMessage) {\n        if (!field.type) field.type = 'url';\n        field.validationMessage = 'Must be a valid url (https://...)';\n      }\n    }\n\n    function processFieldset(fieldset) {\n      var service = this;\n\n      fieldset.type = 'cn-fieldset';\n      fieldset.items.forEach(service.processField.bind(service));\n\n      if (fieldset.collapsible) {\n        fieldset.toggleCollapse = function (fieldset) {\n          if (fieldset.collapsible) {\n            fieldset.collapsed = !fieldset.collapsed;\n          }\n        };\n\n        fieldset.render = !fieldset.collapsed;\n      } else {\n        fieldset.render = true;\n      }\n    }\n\n    function processField(field) {\n      var service = this;\n\n      if (field.selectDisplay) {\n        service.processSelectDisplay(field, service.getSchema(field.key));\n      }\n\n      if (field.type === 'fieldset') {\n        service.processFieldset(field);\n      } else {\n        if (!field._ogKeys) {\n          field._ogKeys = _.without(_.keys(field), 'key', 'htmlClass');\n        }\n\n        var key = service.getKey(field.key);\n\n        if (field.key) {\n          service.addToFormCache(field, key);\n          field.schema = service.getSchema(key);\n\n          if ( /*!field.immutable && */field.schema) {\n            if (field.schema.description) field.description = field.schema.description;\n            if (field.readonly && !field.schema.readonly) field.readonly = false;\n            if (field.schema.type === 'array' && !('showClearAll' in field)) field.showClearAll = true;\n          }\n        }\n\n        service.processSchema(field);\n\n        if (!field.type) field.type = field.getSchemaType && field.getSchemaType();\n\n        if (field.resolve) service.processResolve(field);\n\n        if (field.watch) service.processFieldWatch(field);\n\n        if (field.type === 'section' || field.type === 'tabarray') {\n          service.processSection(field);\n        } else if (field.type === 'component') {\n          service.processComponent(field);\n        } else {\n          var fieldType = cnFlexFormTypes.getFieldType(field);\n          var handler = fieldTypeHandlers[fieldType];\n          if (_.isString(handler)) {\n            service[handler](field);\n          } else if (_.isFunction(handler)) {\n            handler.call(service, field);\n          }\n\n          if (field.conditionals) {\n            service.processConditional(field);\n          }\n          if (field.updateSchema) {\n            service.registerHandler(field, null, field.updateSchema);\n          }\n\n          if (_.find(service.errors, { key: key })) {\n            service.errors = _.reject(service.errors, { key: key });\n            $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n            $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n          }\n\n          if (field.error) {\n            service.errors.push(service.buildError(field));\n            if (_.isEmpty(field.ngModelOptions)) {\n              field.ngModelOptions = {\n                allowInvalid: true\n              };\n            } else {\n              field.ngModelOptions.allowInvalid = true;\n            }\n          }\n        }\n      }\n    }\n\n    function getKey(key) {\n      if (_.isArray(key)) {\n        key = _.reduce(key, function (total, next) {\n          if (/^(\\d*)$/.test(next)) {\n            return total + '[' + next + ']';\n          }\n          return total + '.' + next;\n        });\n      }\n      return key;\n    }\n\n    function getSchema(key, depth) {\n      var service = this;\n      if (!key) return;\n\n      key = service.getKey(key);\n\n      //key = key.split('.');\n      //key = key\n      //    .replace(/arrayIndex/g, '')\n      //    .replace(/(\\[')([^.]+)\\.([^.]+)('])/g, '.$2%ff_dt%$3')\n      //    .replace(/\\./g, '%ff_sp%')\n      //    .replace(/%ff_dt%/g, '.')\n      //    .split('%ff_sp%');\n      key = sfPath.parse(key);\n      depth = depth || service.schema.schema.properties;\n\n      // why do we do this? it's breaking stuff\n      //if (_.last(key) === '') key.pop();\n\n      var first = undefined,\n          next = undefined;\n\n      while (key.length > 1) {\n        first = key[0];\n        next = key[1];\n        if (/^\\d*$/.test(next)) {\n          if (key.length === 2) {\n            depth = depth = depth[key.shift()];\n          } else {\n            depth = depth[key.shift()].items.properties;\n            key.shift();\n          }\n        } else {\n          depth = depth[key.shift()].properties;\n        }\n      }\n\n      // if array item\n      first = key[0] || 'items';\n\n      return depth[first];\n    }\n\n    function processResolve(field) {\n      var service = this;\n\n      _.each(field.resolve, function (dataProp, fieldProp) {\n        service.handleResolve(field, fieldProp, dataProp);\n\n        var resolveType = dataProp.match(/^(schema\\.data\\.|model\\.)(\\w+)/);\n\n        if (resolveType) {\n          if (resolveType[1] === 'schema.data.') {\n            service.registerResolve(field, fieldProp, resolveType[2]);\n          } else if (resolveType[1] === 'model.') {\n            service.registerHandler(resolveType[2], function () {\n              service.handleResolve(field, fieldProp, dataProp);\n            });\n          }\n        }\n      });\n\n      return field;\n    }\n\n    function handleResolve(field, fieldProp, exp) {\n      var service = this;\n      var data = service.parseExpression(exp).get();\n      // if we're resolving from model but defaults haven't been applied yet, resolve from default itself\n      if (!data && exp.indexOf('model.') === 0) {\n        data = service.getSchema(exp.replace('model.', '')).default;\n      }\n      if (data && data.cursor) {\n        field.loadMore = function () {\n          var dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n          service.refreshSchema('data:' + dataProp + ':' + data.cursor);\n        };\n      } else {\n        delete field.loadMore;\n      }\n      field[fieldProp] = data && data.data ? data.data : data;\n    }\n\n    function registerResolve(field, fieldProp, dataProp) {\n      var service = this;\n\n      var fieldKey = service.getKey(field.key);\n      service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\n      var register = service.resolveRegister[dataProp];\n      register[fieldKey] = register[fieldKey] || [];\n      register[fieldKey].push({\n        field: field,\n        prop: fieldProp\n      });\n    }\n\n    function processConditional(field) {\n      var service = this;\n      _.each(field.conditionals, function (condition, key) {\n        var handler = function handler(val, prev) {\n          field[key] = service.parseCondition(condition);\n          if (key === 'required') {\n            $rootScope.$broadcast('schemaFormValidate');\n          }\n        };\n        field.conditionals[key].match(/model\\.([^\\s]+)/g).map(function (path) {\n          return path.match(/model\\.([^\\s]+)/)[1];\n        }).forEach(function (key) {\n          service.registerHandler(key, handler);\n        });\n        handler();\n      });\n    }\n\n    function processFieldWatch(field) {\n      var service = this,\n          schema = field.schema;\n\n      field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\n      _.each(field.watch, function (watch) {\n        if (watch.resolution) {\n          var adjustment;\n\n          (function () {\n            var condition = watch.condition;\n            var resolution = watch.resolution;\n            var handler = undefined;\n\n            if (_.isFunction(resolution)) {\n              handler = function handler(cur, prev) {\n                if (!condition || service.parseCondition(condition)) {\n                  resolution(cur, prev);\n                }\n              };\n            } else {\n              adjustment = {};\n\n\n              adjustment.date = resolution.match(/\\+ ?(\\d+) days/);\n\n              if (adjustment.date) {\n                adjustment.date = adjustment.date[1];\n                resolution = resolution.replace(adjustment.date, '').trim();\n              } else {\n                adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\n                if (adjustment.math) {\n                  adjustment.operator = {\n                    '+': 'add',\n                    '-': 'subtract',\n                    '*': 'multiply',\n                    '/': 'divide'\n                  }[adjustment.math[1]];\n\n                  adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n                }\n              }\n\n              resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n\n              handler = function handler(val, prev, key, trigger) {\n                var curCondition = condition && replaceArrayIndex(condition, key);\n                var updatePath = replaceArrayIndex(resolution[1], key);\n                var fromPath = replaceArrayIndex(resolution[2], key);\n\n                var update = service.parseExpression(updatePath);\n\n                // avoid loop where two watches keep triggering each other\n                if (trigger === update.path().key) return;\n                trigger = update.path().key;\n\n                var from = service.parseExpression(fromPath);\n\n                if (!condition || service.parseCondition(curCondition)) {\n                  if (adjustment.date) {\n                    update.set(moment(from.get()).add(adjustment.date, 'days').toDate());\n                  } else if (adjustment.math) {\n                    //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n                    //let result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n                    var result = $parse(from.get() + adjustment.math[1] + adjustment.adjuster.get())();\n                    schema = schema || field.items && (field.items[0].schema || field.items[0].items && field.items[0].items[0].schema);\n                    if (field.type === 'cn-currency') {\n                      var p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\n                      if (adjustment.math[1] === '*') {\n                        result = _.floor(result, p);\n                      } else if (adjustment.math[1] === '/') {\n                        result = _.ceil(result, p);\n                      } else {\n                        result = _.round(result, p);\n                      }\n                    }\n                    //service.listeners[update.path().key].prev = result;\n                    if (service.listeners[trigger]) {\n                      service.listeners[trigger].trigger = key;\n                    }\n                    update.set(result || 0);\n                  } else {\n                    update.set(from.get());\n                  }\n                }\n              };\n            }\n\n            service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n          })();\n        }\n      });\n    }\n\n    function parseCondition(condition) {\n      var service = this;\n      if (condition.startsWith(\"_\")) {\n        var exp = /^_\\.(.*?)\\((.*?),[\\s(]*(.*?)\\)?\\s*=>[{\\s]*(?:return)?(.*?)\\}?\\)$/;\n\n        var _condition$match = condition.match(exp);\n\n        var _condition$match2 = _slicedToArray(_condition$match, 5);\n\n        var fn = _condition$match2[1];\n        var list = _condition$match2[2];\n        var predicateParams = _condition$match2[3];\n        var predicateBody = _condition$match2[4];\n\n        return _[fn]($parse(list)(service), generatePredicate(predicateParams, predicateBody));\n      } else {\n        return $parse(condition)(service);\n      }\n    }\n\n    function generatePredicate(params, body) {\n      return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return $parse(body)(params.replace(/\\s/g, '').split(',').reduce(function (acc, cur, i) {\n          acc[cur] = args[i];return acc;\n        }, {}));\n      };\n    }\n\n    function registerHandler(key, handler, updateSchema, runHandler) {\n      var service = this;\n\n      // if field is passed instead of key\n      if (_.isObject(key) && !_.isArray(key)) {\n        if (!key.key && key.items) {\n          _.each(key.items, function (field) {\n            service.registerHandler(field, handler, field.updateSchema);\n          });\n          return;\n        } else {\n          key = key.key;\n        }\n      }\n\n      key = service.getKey(key);\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\n      if (arrMatch) {\n        service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n        return;\n      }\n\n      var cur = service.parseExpression(key, service.model).get();\n      var defaultValue = _.get(service.getSchema(key), 'default');\n\n      if (!service.listeners[key]) {\n        var prev = _.isUndefined(cur) ? angular.copy(defaultValue) : angular.copy(cur);\n        service.listeners[key] = {\n          handlers: [],\n          updateSchema: updateSchema,\n          prev: prev\n        };\n      }\n\n      if (handler) {\n        service.listeners[key].handlers.push(handler);\n        if (runHandler) handler(cur, null, key);\n      }\n    }\n\n    function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n      var service = this;\n      var onArray = function onArray(cur, prev, reorder) {\n\n        if (!prev && prev !== 0 && (cur | 0) < 1) return;\n        var i, l, key;\n\n        if (prev > cur || reorder) {\n          var lastKey = fieldKey ? arrKey + '[' + (prev - 1) + ']' + '.' + fieldKey : arrKey + '[' + (prev - 1) + ']';\n\n          // only deregister handlers once each time an element is removed\n          if (service.listeners[lastKey]) {\n            for (i = 0, l = prev; i < l; i++) {\n              key = fieldKey ? arrKey + '[' + i + ']' + '.' + fieldKey : arrKey + '[' + i + ']';\n\n              service.deregisterHandlers(key);\n            }\n          }\n          for (i = 0, l = cur; i < l; i++) {\n            key = fieldKey ? arrKey + '[' + i + ']' + '.' + fieldKey : arrKey + '[' + i + ']';\n\n            service.registerHandler(key, handler, updateSchema);\n            //no need to call if just reregisering handlers\n            //if(runHandler) handler(null, null, key);\n          }\n        } else if (cur > (prev || 0)) {\n            for (i = prev | 0, l = cur; i < l; i++) {\n              key = fieldKey ? arrKey + '[' + i + ']' + '.' + fieldKey : arrKey + '[' + i + ']';\n\n              service.registerHandler(key, handler, updateSchema, runHandler);\n              //if(runHandler) handler(null, null, key);\n            }\n          }\n      };\n\n      var arrVal = service.parseExpression(arrKey, service.model).get();\n      _.each(arrVal, function (field, i) {\n        var key = fieldKey ? arrKey + '[' + i + ']' + '.' + fieldKey : arrKey + '[' + i + ']';\n\n        service.registerHandler(key, handler, updateSchema);\n        if (runHandler) handler(null, null, key);\n      });\n\n      if (service.arrayListeners[arrKey + '.length']) {\n        service.arrayListeners[arrKey + '.length'].handlers.push(onArray);\n      } else {\n        service.arrayListeners[arrKey + '.length'] = {\n          handlers: [onArray],\n          prev: arrVal ? arrVal.length : 0\n        };\n      }\n    }\n\n    function deregisterHandlers(key) {\n      var service = this;\n\n      key = service.getKey(key);\n\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\n      if (arrMatch) {\n        service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n        return;\n      }\n\n      if (service.listeners[key]) service.listeners[key].handlers = [];\n    }\n\n    function deregisterArrayHandlers(arrKey, fieldKey) {\n      var service = this;\n\n      service.parseExpression(arrKey, service.model).get().forEach(function (item, i) {\n        fieldKey ? service.deregisterHandlers(arrKey + '[' + i + '].' + fieldKey) : service.deregisterHandlers(arrKey + '[' + i + ']');\n      });\n    }\n\n    function initModelWatch() {\n      var service = this;\n      if (service.watching) return;\n      if (service.modelWatch) service.modelWatch();\n\n      service.modelWatch = $rootScope.$watch(function () {\n        return service.model;\n      }, service.onModelWatch.bind(service), true);\n\n      service.initSchemaParams();\n      service.watching = true;\n      service.firstUpdate = true;\n    }\n\n    function onModelWatch(cur, prev) {\n      var service = this;\n      // we always run through the listeners on the first update because angular seems to mess up\n      // when the defaults are applied and uses the same object for both cur and prev\n      if (service.firstUpdate || !angular.equals(cur, prev)) {\n        service.firstUpdate = false;\n        cnUtil.cleanModel(service.model);\n\n        service.prevParams = angular.copy(service.params);\n        service.params = cnFlexFormConfig.getStateParams();\n\n        _.each(service.arrayListeners, function (listener, key) {\n          var val = service.parseExpression(key, service.model).get();\n          if (!angular.equals(val, listener.prev)) {\n            listener.handlers.forEach(function (handler) {\n              return handler(val, listener.prev);\n            });\n            listener.prev = angular.copy(val);\n          }\n        });\n\n        _.each(service.listeners, function (listener, key) {\n          if (listener) {\n            (function () {\n              var val = service.parseExpression(key, service.model).get();\n              var isInitArray = angular.equals(val, []) && !listener.prev;\n              if (!angular.equals(val, listener.prev) && !isInitArray) {\n                listener.handlers.forEach(function (handler) {\n                  handler(val, listener.prev, key, listener.trigger);\n                });\n                listener.trigger = null;\n                listener.prev = angular.copy(val);\n              }\n              if (listener.updateSchema && !angular.isUndefined(val) && !isInitArray && val !== null) {\n                service.params[key] = val;\n              }\n            })();\n          }\n        });\n\n        if (!angular.equals(service.params, service.prevParams)) {\n          if (service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n            ++service.updates;\n          } else {\n            service.refreshSchema();\n          }\n        }\n      }\n    }\n\n    function initSchemaParams() {\n      var service = this;\n      _.each(service.listeners, function (listener, key) {\n        if (listener) {\n          var val = service.parseExpression(key, service.model).get();\n          if (listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n            service.params[key] = val;\n          }\n        }\n      });\n    }\n\n    function initArrayCopyWatch() {\n      var service = this;\n\n      service.events.push($rootScope.$on('schemaFormPropagateScope', function (event, scope) {\n        var key = service.getKey(scope.form.key);\n        var index = key.match(/^.*\\[(\\d+)].*$/);\n\n        key = key.replace(/\\[\\d+]/g, '[]');\n        index = index && parseInt(index[1]);\n\n        if (!scope.form.condition) scope.form.condition = 'true';\n\n        service.addArrayCopy(scope, key, index);\n        scope.$emit('flexFormArrayCopyAdded', key);\n      }));\n\n      service.events.push($rootScope.$on('schemaFormDeleteScope', function (event, scope, index) {\n        var key = service.getKey(scope.form.key).replace(/\\[\\d+]/g, '[]');\n        var copies = service.getArrayCopiesFor(key);\n\n        copies.forEach(function (list) {\n          list.splice(index, 1);\n        });\n\n        if (scope.form.link) {\n          var list = service.parseExpression(scope.form.link, service.model).get();\n          list.splice(index, 1);\n        }\n      }));\n    }\n\n    function addArrayCopy(form, key, index) {\n      var service = this;\n      if (!index || index < 0) index = 0;\n      if (!service.arrayCopies[key]) service.arrayCopies[key] = [];\n      service.arrayCopies[key][index] = form;\n      //service.arrayCopies[key].push(form);\n    }\n\n    function getArrayCopies(key) {\n      var service = this;\n      return _.pluck(service.getArrayScopes(key), 'form');\n    }\n\n    function getArrayCopiesFor(keyStart) {\n      var service = this;\n      keyStart += '[]';\n\n      return _.filter(service.arrayCopies, function (copy, key) {\n        return key.includes(keyStart);\n      });\n    }\n\n    function getArrayScopes(key) {\n      var service = this;\n      return service.arrayCopies[key];\n    }\n\n    function addToFormCache(field, key) {\n      var service = this;\n      key = key || service.getKey(field.key);\n      if (!service.getFromFormCache(key)) service.formCache[key] = field;\n    }\n\n    function getFromFormCache(key) {\n      var service = this;\n      return service.formCache[key];\n    }\n\n    function addToDataCache(key, modelValue) {\n      var service = this;\n\n      if (key) {\n        service.dataCache[key] = modelValue;\n      }\n    }\n\n    function getFromDataCache(key) {\n      var service = this;\n\n      return service.dataCache[key];\n    }\n\n    function parseExpression(exp, depth) {\n      var service = this;\n      // if expression is specific value\n      if (!exp || /^(null|false|true|undefined|''|[0-9.]+|\\[]|\\{})$/.test(exp)) {\n        return {\n          \"get\": function get() {\n            return eval(exp);\n          }\n        };\n      }\n\n      exp = service.getKey(exp);\n\n      //var key;\n      var match = exp.match(/^(model\\.)?(\\S+)$/);\n\n      // cache fucks shit up if the model changes so disabling\n      //var cached;\n\n      // return from cache if possible\n      //if(!/\\[]/.test(exp) && match && match[2]) {\n      //  if(!depth || depth === service.model) {\n      //    key = match[2];\n      //\n      //    cached = service.getFromDataCache(key);\n      //    if(cached) {\n      //      return cached;\n      //    }\n      //  }\n      //}\n\n      var modelValue = {\n        get: function get() {\n          var path = sfPath.parse(exp);\n          var start = depth || service;\n\n          while (start && path.length > 1) {\n            start = start[path.shift()];\n          }\n\n          return start && start[path[0]];\n        },\n        getAssignable: function getAssignable() {\n          var path = sfPath.parse(exp);\n          var progress = [];\n          var start = depth || service;\n\n          while (start && path.length > 1) {\n            var key = path.shift();\n            progress.push(key);\n            if (!start[key]) {\n              if (/^\\d?$/.test(path[0])) {\n                start[key] = [];\n              } else {\n                start[key] = {};\n              }\n            }\n            start = start[key];\n          }\n\n          return {\n            obj: start,\n            key: path[0],\n            path: service.getKey(progress),\n            fullPath: service.getKey(progress.concat(path.slice(0, 1)))\n          };\n        },\n        set: function set(val) {\n          var assignable = this.getAssignable();\n          assignable.obj[assignable.key] = val;\n          return val;\n        },\n        path: function path() {\n          return {\n            exp: exp,\n            depth: depth,\n            key: match[2]\n          };\n        }\n      };\n\n      return modelValue;\n    }\n\n    function processArray(array) {\n      var service = this;\n      var key = service.getKey(array.key);\n\n      array.sortOptions = {\n        update: function update(e, ui) {\n          var listener = service.arrayListeners[key + '.length'];\n          listener.handlers.forEach(function (handler) {\n            handler(listener.prev, listener.prev, true);\n          });\n        }\n      };\n\n      service.processSection(array);\n    }\n\n    function processSection(section) {\n      var service = this;\n      _.each(section.items, service.processField.bind(service));\n    }\n\n    function processComponent(component) {\n      var service = this;\n\n      component.type = 'section';\n      component.htmlClass = 'row';\n\n      var cols = 12 / _.reject(component.items, 'hidden').length;\n\n      _.each(component.items, function (field, i) {\n        service.processField(field);\n        component.items[i] = {\n          type: 'section',\n          htmlClass: 'col-sm-' + cols,\n          items: [field]\n        };\n      });\n    }\n\n    function processCurrency(field) {\n      field.currencyFormat = {\n        'currency-dollars': 'dollars',\n        'currency-microcents': 'microcents',\n        'currency': 'cents'\n      }[field.schema.format];\n\n      field.type = 'cn-currency';\n    }\n\n    function processPercentage(field) {\n      field.type = 'cn-percentage';\n    }\n\n    function processReusable(field) {\n      var service = this;\n      field.type = 'cn-reusable';\n      field.view = field.view || 'new';\n      field.items.forEach(service.processField.bind(service));\n      field.items = [{\n        type: 'section',\n        items: field.items,\n        condition: '!model.' + service.getKey(field.key) + '.id'\n      }];\n    }\n\n    function processMediaUpload(field) {\n      var service = this;\n      field.type = 'cn-mediaupload';\n      _.each(field.data, function (dataProp, key) {\n        field.data[key] = service.parseExpression(dataProp).get();\n      });\n    }\n\n    function processCsvUpload(field) {\n      var service = this;\n      field.type = 'cn-csvupload';\n    }\n\n    function processRadios(field) {\n      field.type = 'cn-radios';\n    }\n\n    function processRadiobuttons(radios) {\n      var service = this;\n      radios.type = 'cn-radiobuttons';\n      if (radios.fullWidth) {\n        radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n      }\n    }\n\n    function processDate(date) {\n      var service = this;\n      date.type = 'cn-datetimepicker';\n\n      if (date.schema.format === 'time-minutes') {\n        date.maxView = 'hour';\n        date.iconClass = 'fa fa-clock-o';\n\n        date.modelFormatter = function (val) {\n          if (!val) return;\n\n          var m = moment(val);\n\n          return _.add(_.multiply(m.hours(), 60), m.minutes());\n        };\n\n        date.modelParser = function (val) {\n          if (!val) return;\n\n          var d = parseInt(val);\n          var hours = _.floor(d / 60);\n          var minutes = d % 60;\n\n          return moment().startOf('day').add('hours', hours).add('minutes', minutes);\n        };\n\n        date.viewFormatter = function (val) {\n          if (!val) return;\n\n          return date.modelParser(val).format(date.dateFormat);\n        };\n\n        date.viewParser = function (val) {\n          if (!val) return;\n\n          var match = val.match(/^(\\d{1,2}):?(\\d{1,2})? (a|p)/);\n          if (!match) return;\n\n          var hours = _.add(match[1] === '12' ? 0 : match[1], match[3] === 'a' ? 0 : 12);\n          var minutes = match[2] || '00';\n\n          if (minutes.length === 1) minutes += '0';\n\n          return _.add(_.multiply(hours, 60), minutes);\n        };\n      }\n    }\n\n    function getSelectValProp(select) {\n      var isArray = select.getSchemaType() === 'array';\n      return select.valueProperty || (isArray ? select.schema.items.type : select.schema.type) !== 'object' && 'value';\n    }\n\n    function getAllowedSelectValue(select, val, titleMap) {\n      titleMap = titleMap || select.getTitleMap();\n      var valProp = getSelectValProp(select);\n      if (!valProp) return;\n\n      if (select.getSchemaType() === 'array') {\n        if (!val || !_.isArray(val)) return;\n\n        var mapVal = val.map(function (x) {\n          return _.find(titleMap, _defineProperty({}, valProp, x));\n        }).filter(function (x) {\n          return x !== undefined;\n        });\n\n        return mapVal;\n      } else {\n        return _.find(titleMap, _defineProperty({}, valProp, val));\n      }\n    }\n\n    function processSelect(select) {\n      var service = this,\n          schema = select.schema;\n\n      if (select.titleMapResolve || select.titleMap) {\n        select.getTitleMap = function () {\n          return select.titleMap || service.schema.data[select.titleMapResolve];\n        };\n\n        select.onInit = function (val, form, event, setter) {\n          // make sure we use correct value\n          var modelValue = service.parseExpression(form.key, service.model);\n          if (event === 'tag-init') {\n            var newVal = getAllowedSelectValue(select, modelValue.get());\n            if (newVal !== undefined) setter(newVal);\n          }\n        };\n      }\n\n      if (select.titleMapQuery) {\n        var key = select.titleMapQuery.params.q;\n        select.titleQuery = function (q) {\n          var params = {};\n          if (key) {\n            params[key] = q;\n          }\n          return Api.get({\n            url: select.titleMapQuery.url,\n            params: params\n          });\n        };\n\n        // wrap in string so returns truthy when compiled, but converted to number within directive\n        if (!key) select.minLookup = '0';\n\n        select.onInit = function (val, form, event, setter) {\n          if (event === 'tag-init') {\n            setter(val);\n          }\n        };\n      }\n\n      if (schema.items) {\n        var defaults = [];\n        _.each(schema.items.properties, function (schema, key) {\n          if (angular.isDefined(schema.default)) {\n            defaults.push({\n              \"key\": key,\n              default: schema.default\n            });\n          }\n        });\n        if (defaults.length) {\n          select.onAdd = function (val, form, event) {\n            if (val.value && event === 'tag-added') {\n              _.each(defaults, function (prop) {\n                if (!val.value[prop.key]) val.value[prop.key] = prop.default;\n              });\n            }\n          };\n        }\n      }\n\n      if (!select.type.includes('cn-autocomplete')) {\n        if (select.items) {\n          select.detailedList = true;\n\n          if (select.items[0].type !== 'component') {\n            if (select.items.length > 1) {\n              select.items = [{\n                type: \"component\",\n                items: select.items\n              }];\n            }\n\n            service.processFieldset(select);\n          }\n\n          select.type = 'cn-autocomplete-detailed';\n        } else {\n          if (!select.selectionStyle) {\n            select.selectionStyle = select.key === 'tags' ? 'tags' : select.getSchemaType() === 'array' && select.schema.maxItems !== 1 ? 'list' : 'select';\n          }\n          select.type = 'cn-autocomplete';\n        }\n\n        if (select.titleMapResolve) {\n          $rootScope.$on('cnFlexFormDiff:data', function (e, data) {\n            if (data[select.titleMapResolve]) {\n              var modelValue = service.parseExpression(select.key, service.model);\n              var val = modelValue.get();\n              if (val !== undefined) {\n                var valid = getAllowedSelectValue(select, val, data[select.titleMapResolve]);\n                if (valid === undefined) modelValue.set();\n              }\n            }\n          });\n        }\n      }\n\n      if (select.displayFormat) {\n        select.itemFormatter = service.processTemplate(select.displayFormat);\n      }\n\n      service.registerHandler(select.key, function (val) {\n        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n        if (form && form.$setDirty) form.$setDirty();\n      }, select.updateSchema);\n    }\n\n    function processToggle(toggle) {\n      toggle.type = 'cn-toggle';\n    }\n\n    function processHelp(help) {\n      help.htmlClass = 'help-block';\n    }\n\n    function processDisplay(display) {\n      var service = this;\n      display.type = 'cn-display';\n      display.getDisplay = service.processTemplate(display.displayFormat, true);\n    }\n\n    function processTemplate(tpl, parseScope) {\n      var service = this;\n      //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n      var processor = $interpolate;\n      return function (scope, arrayIndex) {\n        if (parseScope) {\n          if (angular.isDefined(arrayIndex)) {\n            scope = _.map(scope, function (key) {\n              return key === 'arrayIndex' ? arrayIndex : key;\n            });\n          }\n          scope = service.parseExpression(scope, service.model).get();\n        }\n        return processor(tpl)(scope);\n      };\n    }\n\n    function processTable(table) {\n      var service = this;\n      table.type = 'cn-table';\n      table.items.forEach(function (row) {\n        for (var i = 0; i < table.columns.length; i++) {\n          _.extend(row.items[i], table.columns[i]);\n          //if (row.columns[i].key) row.columns[i].key = ObjectPath.parse(row.columns[i].key);\n          service.processField(row.items[i]);\n        }\n      });\n    }\n\n    function processSelectDisplay(selectDisplay, schema) {\n      var service = this,\n          selectField = _.find(selectDisplay.items, 'selectField'),\n          handler;\n\n      if (schema && schema.type === 'array') {\n        handler = service.setupArraySelectDisplay(selectDisplay, selectField);\n      } else {\n        handler = service.setupSelectDisplay(selectDisplay, selectField);\n      }\n\n      selectDisplay.selectDisplay = false;\n      service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n      service.processField(selectDisplay);\n    }\n\n    function setupArraySelectDisplay(selectDisplay, selectField) {\n      var service = this;\n      _.each(selectDisplay.items, function (item) {\n        if (item.condition !== 'false') {\n          item.condition = 'true';\n        }\n      });\n      var handler = function handler(val, prev, key) {\n        var index = getArrayIndex(key);\n        _.each(selectDisplay.items, function (item) {\n          var selectKey = service.getKey(selectField.key);\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var indexedSelectKey = service.setArrayIndex(selectKey, index);\n          var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n          var formCopies = service.getArrayCopies(key);\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            _.each(formCopies, function (copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'true';\n              }\n            });\n          } else {\n            _.each(formCopies, function (copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'false';\n                service.parseExpression(service.getKey(copy.key), service.model).set();\n              }\n            });\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n      _.each(selectDisplay.items, function (item) {\n        var key = service.getKey(item.key);\n        var selectKey = service.getKey(selectField.key);\n        if (key === selectKey) return;\n        _.each(model, function (elem, i) {\n          var indexedKey = service.setArrayIndex(key, i);\n          var splitIndexedKey = ObjectPath.parse(indexedKey);\n          var indexedSelectKey = service.setArrayIndex(selectKey, i);\n          var selectModel = service.parseExpression(indexedSelectKey, service.model);\n          var selectValue = selectModel.get();\n          var itemValue = service.parseExpression(indexedKey, service.model).get();\n          if (itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n            if (!selectValue) {\n              selectValue = [];\n            }\n            selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n            selectModel.set(selectValue);\n          }\n        });\n      });\n      // handle new objects with values set in defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function (elem, i) {\n        var selectKey = service.getKey(selectField.key);\n        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n        var selectValue = selectModel.get();\n        _.each(elem, function (val, key) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(key);\n          selectModel.set(selectValue);\n        });\n      });\n      // run handler once all arrayCopies have been instantiated\n      var count = 0;\n      var keyMap = _.pluck(_.reject(selectDisplay.items, { \"condition\": \"false\" }), 'key');\n      var once = $rootScope.$on('flexFormArrayCopyAdded', function (event, key) {\n        var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n        if (model) {\n          var total = model.length * keyMap.length;\n          if (_.includes(keyMap, key)) {\n            count++;\n          }\n          if (count === total) {\n            for (var i = 0; i < model.length; i++) {\n              handler(null, null, '[' + i + ']');\n            }\n            count = 0;\n          }\n        }\n      });\n      var resetCount = $rootScope.$on('flexForm.updatePage', function () {\n        count = 0;\n      });\n      service.events.push(once);\n      service.events.push(resetCount);\n      return handler;\n    }\n\n    function setupSelectDisplay(selectDisplay, selectField) {\n      var service = this;\n      var handler = function handler() {\n        var selectKey = service.getKey(selectField.key);\n        _.each(selectDisplay.items, function (item) {\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var selectValue = service.parseExpression(selectKey, service.model).get();\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            item.condition = 'true';\n          } else {\n            item.condition = 'false';\n            service.parseExpression(key, service.model).set();\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var selectKey = service.getKey(selectField.key);\n      var selectModel = service.parseExpression(selectKey, service.model);\n      var selectValue = selectModel.get();\n      _.each(selectDisplay.items, function (item) {\n        var key = service.getKey(item.key);\n        if (selectKey === key) return;\n        var splitKey = ObjectPath.parse(key);\n        var itemValue = service.parseExpression(key, service.model).get();\n        if (itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(splitKey[splitKey.length - 1]);\n          selectModel.set(selectValue);\n        }\n      });\n      // handle new objects with values set in the defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function (val, key) {\n        if (!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(key);\n        selectModel.set(selectValue);\n      });\n      // set default values here\n      var model = service.parseExpression(selectDisplay.key, service.model);\n      if (defaults && !model.get()) {\n        model.set(defaults);\n      }\n\n      return handler;\n    }\n\n    function setupSchemaRefresh(refresh) {\n      var service = this;\n      service.refreshSchema = _.debounce(function (updateSchema) {\n        var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n        var diff = cnUtil.diff(service.schema.params, params, true);\n        var keys;\n\n        if (diff || updateSchema) {\n          if (updateSchema) params.updateSchema = updateSchema;else {\n            keys = _.keys(diff);\n\n            if (keys.length > 1) {\n              diff = _.omit(diff, _.isNull);\n              keys = _.keys(diff);\n            }\n\n            params.updateSchema = _.first(keys);\n          }\n\n          if (!params.updateSchema) {\n            diff = cnUtil.diff(params, _.omit(service.schema.params, 'updateSchema'));\n            keys = _.keys(diff);\n\n            params.updateSchema = _.first(keys);\n          }\n\n          refresh(params).then(function (schema) {\n            ++service.updates;\n            //service.updateSchema(schema);\n            service.processUpdatedSchema(schema);\n          });\n        }\n      }, 100);\n\n      service.refreshData = _.debounce(function () {\n        refresh(_.extend(service.schema.params, { updateSchema: 'refreshData' })).then(function (schema) {\n          service.processUpdatedSchema(schema);\n        });\n      }, 100);\n\n      service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n    }\n\n    function processUpdatedSchema(schema) {\n      var service = this;\n      if (schema.diff) {\n        service.schema.params = schema.params;\n\n        if (schema.diff.data) {\n          $rootScope.$broadcast('cnFlexFormDiff:data', schema.diff.data);\n          _.each(schema.diff.data, function (data, prop) {\n            if (data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n              data.data = service.schema.data[prop].data.concat(data.data);\n            }\n            service.schema.data[prop] = data;\n            if (service.resolveRegister[prop]) {\n              _.each(service.resolveRegister[prop], function (registers) {\n                registers.forEach(function (register) {\n                  service.handleResolve(register.field, register.prop, 'schema.data.' + prop);\n                });\n              });\n            }\n          });\n        }\n\n        var keys = [];\n\n        if (schema.diff.schema) {\n          $rootScope.$broadcast('cnFlexFormDiff:schema', schema.diff.schema);\n          _.each(schema.diff.schema, function (schema, key) {\n            service.schema.schema.properties[key] = schema;\n            reprocessSchema(schema, key, keys);\n          });\n        }\n\n        if (schema.diff.form) {\n          $rootScope.$broadcast('cnFlexFormDiff:form', schema.diff.form);\n          _.each(schema.diff.form, function (form) {\n\n            if (keys.indexOf(form.key) === -1) {\n              keys.push(form.key);\n            }\n\n            // don't want to override key when extending cached objects\n            //var key = form.key;\n            //delete form.key;\n\n            var cached = service.getFromFormCache(form.key);\n            if (cached) {\n              service.reprocessField(cached, form);\n            }\n            var copies = service.getArrayCopies(form.key);\n            if (copies) {\n              copies.forEach(function (copy) {\n                return copy && service.reprocessField(copy, form);\n              });\n            }\n          });\n        }\n\n        if (keys.length) {\n          _.each(keys, function (key) {\n            var form = service.getFromFormCache(key);\n            if (form) service.processField(form);\n            if (key.includes('[]')) {\n              var copies = service.getArrayCopies(key);\n              _.each(copies, function (copy) {\n                if (copy) service.processField(copy);\n              });\n            }\n          });\n        }\n\n        service.broadcastErrors();\n      } else {\n        service.updateSchema(schema);\n      }\n    }\n\n    function reprocessField(current, update, isChild) {\n      var service = this;\n\n      // other logic in the service will add conition = 'true' to force\n      // condition to eval true, so we set the update condition to 'true'\n      // before comparing\n      if (!update.condition && current.condition) update.condition = 'true';\n      var redraw = !isChild && current.condition !== update.condition;\n\n      _.extend(current, _.omit(update, 'items', 'key'));\n\n      current._ogKeys.forEach(function (key) {\n        if (!update[key]) delete current[key];\n      });\n      current._ogKeys = _.keys(update);\n\n      service.deregisterHandlers(update.key);\n\n      $rootScope.$broadcast('cnFlexFormReprocessField', update.key);\n\n      // why do we redraw? If we're doing it to show error message\n      // that has been addressed from the angular-schema-form library\n      // if there's another issue, try triggering the specific action required\n      // instead of redrawing the whole form\n      if (redraw && current.redraw) current.redraw();\n    }\n\n    function reprocessSchema(schema, key, keys) {\n      keys.push(key);\n      if (schema.properties) {\n        _.each(schema.properties, function (schema, subKey) {\n          reprocessSchema(schema, key + '.' + subKey, keys);\n        });\n      }\n      if (schema.items && schema.items.properties) {\n        _.each(schema.properties, function (schema, subKey) {\n          reprocessSchema(schema, key + '[].' + subKey, keys);\n        });\n      }\n    }\n\n    function buildError(field) {\n      var service = this;\n      var key = service.getKey(field.key);\n      return {\n        key: key,\n        message: field.error\n      };\n    }\n\n    function broadcastErrors() {\n      var service = this;\n      $timeout(function () {\n        service.errors.forEach(function (error) {\n          $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n        });\n      }, 1);\n    }\n\n    function replaceArrayIndex(resolve, key) {\n      if (!resolve.includes('arrayIndex')) return resolve;\n      var arrayIndexKey = /([^.]*)\\[arrayIndex\\]/.exec(resolve);\n      var re = new RegExp(arrayIndexKey[1] + '\\\\[(\\\\d+)\\\\]');\n      var index = re.exec(key);\n      return resolve.replace(new RegExp(arrayIndexKey[0].replace(/(\\[|\\])/g, '\\\\$1'), 'g'), index[0]);\n    }\n\n    function getArrayIndex(key) {\n      if (_.isObject(key)) {\n        return _.find(key.key, function (key) {\n          return _.isNumber(key);\n        });\n      } else {\n        return (/\\[(\\d+)\\]/.exec(key)[1]\n        );\n      }\n    }\n\n    function setArrayIndex(key, index, asArray) {\n      var service = this;\n      var keyCopy;\n      if (_.isString(key)) {\n        keyCopy = ObjectPath.parse(key);\n      } else {\n        keyCopy = _.clone(key);\n      }\n      var indexOfIndex = keyCopy.indexOf('');\n      keyCopy[indexOfIndex] = index;\n\n      if (asArray) {\n        return keyCopy;\n      } else {\n        return service.getKey(keyCopy);\n      }\n    }\n\n    function cleanup() {\n      var service = this;\n      _.each(service.events, function (listener) {\n        listener();\n      });\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').controller('FlexFormSandbox', FlexFormSandbox);\n\n  /* @ngInject */\n  function FlexFormSandbox() {\n    /* jshint validthis: true */\n    var vm = this;\n\n    vm.activate = activate;\n    vm.onSchema = onSchema;\n    vm.model = {};\n    vm.config = {};\n    vm.schemaStr = '';\n\n    activate();\n\n    ////////////////\n\n    function activate() {\n      console.log('FlexFormSandbox');\n    }\n\n    function onSchema() {\n      if (vm.schemaStr) {\n        var schema = angular.fromJson(vm.schemaStr);\n        console.log('schema:', schema);\n        if (!schema.form && schema.forms) {\n          schema.form = schema.forms[0].form;\n        }\n        vm.config.schema = schema.form && schema;\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.flex-form').config(schemaFormConfig).run(addTemplates);\n\n  schemaFormConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function schemaFormConfig(cnFlexFormServiceProvider) {\n    tv4.addFormat({\n      'url': function url(data) {\n        return _.isString(data) && !/^(https?:\\/\\/.{2}|$)/.test(data) && 'invalid url';\n      }\n    });\n\n    var extensions = ['cn-fieldset', 'cn-toggle', 'cn-datetimepicker', 'cn-autocomplete', 'cn-autocomplete-detailed', 'cn-currency', 'cn-radios', 'cn-radiobuttons', 'cn-percentage', 'cn-display', 'cn-mediaupload', 'cn-csvupload', 'cn-reusable', 'cn-table'];\n\n    _.each(extensions, function (extension) {\n      cnFlexFormServiceProvider.registerField({\n        type: extension,\n        templateUrl: 'app/components/cn-flex-form/forms/' + extension + '.html'\n      });\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n\n  function addTemplates($templateCache) {\n    $templateCache.put('app/components/cn-flex-form/forms/cn-toggle.html', '\\n        <div class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n          <div class=\"clearfix\">\\n            <cn-toggle-switch\\n              class=\"pull-left\"\\n              ng-show=\"form.key\"\\n              ng-model-options=\"form.ngModelOptions\"\\n              ng-model=\"$$value$$\"\\n              sf-changed=\"form\"\\n              schema-validate=\"form\"\\n              on-value=\"form.onValue\"\\n              off-value=\"form.offValue\"\\n              read-only=\"form.readonly\"\\n              undefined-class=\"form.undefinedClass\"/>\\n            <span ng-show=\"form.onText && form.offText\">\\n              {{$$value$$ === form.onValue ? form.onText : form.offText}}\\n            </span>\\n          </div>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-datetimepicker.html', '\\n        <div class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 for=\"{{form.key.join(\\'.\\')}}\"\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\n          <cn-datetimepicker\\n            ng-show=\"form.key\"\\n            ng-model=\"$$value$$\"\\n            ng-model-options=\"form.ngModelOptions\"\\n            is-disabled=\"form.readonly\"\\n            sf-changed=\"form\"\\n            schema-validate=\"form\"\\n            input-id=\"{{form.key.join(\\'.\\')}}\"\\n            min-date=\"form.minDate\"\\n            max-date=\"form.maxDate\"\\n            max-view=\"{{form.maxView}}\"\\n            cn-date-required=\"form.required\"\\n            placeholder=\"{{form.placeholder}}\"\\n            model-type=\"{{form.schema.type}}\"\\n            model-formatter=\"form.modelFormatter\"\\n            model-parser=\"form.modelParser\"\\n            view-formatter=\"form.viewFormatter\"\\n            view-parser=\"form.viewParser\"\\n            format-string={{form.dateFormat}}\\n            icon-class={{form.iconClass}}>\\n          </cn-datetimepicker>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    var sharedAutocompleteTpl = '\\n          <tags-input\\n            ng-show=\"form.key\"\\n            ng-model=\"$$value$$\"\\n            ng-model-options=\"form.ngModelOptions\"\\n            ng-disabled=\"form.readonly\"\\n            sf-changed=\"form\"\\n            schema-validate=\"form\"\\n            input-id=\"{{form.key.join(\\'.\\')}}\"\\n            display-property=\"{{form.displayProperty || \\'name\\'}}\"\\n            value-property=\"{{form.valueProperty}}\"\\n            placeholder=\"{{form.placeholder || \\' \\'}}\"\\n            clear-on-blur=\"true\"\\n            add-on-comma=\"false\"\\n            add-from-autocomplete-only=\"{{!form.allowNew}}\"\\n            on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\\n            on-init=\"form.onInit($tag, form, $event, $setter)\"\\n            model-type=\"{{form.getSchemaType()}}\"\\n            array-value-type=\"{{form.schema.items.type}}\"\\n            hide-tags=\"{{form.detailedList}}\"\\n            tags-style=\"{{form.selectionStyle}}\"\\n            required=\"{{form.required}}\"\\n            min-length=\"{{form.minLength}}\"\\n            allowed-tags-pattern=\".*\"\\n            dropdown-icon=\"true\"\\n            item-formatter=\"form.itemFormatter\"\\n            min-tags=\"{{form.schema.minItems}}\"\\n            max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== \\'array\\' ? 1 : 0}}\"\\n            allow-bulk=\"{{form.bulkAdd}}\"\\n            bulk-delimiter=\"{{form.bulkDelimiter}}\"\\n            bulk-placeholder=\"{{form.bulkPlaceholder}}\"\\n            show-clear-all=\"{{form.showClearAll}}\"\\n            show-button=\"true\">\\n            <auto-complete\\n              source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\\n              skip-filtering=\"{{form.titleQuery ? true : false}}\"\\n              min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\\n            </auto-complete>\\n          </tags-input>';\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete.html', '\\n        <div class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 for=\"{{form.key.join(\\'.\\')}}-input\"\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\n          ' + sharedAutocompleteTpl + '\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-autocomplete-detailed.html', '\\n        <div sf-array=\"form\"\\n             class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 for=\"{{form.key.join(\\'.\\')}}-input\"\\n                 ng-show=\"showTitle()\">{{form.title}}</label>\\n          <ol class=\"list-group cn-autocomplete-list\"\\n              ng-show=\"modelArray.length\"\\n              ng-model=\"modelArray\">\\n            <li class=\"list-group-item {{form.fieldHtmlClass}}\"\\n                ng-repeat=\"item in modelArray track by $index\">\\n              <button ng-hide=\"form.readonly || form.remove === null\"\\n                      ng-click=\"deleteFromArray($index)\"\\n                      type=\"button\" class=\"close pull-right\">\\n                <span aria-hidden=\"true\">&times;</span>\\n              </button>\\n              <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"/>\\n            </li>\\n          </ol>\\n          ' + sharedAutocompleteTpl + '\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-currency.html', '\\n        <div class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 ng-show=\"showTitle()\"\\n                 for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\n          <div class=\"{{form.fieldClass}} input-group\">\\n            <label class=\"input-group-addon\"\\n                   ng-disabled=\"form.readonly\"\\n                   for=\"{{form.key.join(\\'.\\')}}\">$</label>\\n            <input class=\"form-control\"\\n                   cn-currency-format=\"{{form.currencyFormat}}\"\\n                   cn-currency-placeholder=\"{{form.placeholder}}\"\\n                   ng-show=\"form.key\"\\n                   ng-model-options=\"form.ngModelOptions\"\\n                   ng-disabled=\"form.readonly\"\\n                   sf-changed=\"form\"\\n                   schema-validate=\"form\"\\n                   type=\"text\"\\n                   step=\"any\"\\n                   min=\"{{form.min}}\"\\n                   max=\"{{form.max}}\"\\n                   id=\"{{form.key.join(\\'.\\')}}\"\\n                   name=\"{{form.key.join(\\'.\\')}}\"\\n                   ng-model=\"$$value$$\">\\n          </div>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-radios.html', '<div class=\"form-group {{form.htmlClass}}\"\\n              ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n           <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n           <div class=\"btn-group clearfix\">\\n             <label class=\"radio radio-block\"\\n                    ng-repeat=\"item in form.titleMap\">\\n               <input type=\"radio\"\\n                      sf-changed=\"form\"\\n                      ng-disabled=\"form.readonly\"\\n                      ng-model=\"$$value$$\"\\n                      ng-model-options=\"form.ngModelOptions\"\\n                      schema-validate=\"form\"\\n                      ff-validate=\"form\"\\n                      ng-value=\"item.value\"\\n                      name=\"{{form.key.join(\\'.\\')}}\">\\n               <span class=\"radio-block-icon\" ng-if=\"item.iconClass\">\\n                 <i class=\"fa fa-{{item.iconClass}} fa-lg\"></i>\\n               </span>\\n               <span ng-bind-html=\"item.name\"></span>\\n             </label>\\n           </div>\\n           <span class=\"help-block\" sf-message=\"form.description\"></span>\\n         </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-radiobuttons.html', '\\n        <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n          <div class=\"btn-group clearfix\">\\n            <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? \\'active\\' : \\'\\'}}\"\\n                   ng-repeat=\"item in form.titleMap\">\\n              <input type=\"radio\"\\n                     class=\"{{form.fieldHtmlClass}} hide\"\\n                     sf-changed=\"form\"\\n                     ng-disabled=\"form.readonly\"\\n                     ng-model=\"$$value$$\"\\n                     ng-model-options=\"form.ngModelOptions\"\\n                     schema-validate=\"form\"\\n                     ff-validate=\"form\"\\n                     ng-value=\"item.value\"\\n                     name=\"{{form.key.join(\\'.\\')}}\">\\n              <i class=\"fa fa-{{item.value}} fa-lg\"></i>\\n              <span ng-bind-html=\"item.name\"></span>\\n            </label>\\n          </div>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-percentage.html', '\\n        <div class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 ng-show=\"showTitle()\"\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n          <div class=\"{{form.fieldClass}} input-group\">\\n            <input class=\"form-control\"\\n                   cn-percentage-format\\n                   ng-show=\"form.key\"\\n                   ng-model-options=\"form.ngModelOptions\"\\n                   ng-disabled=\"form.readonly\"\\n                   sf-changed=\"form\"\\n                   schema-validate=\"form\"\\n                   type=\"number\"\\n                   step=\"any\"\\n                   min=\"{{form.min}}\"\\n                   max=\"{{form.max}}\"\\n                   id=\"{{form.key && form.key[0]}}\"\\n                   name=\"{{form.key && form.key[0]}}\"\\n                   ng-model=\"$$value$$\">\\n             <div class=\"input-group-addon\"\\n                    ng-disabled=\"form.readonly\"\\n                    for=\"{{form.key && form.key[0]}}\">%</div>\\n          </div>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-display.html', '\\n        <div class=\"form-group cn-display{{form.htmlClass}}\">\\n          <input ng-show=\"form.key\"\\n                 class=\"form-control\"\\n                 id=\"{{form.key.join(\\'.\\')}}\"\\n                 name=\"{{form.key.join(\\'.\\')}}\"\\n                 ng-disabled=\"true\"\\n                 value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-fieldset.html', '\\n        <fieldset ng-disabled=\"form.readonly\" class=\"schema-form-fieldset {{form.htmlClass}}\">\\n          <legend ng-click=\"form.toggleCollapse(form)\"\\n                  ng-class=\"{\\'sr-only\\': !showTitle(), collapsible: form.collapsible}\"\\n                  ng-mouseenter=\"form.render = true\">\\n            <i ng-show=\"form.collapsible\"\\n               class=\"fa fa-caret-{{form.collapsed ? \\'right\\' : \\'down\\'}}\"></i>\\n            {{ form.title }}\\n          </legend>\\n          <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\\n          <div uib-collapse=\"form.collapsed\">\\n            <div ng-if=\"form.render\">\\n              <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\n            </div>\\n          </div>\\n        </fieldset>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-mediaupload.html', '\\n        <div class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 ng-show=\"showTitle()\"\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n          <media-upload ng-model=\"$$value$$\"\\n                        cn-file-type=\"form.fileType\"\\n                        cn-upload-path=\"form.uploadPath\"\\n                        cn-data=\"form.data\"\\n                        cn-preview-path=\"form.previewPath\"\\n                        cn-model-value-key=\"form.modelValueKey\"\\n                        ng-model-options=\"form.ngModelOptions\"\\n                        sf-changed=\"form\"\\n                        schema-validate=\"form\"\\n                        ff-form=\"form\"\\n                        class=\"clearfix\">\\n          </media-upload>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n       </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-csvupload.html', '\\n        <div class=\"form-group {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 ng-show=\"showTitle()\"\\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\\n          <csv-upload ng-model=\"$$value$$\"\\n                        cn-upload-path=\"form.uploadPath\"\\n                        ng-model-options=\"form.ngModelOptions\"\\n                        sf-changed=\"form\"\\n                        schema-validate=\"form\"\\n                        ff-form=\"form\"\\n                        class=\"clearfix\">\\n          </csv-upload>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n       </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-reusable.html', '\\n        <div class=\"form-group cn-reusable {{form.htmlClass}}\"\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\n          <label class=\"control-label\"\\n                 ng-show=\"showTitle()\"\\n                 for=\"{{form.key.join(\\'.\\')}}\">{{form.title}}</label>\\n          <cn-select-or\\n            ng-show=\"form.key\"\\n            select-from=\"form.library\"\\n            ng-model=\"$$value$$\"\\n            ng-model-options=\"form.ngModelOptions\"\\n            sf-changed=\"form\"\\n            schema-validate=\"form\"\\n            ff-form=\"form\"\\n            directiveId=\"form.directiveId\"\\n            item-template=\"form.itemTemplate\"\\n            toggle-text=\"form.toggleText\"\\n            disabled=\"form.readonly\"\\n            view=\"form.view\">\\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\\n          </cn-select-or>\\n          <p ng-if=\"form.loadMore && form.view === \\'list\\'\">\\n            <a ng-click=\"form.loadMore()\"\\n               class=\"btn btn-default btn-block\">Load More</a>\\n          </p>\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\n        </div>');\n\n    $templateCache.put('app/components/cn-flex-form/forms/cn-table.html', '\\\n        <div class=\"form-group cn-ff-table {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <h6>{{form.title}}</h6>\\\n          <div class=\"row\">\\\n            <div ng-repeat=\"col in form.columns\" class=\"{{col.columnWidth}}\">\\\n              <p class=\"column-header\">{{col.columnHeader}}</p>\\\n            </div>\\\n          </div>\\\n          <div class=\"row\" ng-repeat=\"row in form.items\">\\\n            <div ng-repeat=\"col in row.items\" class=\"{{col.columnWidth}}\">\\\n              <sf-decorator form=\"col\"></sf-decorator>\\\n            </div>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        ');\n  }\n})();","(function() {\n  'use strict';\n  angular.module('cn.flex-form', [\n    'ui.router',\n    'schemaForm',\n    'ui.bootstrap.datetimepicker',\n    'cnTagsInput',\n    'cn.util'\n  ]);\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormConfig', cnFlexFormConfigProvider);\n\n  function cnFlexFormConfigProvider() {\n\n    cnFlexFormConfig.$inject = ['$stateParams'];\n\n    var ignoreParams = ['page', 'debug', 'sandbox', 'modal', 'modalId'];\n\n    return {\n      addIgnoreParam: addIgnoreParam,\n      $get: cnFlexFormConfig\n    };\n\n    ////////\n\n    function addIgnoreParam(param) {\n      ignoreParams.push(param);\n    }\n\n    function cnFlexFormConfig($stateParams) {\n      return {\n        getStateParams,\n        ignoreParams\n      };\n\n      ////////\n\n      function getStateParams() {\n        return _\n            .chain($stateParams)\n            .omit(ignoreParams)\n            .omit(function(v) {\n              return _.isUndefined(v) || _.isNull(v);\n            })\n            .value();\n      }\n    }\n\n  }\n\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('cn.flex-form')\n    .directive('cnFlexFormHeader', cnFlexFormHeader);\n\n  function cnFlexFormHeader() {\n    return {\n      restrict: 'E',\n      scope: {\n        config: '=ffHeaderConfig',\n        submit: '&ffSubmit',\n        loadOffscreen: '&ffLoadOffscreen'\n      },\n      controller: FlexFormHeader,\n      bindToController: true,\n      controllerAs: 'vm',\n      template: `\n          <div class=\"col-md-6\">\n            <h5 ng-if=\"vm.config.title.lead\">{{::vm.config.title.lead}}</h5>\n            <h1>\n              <i ng-show=\"vm.config.title.icon\" class=\"{{vm.config.title.icon}}\"/>\n              {{vm.config.title.main}}\n            </h1>\n            <h5 ng-if=\"vm.config.title.sub\">{{::vm.config.title.sub}}</h5>\n          </div>\n          <div class=\"{{vm.config.buttonContainerClass || 'page-action-btns'}}\">\n            <div class=\"btn-options\"\n                 ng-mouseover=\"vm.loadOffscreen()\">\n              <a class=\"btn btn-default-dark\"\n                 ng-if=\"vm.config.actionConfig.returnState\"\n                 ui-sref=\"{{vm.config.actionConfig.returnState}}\">\n                {{vm.config.actionConfig.returnText || 'Cancel'}}\n              </a>\n              <a class=\"btn {{vm.config.actionConfig.closeButton.style ? 'btn-'+vm.config.actionConfig.closeButton.style : 'btn-default-dark'}}\"\n                 ng-if=\"vm.config.actionConfig.closeButton\"\n                 ng-click=\"vm.config.actionConfig.closeButton.handler()\">\n                 Cancel\n              </a>\n              <span ng-repeat=\"button in vm.config.actionConfig.actions\">\n                <span ng-class=\"{'btn-group': button.options}\">\n                  <a class=\"btn {{button.style ? 'btn-'+button.style : ($index === vm.config.actionConfig.actions.length - 1 ? 'btn-primary' : 'btn-default-dark')}}\"\n                     ng-disabled=\"vm.isDisabled(button)\"\n                     ng-click=\"vm.submit({handler: button.handler})\"\n                     uib-tooltip=\"{{button.helptext}}\"\n                     uib-tooltip-placement=\"bottom\"\n                     ng-bind-html=\"button.text || 'Save'\">\n                  </a>\n                  <a class=\"btn {{button.style ? 'btn-'+button.style : ($index === vm.config.actionConfig.actions.length - 1 ? 'btn-primary' : 'btn-default-dark')}} dropdown-toggle\"\n                          ng-disabled=\"vm.isDisabled(button)\"\n                          ng-show=\"button.options\"\n                          data-toggle=\"dropdown\">\n                    <span class=\"caret\"></span>\n                  </a>\n                  <ul class=\"dropdown-menu\" ng-if=\"button.options\">\n                    <li ng-repeat=\"option in button.options\"\n                        ng-disabled=\"vm.isDisabled(option)\">\n                      <a ng-click=\"vm.submit({handler: option.handler})\"\n                         ng-bind-html=\"option.text\">\n                      </a>\n                    </li>\n                  </ul>\n                </span>\n              </span>\n            </div>\n            <p class=\"data-updated-at text-right\"\n               id=\"data-updated-at\"\n               ng-hide=\"vm.config.noData\">\n              <a ng-click=\"vm.updateData()\">Update Data</a>\n            </p>\n          </div>`\n    };\n  }\n\n  FlexFormHeader.$inject = ['$scope'];\n  function FlexFormHeader($scope) {\n    var vm = this;\n\n    vm.updateData = updateData;\n    vm.isDisabled = isDisabled;\n\n    ///////////\n\n    function updateData() {\n      console.log('updateData:', updateData);\n      $scope.$emit('ffRefreshData');\n    }\n\n    function isDisabled(btnConfig) {\n      if(vm.config.isDisabled) return vm.config.isDisabled(btnConfig);\n      return false;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n      .module('cn.flex-form')\n      .controller('FlexFormModalLoader', FlexFormModalLoader)\n      .factory('FlexFormModal', FlexFormModal);\n\n  FlexFormModalLoader.$inject = [\n    'FlexFormModal', '$state', '$rootScope', '$stateParams'\n  ];\n  function FlexFormModalLoader(FlexFormModal, $state, $rootScope, $stateParams) {\n\n    const vm = this;\n\n    activate();\n\n    //////////\n\n    function activate() {\n      FlexFormModal\n        .open(vm)\n        .then(({ modal, options: { onDismiss } }) => {\n          vm.modal = modal;\n          vm.modal.result.finally(goBack);\n          if(onDismiss) vm.modal.result.catch(() => onDismiss($stateParams.restParams));\n          vm.dismissEvent = $rootScope.$on('$stateChangeStart', dismissModal);\n        });\n    }\n\n    function goBack() {\n      if(!$state.transition) {\n        $state.go('^');\n      }\n    }\n\n    function dismissModal() {\n      console.log('dismissModal');\n      vm.dismissEvent();\n      vm.modal.dismiss();\n    }\n  }\n\n  FlexFormModal.$inject = ['cnFlexFormModalLoaderService', '$uibModal', '$stateParams'];\n  function FlexFormModal(cnFlexFormModalLoaderService, $uibModal, $stateParams) {\n\n    return { open };\n\n    ////////////\n    \n    function open() {\n      return (\n        cnFlexFormModalLoaderService\n          .getMapping($stateParams.modal)\n          .then(({ state, options }) => ({\n            modal: $uibModal.open(state),\n            options \n          }))\n      );\n    }\n\n  }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormModalLoaderService', cnFlexFormModalLoaderServiceProvider);\n\n  const modalMap = {};\n  const promiseMap = {};\n  \n  function getPromises(state) {\n    if(promiseMap[state]) return promiseMap[state];\n\n    const promise = {};\n    promiseMap[state] = promise;\n    return promise;\n  }\n\n  function getPromise(state, id, $q) {\n    const promises = getPromises(state);\n    if(promises[id]) return promises[id];\n\n    const promise = $q.defer();\n    promises[id] = promise;\n    return promise;\n  }\n\n  function cnFlexFormModalLoaderServiceProvider() {\n    parent.$inject = ['$stateParams', '$q'];\n\n    return {\n      addMapping,\n      $get: cnFlexFormModalLoaderService\n    };\n\n    ////////////\n\n    function addMapping(state, def) {\n      def.resolve = { parent };\n      modalMap[state] = def;\n    }\n\n    function parent($stateParams, $q) {\n      return (\n        getPromise($stateParams.modal, $stateParams.modalId, $q)\n        .promise\n        .then(({ parent }) => parent)\n      );\n    }\n  }\n\n  cnFlexFormModalLoaderService.$inject = ['$stateParams', '$q'];\n\n  function cnFlexFormModalLoaderService($stateParams, $q) {\n\n    return {\n      getMapping,\n      resolveMapping\n    };\n\n    /////////////\n\n    function resolveMapping(state, id, parent, options = {}) {\n      const { scope } = options;\n      if(scope) {\n        scope.options = scope.options || {};\n        scope.options.destroyStrategy = 'retain';\n        modalMap[state].scope = scope;\n      }\n      const d = getPromise(state, id, $q);\n      d.resolve({ parent, options });\n      return d.promise;\n    }\n\n    function getMapping(state) {\n      const d = $q.defer();\n      getPromise($stateParams.modal, $stateParams.modalId, $q)\n        .promise\n        .then(({ parent, options }) => {\n          d.resolve({ state: modalMap[state], options });\n          return parent;\n        });\n      return d.promise;\n    }\n  }\n\n})();\n","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormTypes', cnFlexFormTypesProvider);\n\n  function cnFlexFormTypesProvider() {\n\n    var fieldTypeRegister = [{\n      condition: field => field.type === 'hidden',\n      type: 'hidden'\n    }, {\n      condition: field => field.type.includes('radios'),\n      type: 'cn-radios'\n    }, {\n      condition: field => field.type.includes('radiobuttons'),\n      type: 'cn-radiobuttons'\n    }, {\n      condition: field => field.type.includes('autocomplete') || field.titleMap || field.titleMapResolve || field.titleMapQuery,\n      type: 'cn-autocomplete'\n    }, {\n      condition: field => field.type === 'cn-datetimepicker' || field.type === 'datetime-local' || field.type === 'time-minutes',\n      type: 'cn-datetimepicker'\n    }, {\n      condition: field => field.type === 'help',\n      type: 'help'\n    }, {\n      condition: field => field.type.includes('display'),\n      type: 'cn-display'\n    }, {\n      condition: field => field.schema && field.schema.format && field.schema.format.includes('currency'),\n      type: 'cn-currency'\n    }, {\n      condition: field => field.schema && field.schema.format === 'percentage',\n      type: 'cn-percentage'\n    }, {\n      condition: field => field.type === 'toggle' || field.type === 'boolean',\n      type: 'cn-toggle'\n    }, {\n      condition: field => field.type === 'mediaupload',\n      type: 'cn-mediaupload'\n    }, {\n      condition: field => field.type === 'csvupload',\n      type: 'cn-csvupload'\n    }, {\n      condition: field => field.type === 'reusable',\n      type: 'cn-reusable'\n    }, {\n      condition: field => field.type === 'table',\n      type: 'cn-table'\n    }, {\n      condition: field => field.type === 'array',\n      type: 'array'\n    }];\n\n    return {\n      registerFieldType: registerFieldType,\n      $get: cnFlexFormTypes\n    };\n\n    ////////\n\n    function registerFieldType(fieldType) {\n      fieldTypeRegister.unshift(fieldType);\n    }\n\n    function cnFlexFormTypes() {\n      return {\n        fieldTypeRegister: fieldTypeRegister,\n        getFieldType: getFieldType\n      };\n\n      /////////\n\n      function getFieldType(field) {\n        for(var i = 0, l = fieldTypeRegister.length; i < l; i++) {\n          if(fieldTypeRegister[i].condition(field)) {\n            return fieldTypeRegister[i].type;\n          }\n        }\n        return field.type || field.schema && field.schema.type;\n      }\n    }\n\n  }\n\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .directive('ffValidate', ffValidate);\n\n  function ffValidate() {\n    return {\n      restrict: 'A',\n      scope: { form: '=ffValidate' },\n      require: 'ngModel',\n      link: link\n    };\n  }\n\n  function link($scope, elem, attrs, ngModel) {\n    //console.log('$scope, ngModel:', $scope.form, ngModel);\n    if($scope.form && $scope.form.required) {\n      $scope.$watch(function() { return ngModel.$viewValue; }, function(value) {\n        // override schemaForm validation\n        ngModel.$setValidity('schemaForm', true);\n        ngModel.$setValidity('tv4-302', value);\n      });\n    }\n  }\n})();","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .directive('cnFlexForm', cnFlexForm);\n\n  function cnFlexForm() {\n    return {\n      restrict: 'E',\n      template: '\\\n        <div ng-if=\"vm.showForm()\">\\\n          <ng-form name=\"{{vm.formName}}\"\\\n                sf-schema=\"vm.config.schema.schema\"\\\n                sf-form=\"vm.form\"\\\n                sf-model=\"vm.model\"></ng-form>\\\n          <!-- debug panel to display model -->\\\n          <section ng-if=\"vm.debug\"><pre pretty-json=\"vm.model\"></pre></section>\\\n        </div>\\\n      ',\n      scope: {\n        config: '=ffConfig',\n        model: '=ffModel',\n        formIndex: '=ffFormIndex',\n        formName: '=ffFormName',\n        delayForm: '=ffDelayForm',\n        cleanupEvent: '=ffCleanupEvent'\n      },\n      controller: FlexForm,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  FlexForm.$inject = ['cnFlexFormService', '$scope', '$location'];\n  function FlexForm(cnFlexFormService, $scope, $location) {\n    var vm = this;\n    vm.service = undefined;\n    vm.events = [];\n\n    vm.activate = activate;\n    vm.cleanup = cleanup;\n    vm.process = process;\n    vm.showForm = showForm;\n\n    vm.events.push($scope.$watch(function() { return vm.config.schema; }, vm.process));\n\n    vm.activate();\n\n    $scope.$on(vm.cleanupEvent || '$destroy', vm.cleanup);\n\n    //////////\n\n    function activate() {\n      //console.log('vm.formName:', vm.formName);\n      if(angular.isNumber(vm.formIndex)) {\n        vm.form = vm.config.schema.forms[vm.formIndex].form;\n      }\n      else {\n        vm.form = vm.config.schema.form;\n      }\n\n      // debug\n      if($location.search().debug) {\n        vm.debug = true;\n      }\n    }\n\n    function process(cur, prev) {\n      //console.log('process:', cur, prev);\n      if(vm.form) {\n        if(!vm.service) {\n          vm.service = cnFlexFormService(vm.config.schema, vm.model, {\n            formCtrl: vm.config.formCtrl,\n            getSchema: vm.config.getSchema,\n            updateSchema: updateSchema\n          });\n        }\n        else {\n          console.log('vm.service.isCompiled():', vm.service.isCompiled());\n          vm.service.compile(vm.config.schema, vm.model);\n        }\n        //$scope.$broadcast('schemaFormRedraw');\n      }\n    }\n\n    function showForm() {\n      //console.log('showForm:', vm.delayForm, vm.formName);\n      return !vm.delayForm && vm.service && vm.service.isCompiled();\n    }\n\n    function updateSchema(schema) {\n      vm.config.schema = schema;\n      vm.activate();\n    }\n\n    function cleanup() {\n      _.each(vm.events, function(listener) {\n        listener();\n      });\n      vm.service.cleanup();\n    }\n\n  }\n})();","(function() {\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormRoutes', cnFlexFormRoutesProvider)\n      .config(cnFlexFormRoutes);\n\n  cnFlexFormRoutesProvider.$inject = ['$stateProvider'];\n  function cnFlexFormRoutesProvider($stateProvider) {\n    var provider = {\n      addStates: addStates,\n      $get: $get\n    };\n\n    return provider;\n\n    ////////////\n\n    function $get() {\n      // nothing to do here, but required\n    }\n\n    function addStates({ permissions, name }) {\n      const shared = {\n        controller: 'FlexFormModalLoader',\n        controllerAs: 'vm',\n        permissions\n      };\n      $stateProvider\n          .state(`${name}.page.modal`, {\n            url: '/~:modal/:modalId',\n            ...shared\n          })\n          .state(`${name}.page.modalParams`, {\n            url: '/~:modal/:modalId/:restParams',\n            ...shared\n          });\n    }\n  }\n\n  cnFlexFormRoutes.$inject = ['$stateProvider'];\n  function cnFlexFormRoutes($stateProvider) {\n\n    $stateProvider\n        .state('flex-form-sandbox', {\n          url: '/flex-form/sandbox',\n          controller: 'FlexFormSandbox',\n          controllerAs: 'vm',\n          templateUrl: 'app/components/cn-flex-form/sandbox.html'\n        });\n  }\n\n})();\n","(function() {\n  'use strict';\n  angular\n      .module('cn.flex-form')\n      .provider('cnFlexFormService', cnFlexFormServiceProvider);\n\n  var fieldTypeHandlers = {\n    'cn-radios': 'processRadios',\n    'cn-radiobuttons': 'processRadiobuttons',\n    'cn-autocomplete': 'processSelect',\n    'cn-datetimepicker': 'processDate',\n    'help': 'processHelp',\n    'cn-display': 'processDisplay',\n    'cn-currency': 'processCurrency',\n    'cn-percentage': 'processPercentage',\n    'cn-mediaupload': 'processMediaUpload',\n    'cn-csvupload': 'processCsvUpload',\n    'cn-reusable': 'processReusable',\n    'cn-toggle': 'processToggle',\n    'cn-table': 'processTable',\n    'array': 'processArray'\n  };\n\n  cnFlexFormServiceProvider.$inject = [\n    'schemaFormDecoratorsProvider',\n    'cnFlexFormTypesProvider'\n  ];\n\n  function cnFlexFormServiceProvider(schemaFormDecoratorsProvider,\n                                     cnFlexFormTypesProvider) {\n    return {\n      registerField,\n      $get: CNFlexFormService\n    };\n\n    //////////\n\n    function registerField(fieldType) {\n      if(fieldType.condition) {\n        cnFlexFormTypesProvider.registerFieldType({\n          condition: fieldType.condition,\n          type: fieldType.type\n        });\n      }\n\n      if(fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n\n      if(fieldType.templateUrl) {\n        schemaFormDecoratorsProvider.addMapping(\n            'bootstrapDecorator',\n            fieldType.type,\n            fieldType.templateUrl\n        );\n        schemaFormDecoratorsProvider.createDirective(\n            fieldType.type,\n            fieldType.templateUrl\n        );\n      }\n    }\n  }\n\n  CNFlexFormService.$inject = [\n    'Api', '$parse', 'cnFlexFormConfig', 'cnFlexFormTypes', 'sfPath',\n    '$interpolate', '$rootScope', '$timeout', 'cnUtil', '$stateParams'\n  ];\n\n  function CNFlexFormService(Api, $parse, cnFlexFormConfig, cnFlexFormTypes, sfPath,\n                             $interpolate, $rootScope, $timeout, cnUtil, $stateParams) {\n\n    var services = [];\n    var prototype = {\n      compile,\n      addArrayCopy,\n      addToDataCache,\n      addToFormCache,\n      broadcastErrors,\n      buildError,\n      cleanup,\n      deregisterHandlers,\n      deregisterArrayHandlers,\n      getArrayCopies,\n      getArrayCopiesFor,\n      getArrayScopes,\n      getFromDataCache,\n      getFromFormCache,\n      getKey,\n      getSchema,\n      handleResolve,\n      initArrayCopyWatch,\n      initModelWatch,\n      initSchemaParams,\n      isCompiled,\n      onModelWatch,\n      parseCondition,\n      parseExpression,\n      processArray,\n      processDefault,\n      processDisplay,\n      processField,\n      processFieldset,\n      processFieldWatch,\n      processComponent,\n      processConditional,\n      processCurrency,\n      processPercentage,\n      processDate,\n      processHelp,\n      processRadios,\n      processRadiobuttons,\n      processReusable,\n      processSchema,\n      processSelectDisplay,\n      processResolve,\n      processSection,\n      processSelect,\n      processTable,\n      processTemplate,\n      processToggle,\n      processUpdatedSchema,\n      processMediaUpload,\n      processCsvUpload,\n      registerArrayHandlers,\n      registerHandler,\n      registerResolve,\n      reprocessField,\n      setArrayIndex,\n      setupConfig,\n      setupArraySelectDisplay,\n      setupSelectDisplay,\n      setupSchemaRefresh\n    };\n\n    function CNFlexFormConstructor(schema, model, config) {\n      var service;\n      if(services.length) {\n        for(var i = 0, l = services.length; i < l; i++) {\n          if(services[i].model === model) {\n            service = services[i];\n            service.compile(schema, model, config);\n            break;\n          }\n        }\n      }\n      if(!service) {\n        service = new CNFlexForm(schema, model, config);\n        services.push(service);\n      }\n      return service || new CNFlexForm(schema, model, config);\n    }\n\n    function CNFlexForm(schema, model, config) {\n\n      if($stateParams.debug) {\n        window.services = services;\n      }\n\n      this.arrayCopies = {};\n      this.arrayListeners = {};\n      this.dataCache = {};\n      this.defaults = {};\n      this.errors = [];\n      this.events = [];\n      this.formCache = {};\n      this.listeners = {};\n      this.resolveRegister = {};\n      this.model = model;\n      this.updates = 0;\n\n      this.params = cnFlexFormConfig.getStateParams();\n\n      this._ = _;\n\n      this.compile(schema, model, config);\n    }\n\n    _.extend(CNFlexForm.prototype, prototype);\n    _.extend(CNFlexFormConstructor, prototype);\n\n    return CNFlexFormConstructor;\n\n    //////////////\n\n    function compile(schema, model, config) {\n      var service = this;\n\n      service.schema = schema;\n      service.model = model;\n\n      if(!service.isCompiled()) {\n        service.setupConfig(config);\n\n        if(schema.forms) {\n          _.each(schema.forms, function(form) {\n            _.each(form.form, service.processField.bind(service));\n          });\n        }\n        else {\n          _.each(schema.form, service.processField.bind(service));\n        }\n\n        service.initModelWatch();\n        service.initArrayCopyWatch();\n        service.isCompiled(true);\n      }\n\n      service.broadcastErrors();\n    }\n\n    function isCompiled(setValue) {\n      var service = this;\n      if(setValue) {\n        service.schema.compiled = setValue;\n      }\n      return service.schema && service.schema.compiled;\n    }\n\n    function setupConfig(config) {\n      var service = this;\n      if(config) {\n        if(config.formCtrl) service.formCtrl = config.formCtrl;\n        if(config.updateSchema) service.updateSchema = config.updateSchema;\n        if(config.getSchema) service.getSchemaForm = service.setupSchemaRefresh(config.getSchema);\n      }\n    }\n\n    function processSchema(field) {\n      var service = this,\n          schema = field.schema;\n\n      if(schema) {\n        field.getSchemaType = function() {\n          return _.isArray(schema.type) ? _.first(schema.type) : schema.type;\n        };\n\n        service.processDefault(field);\n      }\n    }\n\n    function processDefault(field) {\n      var service = this,\n          schema = field.schema;\n\n      if(schema.default) {\n        var key = service.getKey(field.key);\n        // if schemaUpdate hasn't been triggered, let schemaForm directive handle defaults\n        if(service.updates) {\n          if(key.includes && key.includes('[]')) return;\n          var model = service.parseExpression(field.key, service.model);\n          var modelValue = model.get();\n          // if there's an existing default and it's the same as the current value\n          // update the current value to the new default\n          if(_.isTrulyEmpty(modelValue) || angular.equals(modelValue, service.defaults[key])) {\n            model.set(schema.default);\n          }\n        }\n        service.defaults[key] = angular.copy(schema.default);\n      }\n\n      if(schema.format === 'url' && !field.validationMessage) {\n        if(!field.type) field.type = 'url';\n        field.validationMessage = 'Must be a valid url (https://...)';\n      }\n    }\n\n    function processFieldset(fieldset) {\n      var service = this;\n\n      fieldset.type = 'cn-fieldset';\n      fieldset.items.forEach(service.processField.bind(service));\n\n      if(fieldset.collapsible) {\n        fieldset.toggleCollapse = (fieldset) => {\n          if(fieldset.collapsible) {\n            fieldset.collapsed = !fieldset.collapsed;\n          }\n        };\n\n        fieldset.render = !fieldset.collapsed;\n      }\n      else {\n        fieldset.render = true;\n      }\n    }\n\n    function processField(field) {\n      var service = this;\n\n      if (field.selectDisplay) {\n        service.processSelectDisplay(field, service.getSchema(field.key));\n      }\n\n      if(field.type === 'fieldset') {\n        service.processFieldset(field);\n      }\n      else {\n        if(!field._ogKeys) {\n          field._ogKeys = _.without(_.keys(field), 'key', 'htmlClass');\n        }\n\n        var key = service.getKey(field.key);\n\n        if(field.key) {\n          service.addToFormCache(field, key);\n          field.schema = service.getSchema(key);\n\n          if(/*!field.immutable && */field.schema) {\n            if(field.schema.description) field.description = field.schema.description;\n            if(field.readonly && !field.schema.readonly) field.readonly = false;\n            if(field.schema.type === 'array' && !('showClearAll' in field)) field.showClearAll = true;\n          }\n        }\n\n        service.processSchema(field);\n\n        if(!field.type) field.type = field.getSchemaType && field.getSchemaType();\n\n        if(field.resolve) service.processResolve(field);\n\n        if(field.watch) service.processFieldWatch(field);\n\n        if(field.type === 'section' || field.type === 'tabarray') {\n          service.processSection(field);\n        }\n        else if(field.type === 'component') {\n          service.processComponent(field);\n        }\n        else {\n          var fieldType = cnFlexFormTypes.getFieldType(field);\n          var handler = fieldTypeHandlers[fieldType];\n          if(_.isString(handler)) {\n            service[handler](field);\n          }\n          else if(_.isFunction(handler)) {\n            handler.call(service, field);\n          }\n\n          if(field.conditionals) {\n            service.processConditional(field);\n          }\n          if(field.updateSchema) {\n            service.registerHandler(field, null, field.updateSchema);\n          }\n\n          if (_.find(service.errors, { key })) {\n            service.errors = _.reject(service.errors, {key: key});\n            $rootScope.$broadcast('schemaForm.error.' + key, 'schemaForm', true);\n            $rootScope.$broadcast('schemaForm.error.' + key, 'serverValidation', true);\n          }\n          \n          if (field.error) {\n            service.errors.push(service.buildError(field));\n            if (_.isEmpty(field.ngModelOptions)) {\n              field.ngModelOptions = {\n                allowInvalid: true\n              };\n            } else {\n              field.ngModelOptions.allowInvalid = true;\n            }\n          }\n        }\n      }\n    }\n\n    function getKey(key) {\n      if(_.isArray(key)) {\n        key = _.reduce(key, function(total, next) {\n          if(/^(\\d*)$/.test(next)) {\n            return total + '[' + next + ']';\n          }\n          return total + '.' + next;\n        });\n      }\n      return key;\n    }\n\n\n    function getSchema(key, depth) {\n      var service = this;\n      if(!key) return;\n\n      key = service.getKey(key);\n\n      //key = key.split('.');\n      //key = key\n      //    .replace(/arrayIndex/g, '')\n      //    .replace(/(\\[')([^.]+)\\.([^.]+)('])/g, '.$2%ff_dt%$3')\n      //    .replace(/\\./g, '%ff_sp%')\n      //    .replace(/%ff_dt%/g, '.')\n      //    .split('%ff_sp%');\n      key = sfPath.parse(key);\n      depth = depth || service.schema.schema.properties;\n\n      // why do we do this? it's breaking stuff\n      //if (_.last(key) === '') key.pop();\n\n      let first, next;\n\n      while(key.length > 1) {\n        first = key[0];\n        next = key[1];\n        if(/^\\d*$/.test(next)) {\n          if(key.length === 2) {\n            depth = depth = depth[key.shift()];\n          }\n          else {\n            depth = depth[key.shift()].items.properties;\n            key.shift();\n          }\n        }\n        else {\n          depth = depth[key.shift()].properties;\n        }\n      }\n\n      // if array item\n      first = key[0] || 'items';\n\n      return depth[first];\n    }\n\n    function processResolve(field) {\n      var service = this;\n\n      _.each(field.resolve, function(dataProp, fieldProp) {\n        service.handleResolve(field, fieldProp, dataProp);\n\n        var resolveType = dataProp.match(/^(schema\\.data\\.|model\\.)(\\w+)/);\n\n        if(resolveType) {\n          if(resolveType[1] === 'schema.data.') {\n            service.registerResolve(field, fieldProp, resolveType[2]);\n          }\n          else if(resolveType[1] === 'model.') {\n            service.registerHandler(resolveType[2], function() {\n              service.handleResolve(field, fieldProp, dataProp);\n            });\n          }\n        }\n      });\n\n      return field;\n    }\n\n    function handleResolve(field, fieldProp, exp) {\n      var service = this;\n      var data = service.parseExpression(exp).get();\n      // if we're resolving from model but defaults haven't been applied yet, resolve from default itself\n      if(!data && exp.indexOf('model.') === 0) {\n        data = service.getSchema(exp.replace('model.', '')).default;\n      }\n      if (data && data.cursor) {\n        field.loadMore = function() {\n          var dataProp = exp.match(/schema\\.data\\.(.+)/)[1];\n          service.refreshSchema(`data:${dataProp}:${data.cursor}`);\n        };\n      } else {\n        delete field.loadMore;\n      }\n      field[fieldProp] = (data && data.data) ? data.data : data;\n    }\n\n    function registerResolve(field, fieldProp, dataProp) {\n      var service = this;\n\n      let fieldKey = service.getKey(field.key);\n      service.resolveRegister[dataProp] = service.resolveRegister[dataProp] || {};\n\n      let register = service.resolveRegister[dataProp];\n      register[fieldKey] = register[fieldKey] || [];\n      register[fieldKey].push({\n        field: field,\n        prop: fieldProp\n      });\n    }\n\n    function processConditional(field) {\n      var service = this;\n      _.each(field.conditionals, (condition, key) => {\n        let handler = (val, prev) => {\n          field[key] = service.parseCondition(condition);\n          if (key === 'required') {\n            $rootScope.$broadcast('schemaFormValidate');\n          }\n        };\n        field\n            .conditionals[key]\n            .match(/model\\.([^\\s]+)/g)\n            .map(path => path.match(/model\\.([^\\s]+)/)[1])\n            .forEach(key => {\n              service.registerHandler(key, handler);\n            });\n        handler();\n      });\n    }\n\n    function processFieldWatch(field) {\n      var service = this,\n          schema = field.schema;\n\n      field.watch = _.isArray(field.watch) ? field.watch : [field.watch];\n\n      _.each(field.watch, function(watch) {\n        if(watch.resolution) {\n          let condition = watch.condition;\n          let resolution = watch.resolution;\n          let handler;\n\n          if(_.isFunction(resolution)) {\n            handler = function(cur, prev) {\n              if(!condition || service.parseCondition(condition)) {\n                resolution(cur, prev);\n              }\n            };\n          }\n          else {\n            var adjustment = {};\n\n            adjustment.date = resolution.match(/\\+ ?(\\d+) days/);\n\n            if(adjustment.date) {\n              adjustment.date = adjustment.date[1];\n              resolution = resolution.replace(adjustment.date, '').trim();\n            }\n            else {\n              adjustment.math = resolution.match(/(\\+|\\-|\\/|\\*) ?(\\S+)/);\n\n              if(adjustment.math) {\n                adjustment.operator = {\n                  '+': 'add',\n                  '-': 'subtract',\n                  '*': 'multiply',\n                  '/': 'divide'\n                }[adjustment.math[1]];\n\n                adjustment.adjuster = service.parseExpression(adjustment.math[2]);\n              }\n            }\n\n            resolution = resolution.match(/(\\S+) ?= ?(\\S+)/);\n\n            handler = (val, prev, key, trigger) => {\n              let curCondition = condition && replaceArrayIndex(condition, key);\n              let updatePath = replaceArrayIndex(resolution[1], key);\n              let fromPath = replaceArrayIndex(resolution[2], key);\n\n              let update = service.parseExpression(updatePath);\n\n              // avoid loop where two watches keep triggering each other\n              if(trigger === update.path().key) return;\n              trigger = update.path().key;\n\n              let from = service.parseExpression(fromPath);\n\n              if(!condition || service.parseCondition(curCondition)) {\n                if(adjustment.date) {\n                  update.set(moment(from.get()).add(adjustment.date, 'days').toDate());\n                }\n                else if(adjustment.math) {\n                  //var result = _[adjustment.operator](from.get(), adjustment.adjuster.get());\n                  //let result = eval(from.get() + adjustment.math[1] + adjustment.adjuster.get());\n                  let result = $parse(from.get() + adjustment.math[1] + adjustment.adjuster.get())();\n                  schema = schema || field.items && (field.items[0].schema || (field.items[0].items && field.items[0].items[0].schema));\n                  if(field.type === 'cn-currency') {\n                    let p = schema && schema.format === 'currency-dollars' ? 2 : 0;\n\n                    if(adjustment.math[1] === '*') {\n                      result = _.floor(result, p);\n                    }\n                    else if(adjustment.math[1] === '/') {\n                      result = _.ceil(result, p);\n                    }\n                    else {\n                      result = _.round(result, p);\n                    }\n                  }\n                  //service.listeners[update.path().key].prev = result;\n                  if(service.listeners[trigger]) {\n                    service.listeners[trigger].trigger = key;\n                  }\n                  update.set(result || 0);\n                }\n                else {\n                  update.set(from.get());\n                }\n              }\n            };\n          }\n\n          service.registerHandler(field, handler, field.updateSchema, watch.initialize);\n        }\n      });\n    }\n\n    function parseCondition(condition) {\n      let service = this;\n      if (condition.startsWith(\"_\")) {\n        let exp = /^_\\.(.*?)\\((.*?),[\\s(]*(.*?)\\)?\\s*=>[{\\s]*(?:return)?(.*?)\\}?\\)$/;\n        let [, fn, list, predicateParams, predicateBody] = condition.match(exp);\n        return _[fn]($parse(list)(service), generatePredicate(predicateParams, predicateBody));\n      } else {\n        return $parse(condition)(service);\n      }\n    }\n\n    function generatePredicate(params, body) {\n      return (...args) =>\n        $parse(body)(params\n                .replace(/\\s/g, '')\n                .split(',')\n                .reduce((acc, cur, i) => { acc[cur] = args[i]; return acc; }, {})\n              );\n    }\n\n    function registerHandler(key, handler, updateSchema, runHandler) {\n      var service = this;\n\n      // if field is passed instead of key\n      if(_.isObject(key) && !_.isArray(key)) {\n        if(!key.key && key.items) {\n          _.each(key.items, function(field) {\n            service.registerHandler(field, handler, field.updateSchema);\n          });\n          return;\n        }\n        else {\n          key = key.key;\n        }\n      }\n\n      key = service.getKey(key);\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\n      if(arrMatch) {\n        service.registerArrayHandlers(arrMatch[1], arrMatch[2], handler, updateSchema, runHandler);\n        return;\n      }\n\n      var cur = service.parseExpression(key, service.model).get();\n      let defaultValue = _.get(service.getSchema(key), 'default');\n\n      if(!service.listeners[key]) {\n        var prev = _.isUndefined(cur) ? angular.copy(defaultValue) : angular.copy(cur);\n        service.listeners[key] = {\n          handlers: [],\n          updateSchema: updateSchema,\n          prev: prev\n        };\n      }\n\n      if(handler) {\n        service.listeners[key].handlers.push(handler);\n        if(runHandler) handler(cur, null, key);\n      }\n    }\n\n    function registerArrayHandlers(arrKey, fieldKey, handler, updateSchema, runHandler) {\n      var service = this;\n      var onArray = function(cur, prev, reorder) {\n\n        if(!prev && prev !== 0 && (cur | 0) < 1) return;\n        var i, l, key;\n\n        if(prev > cur || reorder) {\n          var lastKey = fieldKey ?\n            arrKey + '[' + (prev - 1) + ']' + '.' + fieldKey :\n            arrKey + '[' + (prev - 1) + ']';\n\n          // only deregister handlers once each time an element is removed\n          if (service.listeners[lastKey]) {\n            for(i = 0, l = prev; i < l; i++) {\n              key = fieldKey ?\n                arrKey + '[' + i + ']' + '.' + fieldKey :\n                arrKey + '[' + i + ']';\n\n              service.deregisterHandlers(key);\n            }\n          }\n          for(i = 0, l = cur; i < l; i++) {\n            key = fieldKey ?\n              arrKey + '[' + i + ']' + '.' + fieldKey :\n              arrKey + '[' + i + ']';\n\n            service.registerHandler(key, handler, updateSchema);\n            //no need to call if just reregisering handlers\n            //if(runHandler) handler(null, null, key);\n          }\n        }\n        else if(cur > (prev || 0)) {\n          for(i = prev | 0, l = cur; i < l; i++) {\n            key = fieldKey ?\n              arrKey + '[' + i + ']' + '.' + fieldKey :\n              arrKey + '[' + i + ']';\n\n            service.registerHandler(key, handler, updateSchema, runHandler);\n            //if(runHandler) handler(null, null, key);\n          }\n        }\n      };\n\n      var arrVal = service.parseExpression(arrKey, service.model).get();\n      _.each(arrVal, function(field, i) {\n        var key = fieldKey ?\n          arrKey + '[' + i + ']' + '.' + fieldKey :\n          arrKey + '[' + i + ']';\n\n        service.registerHandler(key, handler, updateSchema);\n        if(runHandler) handler(null, null, key);\n      });\n\n      if(service.arrayListeners[arrKey + '.length']) {\n        service.arrayListeners[arrKey + '.length'].handlers.push(onArray);\n      } else {\n        service.arrayListeners[arrKey + '.length'] = {\n          handlers: [onArray],\n          prev: arrVal ? arrVal.length : 0\n        };\n      }\n    }\n\n    function deregisterHandlers(key) {\n      var service = this;\n\n      key = service.getKey(key);\n\n      var arrMatch = key.match(/([^[\\]]*)\\[]\\.?(.*)/);\n\n      if(arrMatch) {\n        service.deregisterArrayHandlers(arrMatch[1], arrMatch[2]);\n        return;\n      }\n\n      if(service.listeners[key]) service.listeners[key].handlers = [];\n    }\n\n    function deregisterArrayHandlers(arrKey, fieldKey) {\n      var service = this;\n\n      service.parseExpression(arrKey, service.model).get().forEach((item, i) => {\n        fieldKey ?\n          service.deregisterHandlers(`${arrKey}[${i}].${fieldKey}`) :\n          service.deregisterHandlers(`${arrKey}[${i}]`);\n      });\n    }\n\n    function initModelWatch() {\n      var service = this;\n      if(service.watching) return;\n      if(service.modelWatch) service.modelWatch();\n\n      service.modelWatch = $rootScope.$watch(\n          function() { return service.model; },\n          service.onModelWatch.bind(service),\n          true\n      );\n\n      service.initSchemaParams();\n      service.watching = true;\n      service.firstUpdate = true;\n    }\n\n    function onModelWatch(cur, prev) {\n      var service = this;\n      // we always run through the listeners on the first update because angular seems to mess up\n      // when the defaults are applied and uses the same object for both cur and prev\n      if(service.firstUpdate || !angular.equals(cur, prev)) {\n        service.firstUpdate = false;\n        cnUtil.cleanModel(service.model);\n\n        service.prevParams = angular.copy(service.params);\n        service.params = cnFlexFormConfig.getStateParams();\n\n        _.each(service.arrayListeners, (listener, key) => {\n          let val = service.parseExpression(key, service.model).get();\n          if(!angular.equals(val, listener.prev)) {\n            listener.handlers.forEach(handler => handler(val, listener.prev));\n            listener.prev = angular.copy(val);\n          }\n        });\n\n        _.each(service.listeners, (listener, key) => {\n          if(listener) {\n            let val = service.parseExpression(key, service.model).get();\n            const isInitArray = angular.equals(val, []) && !listener.prev;\n            if(!angular.equals(val, listener.prev) && !isInitArray) {\n              listener.handlers.forEach(handler => {\n                handler(val, listener.prev, key, listener.trigger);\n              });\n              listener.trigger = null;\n              listener.prev = angular.copy(val);\n            }\n            if(listener.updateSchema && !angular.isUndefined(val) && !isInitArray && val !== null) {\n              service.params[key] = val;\n            }\n          }\n        });\n\n        if(!angular.equals(service.params, service.prevParams)) {\n          if(service.model.id && !service.updates && _.isEmpty(service.prevParams)) {\n            ++service.updates;\n          }\n          else {\n            service.refreshSchema();\n          }\n        }\n      }\n    }\n\n    function initSchemaParams() {\n      var service = this;\n      _.each(service.listeners, function(listener, key) {\n        if(listener) {\n          var val = service.parseExpression(key, service.model).get();\n          if(listener.updateSchema && !angular.isUndefined(val) && val !== null) {\n            service.params[key] = val;\n          }\n        }\n      });\n    }\n\n    function initArrayCopyWatch() {\n      var service = this;\n\n      service.events.push($rootScope.$on('schemaFormPropagateScope', function(event, scope) {\n        var key = service.getKey(scope.form.key);\n        var index = key.match(/^.*\\[(\\d+)].*$/);\n\n        key = key.replace(/\\[\\d+]/g, '[]');\n        index = index && parseInt(index[1]);\n\n        if(!scope.form.condition) scope.form.condition = 'true';\n\n        service.addArrayCopy(scope, key, index);\n        scope.$emit('flexFormArrayCopyAdded', key);\n      }));\n\n      service.events.push($rootScope.$on('schemaFormDeleteScope', function(event, scope, index) {\n        var key = service.getKey(scope.form.key).replace(/\\[\\d+]/g, '[]');\n        var copies = service.getArrayCopiesFor(key);\n\n        copies.forEach((list) => {\n          list.splice(index, 1);\n        });\n\n        if(scope.form.link) {\n          var list = service.parseExpression(scope.form.link, service.model).get();\n          list.splice(index, 1);\n        }\n      }));\n    }\n\n    function addArrayCopy(form, key, index) {\n      var service = this;\n      if(!index || index < 0) index = 0;\n      if(!service.arrayCopies[key]) service.arrayCopies[key] = [];\n      service.arrayCopies[key][index] = form;\n      //service.arrayCopies[key].push(form);\n    }\n\n    function getArrayCopies(key) {\n      var service = this;\n      return _.pluck(service.getArrayScopes(key), 'form');\n    }\n\n    function getArrayCopiesFor(keyStart) {\n      const service = this;\n      keyStart += '[]';\n\n      return _.filter(service.arrayCopies, (copy, key) => key.includes(keyStart));\n    }\n\n    function getArrayScopes(key) {\n      var service = this;\n      return service.arrayCopies[key];\n    }\n\n    function addToFormCache(field, key) {\n      var service = this;\n      key = key || service.getKey(field.key);\n      if(!service.getFromFormCache(key)) service.formCache[key] = field;\n    }\n\n    function getFromFormCache(key) {\n      var service = this;\n      return service.formCache[key];\n    }\n\n    function addToDataCache(key, modelValue) {\n      var service = this;\n\n      if(key) {\n        service.dataCache[key] = modelValue;\n      }\n    }\n\n    function getFromDataCache(key) {\n      var service = this;\n\n      return service.dataCache[key];\n    }\n\n    function parseExpression(exp, depth) {\n      var service = this;\n      // if expression is specific value\n      if(!exp || /^(null|false|true|undefined|''|[0-9.]+|\\[]|\\{})$/.test(exp)) {\n        return {\n          \"get\": function() {\n            return eval(exp);\n          }\n        };\n      }\n\n      exp = service.getKey(exp);\n\n      //var key;\n      var match = exp.match(/^(model\\.)?(\\S+)$/);\n\n      // cache fucks shit up if the model changes so disabling\n      //var cached;\n\n      // return from cache if possible\n      //if(!/\\[]/.test(exp) && match && match[2]) {\n      //  if(!depth || depth === service.model) {\n      //    key = match[2];\n      //\n      //    cached = service.getFromDataCache(key);\n      //    if(cached) {\n      //      return cached;\n      //    }\n      //  }\n      //}\n\n      var modelValue = {\n        get() {\n          let path = sfPath.parse(exp);\n          let start = depth || service;\n\n          while(start && path.length > 1) {\n            start = start[path.shift()];\n          }\n\n          return start && start[path[0]];\n        },\n        getAssignable() {\n          let path = sfPath.parse(exp);\n          let progress = [];\n          let start = depth || service;\n\n          while(start && path.length > 1) {\n            let key = path.shift();\n            progress.push(key);\n            if(!start[key]) {\n              if(/^\\d?$/.test(path[0])) {\n                start[key] = [];\n              }\n              else {\n                start[key] = {};\n              }\n            }\n            start = start[key];\n          }\n\n          return {\n            obj: start,\n            key: path[0],\n            path: service.getKey(progress),\n            fullPath: service.getKey(progress.concat(path.slice(0, 1)))\n          };\n        },\n        set(val) {\n          let assignable = this.getAssignable();\n          assignable.obj[assignable.key] = val;\n          return val;\n        },\n        path() {\n          return {\n            exp: exp,\n            depth: depth,\n            key: match[2]\n          };\n        }\n      };\n\n      return modelValue;\n    }\n\n    function processArray(array) {\n      var service = this;\n      var key = service.getKey(array.key);\n\n      array.sortOptions = {\n        update: function(e, ui) {\n          let listener = service.arrayListeners[`${key}.length`];\n          listener.handlers.forEach(handler => {\n            handler(listener.prev, listener.prev, true);\n          });\n        }\n      };\n\n      service.processSection(array);\n    }\n\n    function processSection(section) {\n      var service = this;\n      _.each(section.items, service.processField.bind(service));\n    }\n\n    function processComponent(component) {\n      var service = this;\n\n      component.type = 'section';\n      component.htmlClass = 'row';\n\n      var cols = 12 / _.reject(component.items, 'hidden').length;\n\n      _.each(component.items, function(field, i) {\n        service.processField(field);\n        component.items[i] = {\n          type: 'section',\n          htmlClass: 'col-sm-' + cols,\n          items: [field]\n        };\n      });\n    }\n\n    function processCurrency(field) {\n      field.currencyFormat = {\n        'currency-dollars': 'dollars',\n        'currency-microcents': 'microcents',\n        'currency': 'cents'\n      }[field.schema.format];\n\n      field.type = 'cn-currency';\n    }\n\n    function processPercentage(field) {\n      field.type = 'cn-percentage';\n    }\n\n    function processReusable(field) {\n      var service = this;\n      field.type = 'cn-reusable';\n      field.view = field.view || 'new';\n      field.items.forEach(service.processField.bind(service));\n      field.items = [{\n        type: 'section',\n        items: field.items,\n        condition: '!model.' + service.getKey(field.key) + '.id'\n      }];\n    }\n\n    function processMediaUpload(field) {\n      var service = this;\n      field.type = 'cn-mediaupload';\n      _.each(field.data, function(dataProp, key) {\n        field.data[key] = service.parseExpression(dataProp).get();\n      });\n    }\n\n    function processCsvUpload(field) {\n      var service = this;\n      field.type = 'cn-csvupload';\n    }\n\n    function processRadios(field) {\n      field.type = 'cn-radios';\n    }\n\n    function processRadiobuttons(radios) {\n      var service = this;\n      radios.type = 'cn-radiobuttons';\n      if(radios.fullWidth) {\n        radios.btnClass = 'col-sm-' + _.divide(12, radios.titleMap.length);\n      }\n    }\n\n    function processDate(date) {\n      var service = this;\n      date.type = 'cn-datetimepicker';\n\n      if(date.schema.format === 'time-minutes') {\n        date.maxView = 'hour';\n        date.iconClass = 'fa fa-clock-o';\n\n        date.modelFormatter = val => {\n          if(!val) return;\n\n          let m = moment(val);\n\n          return _.add(_.multiply(m.hours(), 60), m.minutes());\n        };\n\n        date.modelParser = val => {\n          if(!val) return;\n\n          let d = parseInt(val);\n          let hours = _.floor(d / 60);\n          let minutes = d % 60;\n\n          return moment().startOf('day').add('hours', hours).add('minutes', minutes);\n        };\n\n        date.viewFormatter = val => {\n          if(!val) return;\n\n          return date.modelParser(val).format(date.dateFormat);\n        };\n\n        date.viewParser = val => {\n          if(!val) return;\n\n          let match = val.match(/^(\\d{1,2}):?(\\d{1,2})? (a|p)/);\n          if(!match) return;\n\n          let hours = _.add(match[1] === '12' ? 0 : match[1], match[3] === 'a' ? 0 : 12);\n          let minutes = match[2] || '00';\n\n          if(minutes.length === 1) minutes += '0';\n\n          return _.add(_.multiply(hours, 60), minutes);\n        };\n      }\n    }\n\n    function getSelectValProp(select) {\n      let isArray = select.getSchemaType() === 'array';\n      return select.valueProperty ||\n        (isArray ? select.schema.items.type : select.schema.type) !== 'object' && 'value';\n    }\n\n    function getAllowedSelectValue(select, val, titleMap) {\n      titleMap = titleMap || select.getTitleMap();\n      let valProp = getSelectValProp(select);\n      if(!valProp) return;\n\n      if(select.getSchemaType() === 'array') {\n        if(!val || !_.isArray(val)) return;\n\n        let mapVal = val.map(x => _.find(titleMap, {[valProp]: x})).filter(x => x !== undefined);\n\n        return mapVal;\n      }\n      else {\n        return _.find(titleMap, {[valProp]: val});\n      }\n    }\n\n    function processSelect(select) {\n      var service = this,\n          schema = select.schema;\n\n      if(select.titleMapResolve || select.titleMap) {\n        select.getTitleMap = function() {\n          return select.titleMap || service.schema.data[select.titleMapResolve];\n        };\n\n        select.onInit = function(val, form, event, setter) {\n          // make sure we use correct value\n          var modelValue = service.parseExpression(form.key, service.model);\n          if(event === 'tag-init') {\n            let newVal = getAllowedSelectValue(select, modelValue.get());\n            if(newVal !== undefined) setter(newVal);\n          }\n        };\n      }\n\n      if(select.titleMapQuery) {\n        var key = select.titleMapQuery.params.q;\n        select.titleQuery = function(q) {\n          var params = {};\n          if(key) {\n            params[key] = q;\n          }\n          return Api.get({\n            url: select.titleMapQuery.url,\n            params: params\n          });\n        };\n\n        // wrap in string so returns truthy when compiled, but converted to number within directive\n        if(!key) select.minLookup = '0';\n\n        select.onInit = function(val, form, event, setter) {\n          if(event === 'tag-init') {\n            setter(val);\n          }\n        };\n      }\n\n      if(schema.items) {\n        var defaults = [];\n        _.each(schema.items.properties, function(schema, key) {\n          if(angular.isDefined(schema.default)) {\n            defaults.push({\n              \"key\": key,\n              default: schema.default\n            });\n          }\n        });\n        if(defaults.length) {\n          select.onAdd = function(val, form, event) {\n            if(val.value && event === 'tag-added') {\n              _.each(defaults, function(prop) {\n                if(!val.value[prop.key]) val.value[prop.key] = prop.default;\n              });\n            }\n          };\n        }\n      }\n\n      if(!select.type.includes('cn-autocomplete')) {\n        if(select.items) {\n          select.detailedList = true;\n\n          if(select.items[0].type !== 'component') {\n            if(select.items.length > 1) {\n              select.items = [{\n                type: \"component\",\n                items: select.items\n              }];\n            }\n\n            service.processFieldset(select);\n          }\n\n          select.type = 'cn-autocomplete-detailed';\n        }\n        else {\n          if(!select.selectionStyle) {\n            select.selectionStyle = select.key === 'tags' ?\n              'tags' : (select.getSchemaType() === 'array' && select.schema.maxItems !== 1) ?\n                'list' : 'select';\n          }\n          select.type = 'cn-autocomplete';\n        }\n\n        if(select.titleMapResolve) {\n          $rootScope.$on('cnFlexFormDiff:data', (e, data) => {\n            if(data[select.titleMapResolve]) {\n              let modelValue = service.parseExpression(select.key, service.model);\n              let val = modelValue.get();\n              if(val !== undefined) {\n                let valid = getAllowedSelectValue(select, val, data[select.titleMapResolve]); \n                if(valid === undefined) modelValue.set();\n              }\n            }\n          });\n        }\n      }\n\n      if(select.displayFormat) {\n        select.itemFormatter = service.processTemplate(select.displayFormat);\n      }\n\n      service.registerHandler(select.key, function(val) {\n        var form = service.formCtrl && service.formCtrl[service.getKey(select.key)];\n        if(form && form.$setDirty) form.$setDirty();\n      }, select.updateSchema);\n    }\n\n    function processToggle(toggle) {\n      toggle.type = 'cn-toggle';\n    }\n\n    function processHelp(help) {\n      help.htmlClass = 'help-block';\n    }\n\n    function processDisplay(display) {\n      var service = this;\n      display.type = 'cn-display';\n      display.getDisplay = service.processTemplate(display.displayFormat, true);\n    }\n\n    function processTemplate(tpl, parseScope) {\n      var service = this;\n      //var processor = /<(\\S+)[^>]*>.*<\\/\\1>/.test(tpl) ? $compile : $interpolate;\n      var processor = $interpolate;\n      return function(scope, arrayIndex) {\n        if(parseScope) {\n          if(angular.isDefined(arrayIndex)) {\n            scope = _.map(scope, function(key) {\n              return key === 'arrayIndex' ? arrayIndex : key;\n            });\n          }\n          scope = service.parseExpression(scope, service.model).get();\n        }\n        return processor(tpl)(scope);\n      };\n    }\n\n    function processTable(table) {\n      var service = this;\n      table.type = 'cn-table';\n      table.items.forEach(function(row) {\n        for (var i = 0; i < table.columns.length; i++) {\n          _.extend(row.items[i], table.columns[i]);\n          //if (row.columns[i].key) row.columns[i].key = ObjectPath.parse(row.columns[i].key);\n          service.processField(row.items[i]);\n        }\n      });\n    }\n\n    function processSelectDisplay(selectDisplay, schema) {\n      var service = this,\n          selectField = _.find(selectDisplay.items, 'selectField'),\n          handler;\n\n      if (schema && schema.type === 'array') {\n        handler = service.setupArraySelectDisplay(selectDisplay, selectField);\n      } else {\n        handler = service.setupSelectDisplay(selectDisplay, selectField);\n      }\n\n      selectDisplay.selectDisplay = false;\n      service.registerHandler(selectField.key, handler, selectField.updateSchema, true);\n      service.processField(selectDisplay);\n    }\n\n    function setupArraySelectDisplay(selectDisplay, selectField) {\n      var service = this;\n      _.each(selectDisplay.items, function(item) {\n        if(item.condition !== 'false') {\n          item.condition = 'true';\n        }\n      });\n      var handler = function(val, prev, key) {\n        var index = getArrayIndex(key);\n        _.each(selectDisplay.items, function(item) {\n          var selectKey = service.getKey(selectField.key);\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var indexedSelectKey = service.setArrayIndex(selectKey, index);\n          var selectValue = service.parseExpression(indexedSelectKey, service.model).get();\n          var formCopies = service.getArrayCopies(key);\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            _.each(formCopies, function(copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'true';\n              }\n            });\n          } else {\n            _.each(formCopies, function(copy) {\n              if (getArrayIndex(copy) == index) {\n                copy.condition = 'false';\n                service.parseExpression(service.getKey(copy.key), service.model).set();\n              }\n            });\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n      _.each(selectDisplay.items, function(item) {\n        var key = service.getKey(item.key);\n        var selectKey = service.getKey(selectField.key);\n        if (key === selectKey) return;\n        _.each(model, function(elem, i) {\n          var indexedKey = service.setArrayIndex(key, i);\n          var splitIndexedKey = ObjectPath.parse(indexedKey);\n          var indexedSelectKey = service.setArrayIndex(selectKey, i);\n          var selectModel = service.parseExpression(indexedSelectKey, service.model);\n          var selectValue = selectModel.get();\n          var itemValue = service.parseExpression(indexedKey, service.model).get();\n          if (itemValue && !_.includes(selectValue, splitIndexedKey[splitIndexedKey.length - 1])) {\n            if (!selectValue) {\n              selectValue = [];\n            }\n            selectValue.push(splitIndexedKey[splitIndexedKey.length - 1]);\n            selectModel.set(selectValue);\n          }\n        });\n      });\n      // handle new objects with values set in defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function(elem, i) {\n        var selectKey = service.getKey(selectField.key);\n        var indexedSelectKey = service.setArrayIndex(selectKey, i);\n        var selectModel = service.parseExpression(indexedSelectKey, service.model);\n        var selectValue = selectModel.get();\n        _.each(elem, function(val, key) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(key);\n          selectModel.set(selectValue);\n        });\n      });\n      // run handler once all arrayCopies have been instantiated\n      var count = 0;\n      var keyMap = _.pluck(_.reject(selectDisplay.items, {\"condition\":\"false\"}), 'key');\n      var once = $rootScope.$on('flexFormArrayCopyAdded', function(event, key) {\n        var model = service.parseExpression(service.getKey(selectDisplay.key), service.model).get();\n        if (model) {\n          var total = model.length * (keyMap.length);\n          if (_.includes(keyMap, key)) {\n            count++;\n          }\n          if (count === total) {\n            for (var i = 0; i < model.length; i++) {\n              handler(null, null, '[' + i + ']');\n            }\n            count = 0;\n          }\n        }\n      });\n      var resetCount = $rootScope.$on('flexForm.updatePage', function() {\n        count = 0;\n      });\n      service.events.push(once);\n      service.events.push(resetCount);\n      return handler;\n    }\n\n    function setupSelectDisplay(selectDisplay, selectField) {\n      var service = this;\n      var handler = function() {\n        var selectKey = service.getKey(selectField.key);\n        _.each(selectDisplay.items, function(item) {\n          var key = service.getKey(item.key);\n          var splitKey = ObjectPath.parse(key);\n          if (selectKey === key) return;\n          var selectValue = service.parseExpression(selectKey, service.model).get();\n          if (_.includes(selectValue, splitKey[splitKey.length - 1])) {\n            item.condition = 'true';\n          } else {\n            item.condition = 'false';\n            service.parseExpression(key, service.model).set();\n          }\n        });\n      };\n      // handle legacy objects that don't have values set in the selectField\n      var selectKey = service.getKey(selectField.key);\n      var selectModel = service.parseExpression(selectKey, service.model);\n      var selectValue = selectModel.get();\n      _.each(selectDisplay.items, function(item) {\n        var key = service.getKey(item.key);\n        if (selectKey === key) return;\n        var splitKey = ObjectPath.parse(key);\n        var itemValue = service.parseExpression(key, service.model).get();\n        if (itemValue && !_.includes(selectValue, splitKey[splitKey.length - 1])) {\n          if (!selectValue) {\n            selectValue = [];\n          }\n          selectValue.push(splitKey[splitKey.length - 1]);\n          selectModel.set(selectValue);\n        }\n      });\n      // handle new objects with values set in the defaults\n      var defaults = service.getSchema(selectDisplay.key).default;\n      _.each(defaults, function(val, key) {\n        if (!selectValue) {\n          selectValue = [];\n        }\n        selectValue.push(key);\n        selectModel.set(selectValue);\n      });\n      // set default values here\n      var model = service.parseExpression(selectDisplay.key, service.model);\n      if (defaults && !model.get()) {\n        model.set(defaults);\n      }\n\n      return handler;\n    }\n\n    function setupSchemaRefresh(refresh) {\n      var service = this;\n      service.refreshSchema = _.debounce(function(updateSchema) {\n        var params = _.extend(cnFlexFormConfig.getStateParams(), service.params);\n        var diff = cnUtil.diff(service.schema.params, params, true);\n        var keys;\n\n        if(diff || updateSchema) {\n          if (updateSchema) params.updateSchema = updateSchema;\n          else {\n            keys = _.keys(diff);\n\n            if(keys.length > 1) {\n              diff = _.omit(diff, _.isNull);\n              keys = _.keys(diff);\n            }\n\n            params.updateSchema = _.first(keys);\n          }\n\n          if(!params.updateSchema) {\n            diff = cnUtil.diff(params, _.omit(service.schema.params, 'updateSchema'));\n            keys = _.keys(diff);\n\n            params.updateSchema = _.first(keys);\n          }\n\n          refresh(params).then(function(schema) {\n            ++service.updates;\n            //service.updateSchema(schema);\n            service.processUpdatedSchema(schema);\n          });\n        }\n      }, 100);\n\n      service.refreshData = _.debounce(function() {\n        refresh(_.extend(service.schema.params, {updateSchema: 'refreshData'})).then(function(schema) {\n          service.processUpdatedSchema(schema);\n        });\n      }, 100);\n\n      service.events.push($rootScope.$on('ffRefreshData', service.refreshData));\n    }\n\n    function processUpdatedSchema(schema) {\n      var service = this;\n      if(schema.diff) {\n        service.schema.params = schema.params;\n\n        if(schema.diff.data) {\n          $rootScope.$broadcast('cnFlexFormDiff:data', schema.diff.data);\n          _.each(schema.diff.data, (data, prop) => {\n            if(data && data.data && !_.isEmpty(service.schema.data[prop].data) && !data.reset) {\n              data.data = service.schema.data[prop].data.concat(data.data);\n            }\n            service.schema.data[prop] = data;\n            if(service.resolveRegister[prop]) {\n              _.each(service.resolveRegister[prop], (registers) => {\n                registers.forEach(register => {\n                  service.handleResolve(register.field, register.prop, `schema.data.${prop}`);\n                });\n              });\n            }\n          });\n        }\n\n        var keys = [];\n\n        if(schema.diff.schema) {\n          $rootScope.$broadcast('cnFlexFormDiff:schema', schema.diff.schema);\n          _.each(schema.diff.schema, function(schema, key) {\n            service.schema.schema.properties[key] = schema;\n            reprocessSchema(schema, key, keys);\n          });\n        }\n\n        if(schema.diff.form) {\n          $rootScope.$broadcast('cnFlexFormDiff:form', schema.diff.form);\n          _.each(schema.diff.form, function(form) {\n\n            if(keys.indexOf(form.key) === -1) {\n              keys.push(form.key);\n            }\n\n            // don't want to override key when extending cached objects\n            //var key = form.key;\n            //delete form.key;\n\n            var cached = service.getFromFormCache(form.key);\n            if(cached) {\n              service.reprocessField(cached, form);\n            }\n            var copies = service.getArrayCopies(form.key);\n            if(copies) {\n              copies.forEach(copy => copy && service.reprocessField(copy, form));\n            }\n          });\n        }\n\n        if(keys.length) {\n          _.each(keys, function(key) {\n            var form = service.getFromFormCache(key);\n            if(form) service.processField(form);\n            if(key.includes('[]')) {\n              var copies = service.getArrayCopies(key);\n              _.each(copies, function(copy) {\n                if(copy) service.processField(copy);\n              });\n            }\n          });\n        }\n\n        service.broadcastErrors();\n      }\n      else {\n        service.updateSchema(schema);\n      }\n    }\n\n    function reprocessField(current, update, isChild) {\n      var service = this;\n\n      // other logic in the service will add conition = 'true' to force\n      // condition to eval true, so we set the update condition to 'true'\n      // before comparing\n      if(!update.condition && current.condition) update.condition = 'true';\n      let redraw = !isChild && current.condition !== update.condition;\n\n      _.extend(current, _.omit(update, 'items', 'key'));\n\n      current._ogKeys.forEach(key => {\n        if(!update[key]) delete current[key];\n      });\n      current._ogKeys = _.keys(update);\n\n      service.deregisterHandlers(update.key);\n\n      $rootScope.$broadcast('cnFlexFormReprocessField', update.key);\n\n      // why do we redraw? If we're doing it to show error message\n      // that has been addressed from the angular-schema-form library\n      // if there's another issue, try triggering the specific action required\n      // instead of redrawing the whole form\n      if(redraw && current.redraw) current.redraw();\n    }\n\n    function reprocessSchema(schema, key, keys) {\n      keys.push(key);\n      if(schema.properties) {\n        _.each(schema.properties, function(schema, subKey) {\n          reprocessSchema(schema, key + '.' + subKey, keys);\n        });\n      }\n      if(schema.items && schema.items.properties) {\n        _.each(schema.properties, function(schema, subKey) {\n          reprocessSchema(schema, key + '[].' + subKey, keys);\n        });\n      }\n    }\n\n    function buildError(field) {\n      var service = this;\n      var key = service.getKey(field.key);\n      return {\n        key: key,\n        message: field.error\n      };\n    }\n\n    function broadcastErrors() {\n      var service = this;\n      $timeout(function() {\n        service.errors.forEach(function(error) {\n          $rootScope.$broadcast('schemaForm.error.' + error.key, 'serverValidation', error.message);\n        });\n      }, 1);\n    }\n\n    function replaceArrayIndex(resolve, key) {\n      if(!resolve.includes('arrayIndex')) return resolve;\n      var arrayIndexKey = /([^.]*)\\[arrayIndex\\]/.exec(resolve);\n      var re = new RegExp(arrayIndexKey[1] + '\\\\[(\\\\d+)\\\\]');\n      var index = re.exec(key);\n      return resolve.replace(new RegExp(arrayIndexKey[0].replace(/(\\[|\\])/g, '\\\\$1'), 'g'), index[0]);\n    }\n\n    function getArrayIndex(key) {\n      if (_.isObject(key)) {\n        return _.find(key.key, function(key) {\n          return _.isNumber(key);\n        });\n      } else {\n        return /\\[(\\d+)\\]/.exec(key)[1];\n      }\n    }\n\n    function setArrayIndex(key, index, asArray) {\n      var service = this;\n      var keyCopy;\n      if (_.isString(key)) {\n        keyCopy = ObjectPath.parse(key);\n      } else {\n        keyCopy = _.clone(key);\n      }\n      var indexOfIndex = keyCopy.indexOf('');\n      keyCopy[indexOfIndex] = index;\n\n      if (asArray) {\n        return keyCopy;\n      } else {\n        return service.getKey(keyCopy);\n      }\n    }\n\n    function cleanup() {\n      var service = this;\n      _.each(service.events, function(listener) {\n        listener();\n      });\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n      .module('cn.flex-form')\n      .controller('FlexFormSandbox', FlexFormSandbox);\n\n  /* @ngInject */\n  function FlexFormSandbox() {\n    /* jshint validthis: true */\n    var vm = this;\n\n    vm.activate = activate;\n    vm.onSchema = onSchema;\n    vm.model = {};\n    vm.config = {};\n    vm.schemaStr = '';\n\n    activate();\n\n    ////////////////\n\n    function activate() {\n      console.log('FlexFormSandbox');\n    }\n\n    function onSchema() {\n      if(vm.schemaStr) {\n        var schema = angular.fromJson(vm.schemaStr);\n        console.log('schema:', schema);\n        if(!schema.form && schema.forms) {\n          schema.form = schema.forms[0].form;\n        }\n        vm.config.schema = schema.form && schema;\n      }\n    }\n\n  }\n})();","(function() {\n  'use strict';\n\n  angular.module('cn.flex-form')\n      .config(schemaFormConfig)\n      .run(addTemplates);\n\n  schemaFormConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function schemaFormConfig(cnFlexFormServiceProvider) {\n    tv4.addFormat({\n      'url': data => _.isString(data) && !/^(https?:\\/\\/.{2}|$)/.test(data) && 'invalid url'\n    });\n\n    var extensions = [\n      'cn-fieldset',\n      'cn-toggle',\n      'cn-datetimepicker',\n      'cn-autocomplete',\n      'cn-autocomplete-detailed',\n      'cn-currency',\n      'cn-radios',\n      'cn-radiobuttons',\n      'cn-percentage',\n      'cn-display',\n      'cn-mediaupload',\n      'cn-csvupload',\n      'cn-reusable',\n      'cn-table'\n    ];\n\n    _.each(extensions, function(extension) {\n      cnFlexFormServiceProvider.registerField({\n        type: extension,\n        templateUrl: `app/components/cn-flex-form/forms/${extension}.html`\n      });\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-toggle.html',\n        `\n        <div class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n          <div class=\"clearfix\">\n            <cn-toggle-switch\n              class=\"pull-left\"\n              ng-show=\"form.key\"\n              ng-model-options=\"form.ngModelOptions\"\n              ng-model=\"$$value$$\"\n              sf-changed=\"form\"\n              schema-validate=\"form\"\n              on-value=\"form.onValue\"\n              off-value=\"form.offValue\"\n              read-only=\"form.readonly\"\n              undefined-class=\"form.undefinedClass\"/>\n            <span ng-show=\"form.onText && form.offText\">\n              {{$$value$$ === form.onValue ? form.onText : form.offText}}\n            </span>\n          </div>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-datetimepicker.html',\n        `\n        <div class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 for=\"{{form.key.join('.')}}\"\n                 ng-show=\"showTitle()\">{{form.title}}</label>\n          <cn-datetimepicker\n            ng-show=\"form.key\"\n            ng-model=\"$$value$$\"\n            ng-model-options=\"form.ngModelOptions\"\n            is-disabled=\"form.readonly\"\n            sf-changed=\"form\"\n            schema-validate=\"form\"\n            input-id=\"{{form.key.join('.')}}\"\n            min-date=\"form.minDate\"\n            max-date=\"form.maxDate\"\n            max-view=\"{{form.maxView}}\"\n            cn-date-required=\"form.required\"\n            placeholder=\"{{form.placeholder}}\"\n            model-type=\"{{form.schema.type}}\"\n            model-formatter=\"form.modelFormatter\"\n            model-parser=\"form.modelParser\"\n            view-formatter=\"form.viewFormatter\"\n            view-parser=\"form.viewParser\"\n            format-string={{form.dateFormat}}\n            icon-class={{form.iconClass}}>\n          </cn-datetimepicker>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    var sharedAutocompleteTpl = `\n          <tags-input\n            ng-show=\"form.key\"\n            ng-model=\"$$value$$\"\n            ng-model-options=\"form.ngModelOptions\"\n            ng-disabled=\"form.readonly\"\n            sf-changed=\"form\"\n            schema-validate=\"form\"\n            input-id=\"{{form.key.join('.')}}\"\n            display-property=\"{{form.displayProperty || 'name'}}\"\n            value-property=\"{{form.valueProperty}}\"\n            placeholder=\"{{form.placeholder || ' '}}\"\n            clear-on-blur=\"true\"\n            add-on-comma=\"false\"\n            add-from-autocomplete-only=\"{{!form.allowNew}}\"\n            on-before-tag-added=\"form.onAdd({value: $tag}, form, $event, $prev)\"\n            on-init=\"form.onInit($tag, form, $event, $setter)\"\n            model-type=\"{{form.getSchemaType()}}\"\n            array-value-type=\"{{form.schema.items.type}}\"\n            hide-tags=\"{{form.detailedList}}\"\n            tags-style=\"{{form.selectionStyle}}\"\n            required=\"{{form.required}}\"\n            min-length=\"{{form.minLength}}\"\n            allowed-tags-pattern=\".*\"\n            dropdown-icon=\"true\"\n            item-formatter=\"form.itemFormatter\"\n            min-tags=\"{{form.schema.minItems}}\"\n            max-tags=\"{{form.schema.maxItems || form.getSchemaType() !== 'array' ? 1 : 0}}\"\n            allow-bulk=\"{{form.bulkAdd}}\"\n            bulk-delimiter=\"{{form.bulkDelimiter}}\"\n            bulk-placeholder=\"{{form.bulkPlaceholder}}\"\n            show-clear-all=\"{{form.showClearAll}}\"\n            show-button=\"true\">\n            <auto-complete\n              source=\"form.getTitleMap && form.getTitleMap() || form.titleQuery($query)\"\n              skip-filtering=\"{{form.titleQuery ? true : false}}\"\n              min-length=\"{{form.minLookup || (form.titleQuery && 3 || 0)}}\">\n            </auto-complete>\n          </tags-input>`;\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-autocomplete.html',\n        `\n        <div class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 for=\"{{form.key.join('.')}}-input\"\n                 ng-show=\"showTitle()\">{{form.title}}</label>\n          ${sharedAutocompleteTpl}\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-autocomplete-detailed.html',\n        `\n        <div sf-array=\"form\"\n             class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 for=\"{{form.key.join('.')}}-input\"\n                 ng-show=\"showTitle()\">{{form.title}}</label>\n          <ol class=\"list-group cn-autocomplete-list\"\n              ng-show=\"modelArray.length\"\n              ng-model=\"modelArray\">\n            <li class=\"list-group-item {{form.fieldHtmlClass}}\"\n                ng-repeat=\"item in modelArray track by $index\">\n              <button ng-hide=\"form.readonly || form.remove === null\"\n                      ng-click=\"deleteFromArray($index)\"\n                      type=\"button\" class=\"close pull-right\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n              <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"/>\n            </li>\n          </ol>\n          ${sharedAutocompleteTpl}\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-currency.html',\n        `\n        <div class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 ng-show=\"showTitle()\"\n                 for=\"{{form.key.join('.')}}\">{{form.title}}</label>\n          <div class=\"{{form.fieldClass}} input-group\">\n            <label class=\"input-group-addon\"\n                   ng-disabled=\"form.readonly\"\n                   for=\"{{form.key.join('.')}}\">$</label>\n            <input class=\"form-control\"\n                   cn-currency-format=\"{{form.currencyFormat}}\"\n                   cn-currency-placeholder=\"{{form.placeholder}}\"\n                   ng-show=\"form.key\"\n                   ng-model-options=\"form.ngModelOptions\"\n                   ng-disabled=\"form.readonly\"\n                   sf-changed=\"form\"\n                   schema-validate=\"form\"\n                   type=\"text\"\n                   step=\"any\"\n                   min=\"{{form.min}}\"\n                   max=\"{{form.max}}\"\n                   id=\"{{form.key.join('.')}}\"\n                   name=\"{{form.key.join('.')}}\"\n                   ng-model=\"$$value$$\">\n          </div>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-radios.html',\n        `<div class=\"form-group {{form.htmlClass}}\"\n              ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n           <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n           <div class=\"btn-group clearfix\">\n             <label class=\"radio radio-block\"\n                    ng-repeat=\"item in form.titleMap\">\n               <input type=\"radio\"\n                      sf-changed=\"form\"\n                      ng-disabled=\"form.readonly\"\n                      ng-model=\"$$value$$\"\n                      ng-model-options=\"form.ngModelOptions\"\n                      schema-validate=\"form\"\n                      ff-validate=\"form\"\n                      ng-value=\"item.value\"\n                      name=\"{{form.key.join('.')}}\">\n               <span class=\"radio-block-icon\" ng-if=\"item.iconClass\">\n                 <i class=\"fa fa-{{item.iconClass}} fa-lg\"></i>\n               </span>\n               <span ng-bind-html=\"item.name\"></span>\n             </label>\n           </div>\n           <span class=\"help-block\" sf-message=\"form.description\"></span>\n         </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-radiobuttons.html',\n        `\n        <div class=\"form-group schema-form-radiobuttons cn-radiobuttons {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n          <div class=\"btn-group clearfix\">\n            <label class=\"btn btn-{{item.value}} {{form.btnClass}} {{item.value === $$value$$ ? 'active' : ''}}\"\n                   ng-repeat=\"item in form.titleMap\">\n              <input type=\"radio\"\n                     class=\"{{form.fieldHtmlClass}} hide\"\n                     sf-changed=\"form\"\n                     ng-disabled=\"form.readonly\"\n                     ng-model=\"$$value$$\"\n                     ng-model-options=\"form.ngModelOptions\"\n                     schema-validate=\"form\"\n                     ff-validate=\"form\"\n                     ng-value=\"item.value\"\n                     name=\"{{form.key.join('.')}}\">\n              <i class=\"fa fa-{{item.value}} fa-lg\"></i>\n              <span ng-bind-html=\"item.name\"></span>\n            </label>\n          </div>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-percentage.html',\n        `\n        <div class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 ng-show=\"showTitle()\"\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n          <div class=\"{{form.fieldClass}} input-group\">\n            <input class=\"form-control\"\n                   cn-percentage-format\n                   ng-show=\"form.key\"\n                   ng-model-options=\"form.ngModelOptions\"\n                   ng-disabled=\"form.readonly\"\n                   sf-changed=\"form\"\n                   schema-validate=\"form\"\n                   type=\"number\"\n                   step=\"any\"\n                   min=\"{{form.min}}\"\n                   max=\"{{form.max}}\"\n                   id=\"{{form.key && form.key[0]}}\"\n                   name=\"{{form.key && form.key[0]}}\"\n                   ng-model=\"$$value$$\">\n             <div class=\"input-group-addon\"\n                    ng-disabled=\"form.readonly\"\n                    for=\"{{form.key && form.key[0]}}\">%</div>\n          </div>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-display.html',\n        `\n        <div class=\"form-group cn-display{{form.htmlClass}}\">\n          <input ng-show=\"form.key\"\n                 class=\"form-control\"\n                 id=\"{{form.key.join('.')}}\"\n                 name=\"{{form.key.join('.')}}\"\n                 ng-disabled=\"true\"\n                 value=\"{{form.getDisplay(form.key, form.arrayIndex)}}\">\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-fieldset.html',\n        `\n        <fieldset ng-disabled=\"form.readonly\" class=\"schema-form-fieldset {{form.htmlClass}}\">\n          <legend ng-click=\"form.toggleCollapse(form)\"\n                  ng-class=\"{'sr-only': !showTitle(), collapsible: form.collapsible}\"\n                  ng-mouseenter=\"form.render = true\">\n            <i ng-show=\"form.collapsible\"\n               class=\"fa fa-caret-{{form.collapsed ? 'right' : 'down'}}\"></i>\n            {{ form.title }}\n          </legend>\n          <div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div>\n          <div uib-collapse=\"form.collapsed\">\n            <div ng-if=\"form.render\">\n              <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\n            </div>\n          </div>\n        </fieldset>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-mediaupload.html',\n        `\n        <div class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 ng-show=\"showTitle()\"\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n          <media-upload ng-model=\"$$value$$\"\n                        cn-file-type=\"form.fileType\"\n                        cn-upload-path=\"form.uploadPath\"\n                        cn-data=\"form.data\"\n                        cn-preview-path=\"form.previewPath\"\n                        cn-model-value-key=\"form.modelValueKey\"\n                        ng-model-options=\"form.ngModelOptions\"\n                        sf-changed=\"form\"\n                        schema-validate=\"form\"\n                        ff-form=\"form\"\n                        class=\"clearfix\">\n          </media-upload>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n       </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-csvupload.html',\n        `\n        <div class=\"form-group {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 ng-show=\"showTitle()\"\n                 for=\"{{form.key && form.key[0]}}\">{{form.title}}</label>\n          <csv-upload ng-model=\"$$value$$\"\n                        cn-upload-path=\"form.uploadPath\"\n                        ng-model-options=\"form.ngModelOptions\"\n                        sf-changed=\"form\"\n                        schema-validate=\"form\"\n                        ff-form=\"form\"\n                        class=\"clearfix\">\n          </csv-upload>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n       </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-reusable.html',\n        `\n        <div class=\"form-group cn-reusable {{form.htmlClass}}\"\n             ng-class=\"{'has-error': hasError(), 'has-success': hasSuccess()}\">\n          <label class=\"control-label\"\n                 ng-show=\"showTitle()\"\n                 for=\"{{form.key.join('.')}}\">{{form.title}}</label>\n          <cn-select-or\n            ng-show=\"form.key\"\n            select-from=\"form.library\"\n            ng-model=\"$$value$$\"\n            ng-model-options=\"form.ngModelOptions\"\n            sf-changed=\"form\"\n            schema-validate=\"form\"\n            ff-form=\"form\"\n            directiveId=\"form.directiveId\"\n            item-template=\"form.itemTemplate\"\n            toggle-text=\"form.toggleText\"\n            disabled=\"form.readonly\"\n            view=\"form.view\">\n            <sf-decorator ng-repeat=\"item in form.items\" form=\"item\"/>\n          </cn-select-or>\n          <p ng-if=\"form.loadMore && form.view === 'list'\">\n            <a ng-click=\"form.loadMore()\"\n               class=\"btn btn-default btn-block\">Load More</a>\n          </p>\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\n        </div>`\n    );\n\n    $templateCache.put(\n        'app/components/cn-flex-form/forms/cn-table.html',\n        '\\\n        <div class=\"form-group cn-ff-table {{form.htmlClass}}\"\\\n             ng-class=\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\">\\\n          <h6>{{form.title}}</h6>\\\n          <div class=\"row\">\\\n            <div ng-repeat=\"col in form.columns\" class=\"{{col.columnWidth}}\">\\\n              <p class=\"column-header\">{{col.columnHeader}}</p>\\\n            </div>\\\n          </div>\\\n          <div class=\"row\" ng-repeat=\"row in form.items\">\\\n            <div ng-repeat=\"col in row.items\" class=\"{{col.columnWidth}}\">\\\n              <sf-decorator form=\"col\"></sf-decorator>\\\n            </div>\\\n          </div>\\\n          <span class=\"help-block\" sf-message=\"form.description\"></span>\\\n        </div>\\\n        '\n    );\n  }\n\n})();\n"],"sourceRoot":"/source/"}